HEADER:10000000							;
HEADER:10000000							; +-------------------------------------------------------------------------+
HEADER:10000000							; |   This file	has been generated by The Interactive Disassembler (IDA)    |
HEADER:10000000							; |	      Copyright	(c) 2013 Hex-Rays, <support@hex-rays.com>	    |
HEADER:10000000							; |			 License info:                			    |
HEADER:10000000							; |				   Microsoft				    |
HEADER:10000000							; +-------------------------------------------------------------------------+
HEADER:10000000							;
HEADER:10000000
HEADER:10000000
HEADER:10000000									.686p
HEADER:10000000									.mmx
HEADER:10000000									.model flat
HEADER:10000000
HEADER:10000000							; ===========================================================================
HEADER:10000000
HEADER:10000000							; [00001000 BYTES: COLLAPSED SEGMENT HEADER. PRESS KEYPAD CTRL-"+" TO EXPAND]
.text:10001000						       ; 
.text:10001000						       ; Format	     : Portable	executable for 80386 (PE)
.text:10001000						       ; Imagebase   : 10000000
.text:10001000						       ; Section 1. (virtual address 00001000)
.text:10001000						       ; Virtual size		       : 0000317D (  12669.)
.text:10001000						       ; Section size in file	       : 00004000 (  16384.)
.text:10001000						       ; Offset	to raw data for	section: 00001000
.text:10001000						       ; Flags 60000020: Text Executable Readable
.text:10001000						       ; Alignment     : default
.text:10001000						       ; Exported entry	  2. ??0CLocationInfo@@QAE@XZ
.text:10001000						       ; ===========================================================================
.text:10001000
.text:10001000						       ; Segment type: Pure code
.text:10001000						       ; Segment permissions: Read/Execute
.text:10001000						       _text	       segment para public 'CODE' use32
.text:10001000								       assume cs:_text
.text:10001000								       ;org 10001000h
.text:10001000								       assume es:nothing, ss:nothing, ds:_data,	fs:nothing, gs:nothing
.text:10001000
.text:10001000						       ; =============== S U B R O U T I N E =======================================
.text:10001000
.text:10001000
.text:10001000						       ; int __thiscall	CLocationInfo::CLocationInfo(CLocationInfo *__hidden this)
.text:10001000								       public ??0CLocationInfo@@QAE@XZ
.text:10001000						       ??0CLocationInfo@@QAE@XZ	proc near      ; DATA XREF: HEADER:1000012Co
.text:10001000											       ; HEADER:10000204o ...
.text:10001000
.text:10001000						       var_10	       = dword ptr -10h
.text:10001000						       var_C	       = dword ptr -0Ch
.text:10001000						       var_4	       = dword ptr -4
.text:10001000
.text:10001000 6A FF							       push    0FFFFFFFFh
.text:10001002 68 B8 3D	00 10						       push    offset ??0CLocationInfo@@QAE@XZ_SEH
.text:10001007 64 A1 00	00 00 00					       mov     eax, large fs:0
.text:1000100D 50							       push    eax
.text:1000100E 64 89 25	00 00 00 00					       mov     large fs:0, esp
.text:10001015 51							       push    ecx
.text:10001016 56							       push    esi
.text:10001017 8B F1							       mov     esi, ecx
.text:10001019 57							       push    edi
.text:1000101A 89 74 24	08						       mov     [esp+18h+var_10], esi
.text:1000101E C7 06 7C	51 00 10					       mov     dword ptr [esi],	offset off_1000517C
.text:10001024 68 8C 39	00 10						       push    offset ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10001029 68 86 39	00 10						       push    offset ??0CString@@QAE@XZ ; CString::CString(void)
.text:1000102E 6A 04							       push    4
.text:10001030 8D 46 2C							       lea     eax, [esi+2Ch]
.text:10001033 6A 04							       push    4
.text:10001035 50							       push    eax
.text:10001036 C7 44 24	28 00 00 00 00					       mov     [esp+2Ch+var_4],	0
.text:1000103E E8 1B 2A	00 00						       call    sub_10003A5E
.text:10001043 8D 7E 08							       lea     edi, [esi+8]
.text:10001046 B9 09 00	00 00						       mov     ecx, 9
.text:1000104B 33 C0							       xor     eax, eax
.text:1000104D C7 06 68	51 00 10					       mov     dword ptr [esi],	offset ??_7CLocationInfo@@6B@ ;	const CLocationInfo::`vftable'
.text:10001053 F3 AB							       rep stosd
.text:10001055 8B 4C 24	0C						       mov     ecx, [esp+18h+var_C]
.text:10001059 89 46 04							       mov     [esi+4],	eax
.text:1000105C 89 46 3C							       mov     [esi+3Ch], eax
.text:1000105F 8B C6							       mov     eax, esi
.text:10001061 5F							       pop     edi
.text:10001062 5E							       pop     esi
.text:10001063 64 89 0D	00 00 00 00					       mov     large fs:0, ecx
.text:1000106A 83 C4 10							       add     esp, 10h
.text:1000106D C3							       retn
.text:1000106D						       ??0CLocationInfo@@QAE@XZ	endp
.text:1000106D
.text:1000106D						       ; ---------------------------------------------------------------------------
.text:1000106E 90 90							       align 10h
.text:10001070
.text:10001070						       ; =============== S U B R O U T I N E =======================================
.text:10001070
.text:10001070
.text:10001070						       ; int __thiscall	sub_10001070(void *, char)
.text:10001070						       sub_10001070    proc near	       ; DATA XREF: .rdata:10005180o
.text:10001070
.text:10001070						       arg_0	       = byte ptr  4
.text:10001070
.text:10001070 8A 44 24	04						       mov     al, [esp+arg_0]
.text:10001074 56							       push    esi
.text:10001075 8B F1							       mov     esi, ecx
.text:10001077 A8 01							       test    al, 1
.text:10001079 C7 06 7C	51 00 10					       mov     dword ptr [esi],	offset off_1000517C
.text:1000107F 74 09							       jz      short loc_1000108A
.text:10001081 56							       push    esi	       ; void *
.text:10001082 E8 0B 29	00 00						       call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:10001087 83 C4 04							       add     esp, 4
.text:1000108A
.text:1000108A						       loc_1000108A:			       ; CODE XREF: sub_10001070+Fj
.text:1000108A 8B C6							       mov     eax, esi
.text:1000108C 5E							       pop     esi
.text:1000108D C2 04 00							       retn    4
.text:1000108D						       sub_10001070    endp
.text:1000108D
.text:10001090						       ; ---------------------------------------------------------------------------
.text:10001090						       ; START OF FUNCTION CHUNK FOR sub_10003DB0
.text:10001090
.text:10001090						       loc_10001090:			       ; CODE XREF: sub_10003DB0+3j
.text:10001090											       ; sub_10003DD0+3j ...
.text:10001090 C7 01 7C	51 00 10					       mov     dword ptr [ecx],	offset off_1000517C
.text:10001096 C3							       retn
.text:10001096						       ; END OF	FUNCTION CHUNK FOR sub_10003DB0
.text:10001096						       ; ---------------------------------------------------------------------------
.text:10001097 90 90 90	90 90 90 90 90 90				       align 10h
.text:100010A0						       ; [00000003 BYTES: COLLAPSED FUNCTION nullsub_1.	PRESS KEYPAD CTRL-"+" TO EXPAND]
.text:100010A3 90 90 90	90 90 90 90 90 90 90 90	90 90			       align 10h
.text:100010B0						       ; [00000001 BYTES: COLLAPSED FUNCTION nullsub_2.	PRESS KEYPAD CTRL-"+" TO EXPAND]
.text:100010B1 90 90 90	90 90 90 90 90 90 90 90	90 90 90 90		       align 10h
.text:100010C0						       ; Exported entry	  5. ??1CLocationInfo@@UAE@XZ
.text:100010C0
.text:100010C0						       ; =============== S U B R O U T I N E =======================================
.text:100010C0
.text:100010C0
.text:100010C0						       ; int __thiscall	CLocationInfo::~CLocationInfo(CLocationInfo *__hidden this)
.text:100010C0								       public ??1CLocationInfo@@UAE@XZ
.text:100010C0						       ??1CLocationInfo@@UAE@XZ	proc near      ; CODE XREF: sub_10001120+3Ap
.text:100010C0											       ; DATA XREF: sub_10001120+14o ...
.text:100010C0
.text:100010C0						       var_10	       = dword ptr -10h
.text:100010C0						       var_C	       = dword ptr -0Ch
.text:100010C0						       var_4	       = dword ptr -4
.text:100010C0
.text:100010C0 6A FF							       push    0FFFFFFFFh
.text:100010C2 68 D8 3D	00 10						       push    offset ??1CLocationInfo@@UAE@XZ_SEH
.text:100010C7 64 A1 00	00 00 00					       mov     eax, large fs:0
.text:100010CD 50							       push    eax
.text:100010CE 64 89 25	00 00 00 00					       mov     large fs:0, esp
.text:100010D5 51							       push    ecx
.text:100010D6 56							       push    esi
.text:100010D7 8B F1							       mov     esi, ecx
.text:100010D9 89 74 24	04						       mov     [esp+14h+var_10], esi
.text:100010DD C7 06 68	51 00 10					       mov     dword ptr [esi],	offset ??_7CLocationInfo@@6B@ ;	const CLocationInfo::`vftable'
.text:100010E3 68 8C 39	00 10						       push    offset ??1CString@@QAE@XZ ; CString::~CString(void)
.text:100010E8 6A 04							       push    4
.text:100010EA 8D 46 2C							       lea     eax, [esi+2Ch]
.text:100010ED 6A 04							       push    4
.text:100010EF 50							       push    eax
.text:100010F0 C7 44 24	20 00 00 00 00					       mov     [esp+24h+var_4],	0
.text:100010F8 E8 F3 29	00 00						       call    sub_10003AF0
.text:100010FD 8B 4C 24	08						       mov     ecx, [esp+14h+var_C]
.text:10001101 C7 06 7C	51 00 10					       mov     dword ptr [esi],	offset off_1000517C
.text:10001107 5E							       pop     esi
.text:10001108 64 89 0D	00 00 00 00					       mov     large fs:0, ecx
.text:1000110F 83 C4 10							       add     esp, 10h
.text:10001112 C3							       retn
.text:10001112						       ??1CLocationInfo@@UAE@XZ	endp
.text:10001112
.text:10001112						       ; ---------------------------------------------------------------------------
.text:10001113 90 90 90	90 90 90 90 90 90 90 90	90 90			       align 10h
.text:10001120
.text:10001120						       ; =============== S U B R O U T I N E =======================================
.text:10001120
.text:10001120
.text:10001120						       ; int __thiscall	sub_10001120(CLocationInfo *this, char)
.text:10001120						       sub_10001120    proc near	       ; DATA XREF: .rdata:1000516Co
.text:10001120
.text:10001120						       arg_0	       = byte ptr  4
.text:10001120
.text:10001120 53							       push    ebx
.text:10001121 8A 5C 24	08						       mov     bl, [esp+4+arg_0]
.text:10001125 56							       push    esi
.text:10001126 8B F1							       mov     esi, ecx
.text:10001128 F6 C3 02							       test    bl, 2
.text:1000112B 74 2B							       jz      short loc_10001158
.text:1000112D 8B 46 FC							       mov     eax, [esi-4]
.text:10001130 57							       push    edi
.text:10001131 8D 7E FC							       lea     edi, [esi-4]
.text:10001134 68 C0 10	00 10						       push    offset ??1CLocationInfo@@UAE@XZ ; CLocationInfo::~CLocationInfo(void)
.text:10001139 50							       push    eax
.text:1000113A 6A 40							       push    40h
.text:1000113C 56							       push    esi
.text:1000113D E8 AE 29	00 00						       call    sub_10003AF0
.text:10001142 F6 C3 01							       test    bl, 1
.text:10001145 74 09							       jz      short loc_10001150
.text:10001147 57							       push    edi	       ; void *
.text:10001148 E8 45 28	00 00						       call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:1000114D 83 C4 04							       add     esp, 4
.text:10001150
.text:10001150						       loc_10001150:			       ; CODE XREF: sub_10001120+25j
.text:10001150 8B C7							       mov     eax, edi
.text:10001152 5F							       pop     edi
.text:10001153 5E							       pop     esi
.text:10001154 5B							       pop     ebx
.text:10001155 C2 04 00							       retn    4
.text:10001158						       ; ---------------------------------------------------------------------------
.text:10001158
.text:10001158						       loc_10001158:			       ; CODE XREF: sub_10001120+Bj
.text:10001158 8B CE							       mov     ecx, esi	       ; this
.text:1000115A E8 61 FF	FF FF						       call    ??1CLocationInfo@@UAE@XZ	; CLocationInfo::~CLocationInfo(void)
.text:1000115F F6 C3 01							       test    bl, 1
.text:10001162 74 09							       jz      short loc_1000116D
.text:10001164 56							       push    esi	       ; void *
.text:10001165 E8 28 28	00 00						       call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:1000116A 83 C4 04							       add     esp, 4
.text:1000116D
.text:1000116D						       loc_1000116D:			       ; CODE XREF: sub_10001120+42j
.text:1000116D 8B C6							       mov     eax, esi
.text:1000116F 5E							       pop     esi
.text:10001170 5B							       pop     ebx
.text:10001171 C2 04 00							       retn    4
.text:10001171						       sub_10001120    endp
.text:10001171
.text:10001171						       ; ---------------------------------------------------------------------------
.text:10001174 90 90 90	90 90 90 90 90 90 90 90	90			       align 10h
.text:10001180						       ; Exported entry	  3. ??0CPhotoInfo@@QAE@XZ
.text:10001180
.text:10001180						       ; =============== S U B R O U T I N E =======================================
.text:10001180
.text:10001180
.text:10001180						       ; int __thiscall	CPhotoInfo::CPhotoInfo(CPhotoInfo *__hidden this)
.text:10001180								       public ??0CPhotoInfo@@QAE@XZ
.text:10001180						       ??0CPhotoInfo@@QAE@XZ proc near	       ; DATA XREF: .rdata:off_10005C68o
.text:10001180
.text:10001180						       var_10	       = dword ptr -10h
.text:10001180						       var_C	       = dword ptr -0Ch
.text:10001180						       var_4	       = dword ptr -4
.text:10001180
.text:10001180 6A FF							       push    0FFFFFFFFh
.text:10001182 68 03 3E	00 10						       push    offset ??0CPhotoInfo@@QAE@XZ_SEH
.text:10001187 64 A1 00	00 00 00					       mov     eax, large fs:0
.text:1000118D 50							       push    eax
.text:1000118E 64 89 25	00 00 00 00					       mov     large fs:0, esp
.text:10001195 51							       push    ecx
.text:10001196 53							       push    ebx
.text:10001197 56							       push    esi
.text:10001198 8B F1							       mov     esi, ecx
.text:1000119A 57							       push    edi
.text:1000119B 89 74 24	0C						       mov     [esp+1Ch+var_10], esi
.text:1000119F C7 06 7C	51 00 10					       mov     dword ptr [esi],	offset off_1000517C
.text:100011A5 33 DB							       xor     ebx, ebx
.text:100011A7 8D 4E 08							       lea     ecx, [esi+8]    ; this
.text:100011AA 89 5C 24	18						       mov     [esp+1Ch+var_4],	ebx
.text:100011AE E8 D3 27	00 00						       call    ??0CString@@QAE@XZ ; CString::CString(void)
.text:100011B3 68 8C 39	00 10						       push    offset ??1CString@@QAE@XZ ; CString::~CString(void)
.text:100011B8 68 86 39	00 10						       push    offset ??0CString@@QAE@XZ ; CString::CString(void)
.text:100011BD 6A 04							       push    4
.text:100011BF 8D 46 14							       lea     eax, [esi+14h]
.text:100011C2 6A 04							       push    4
.text:100011C4 50							       push    eax
.text:100011C5 C6 44 24	2C 01						       mov     byte ptr	[esp+30h+var_4], 1
.text:100011CA E8 8F 28	00 00						       call    sub_10003A5E
.text:100011CF 8D 7E 24							       lea     edi, [esi+24h]
.text:100011D2 B9 09 00	00 00						       mov     ecx, 9
.text:100011D7 33 C0							       xor     eax, eax
.text:100011D9 C7 06 90	51 00 10					       mov     dword ptr [esi],	offset ??_7CPhotoInfo@@6B@ ; const CPhotoInfo::`vftable'
.text:100011DF F3 AB							       rep stosd
.text:100011E1 8B 4C 24	10						       mov     ecx, [esp+1Ch+var_C]
.text:100011E5 89 5E 10							       mov     [esi+10h], ebx
.text:100011E8 C7 46 04	FF FF FF FF					       mov     dword ptr [esi+4], 0FFFFFFFFh
.text:100011EF 89 5E 0C							       mov     [esi+0Ch], ebx
.text:100011F2 89 5E 48							       mov     [esi+48h], ebx
.text:100011F5 8B C6							       mov     eax, esi
.text:100011F7 5F							       pop     edi
.text:100011F8 5E							       pop     esi
.text:100011F9 5B							       pop     ebx
.text:100011FA 64 89 0D	00 00 00 00					       mov     large fs:0, ecx
.text:10001201 83 C4 10							       add     esp, 10h
.text:10001204 C3							       retn
.text:10001204						       ??0CPhotoInfo@@QAE@XZ endp
.text:10001204
.text:10001204						       ; ---------------------------------------------------------------------------
.text:10001205 90 90 90	90 90 90 90 90 90 90 90				       align 10h
.text:10001210						       ; Exported entry	  6. ??1CPhotoInfo@@UAE@XZ
.text:10001210
.text:10001210						       ; =============== S U B R O U T I N E =======================================
.text:10001210
.text:10001210
.text:10001210						       ; int __thiscall	CPhotoInfo::~CPhotoInfo(CPhotoInfo *__hidden this)
.text:10001210								       public ??1CPhotoInfo@@UAE@XZ
.text:10001210						       ??1CPhotoInfo@@UAE@XZ proc near	       ; CODE XREF: sub_10001270+3Ap
.text:10001210											       ; DATA XREF: sub_10001270+14o ...
.text:10001210
.text:10001210						       var_10	       = dword ptr -10h
.text:10001210						       var_C	       = dword ptr -0Ch
.text:10001210						       var_4	       = dword ptr -4
.text:10001210
.text:10001210 6A FF							       push    0FFFFFFFFh
.text:10001212 68 23 3E	00 10						       push    offset ??1CPhotoInfo@@UAE@XZ_SEH
.text:10001217 64 A1 00	00 00 00					       mov     eax, large fs:0
.text:1000121D 50							       push    eax
.text:1000121E 64 89 25	00 00 00 00					       mov     large fs:0, esp
.text:10001225 51							       push    ecx
.text:10001226 56							       push    esi
.text:10001227 8B F1							       mov     esi, ecx
.text:10001229 89 74 24	04						       mov     [esp+14h+var_10], esi
.text:1000122D C7 06 90	51 00 10					       mov     dword ptr [esi],	offset ??_7CPhotoInfo@@6B@ ; const CPhotoInfo::`vftable'
.text:10001233 68 8C 39	00 10						       push    offset ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10001238 6A 04							       push    4
.text:1000123A 8D 46 14							       lea     eax, [esi+14h]
.text:1000123D 6A 04							       push    4
.text:1000123F 50							       push    eax
.text:10001240 C7 44 24	20 01 00 00 00					       mov     [esp+24h+var_4],	1
.text:10001248 E8 A3 28	00 00						       call    sub_10003AF0
.text:1000124D 8D 4E 08							       lea     ecx, [esi+8]    ; this
.text:10001250 C6 44 24	10 00						       mov     byte ptr	[esp+14h+var_4], 0
.text:10001255 E8 32 27	00 00						       call    ??1CString@@QAE@XZ ; CString::~CString(void)
.text:1000125A 8B 4C 24	08						       mov     ecx, [esp+14h+var_C]
.text:1000125E C7 06 7C	51 00 10					       mov     dword ptr [esi],	offset off_1000517C
.text:10001264 5E							       pop     esi
.text:10001265 64 89 0D	00 00 00 00					       mov     large fs:0, ecx
.text:1000126C 83 C4 10							       add     esp, 10h
.text:1000126F C3							       retn
.text:1000126F						       ??1CPhotoInfo@@UAE@XZ endp
.text:1000126F
.text:10001270
.text:10001270						       ; =============== S U B R O U T I N E =======================================
.text:10001270
.text:10001270
.text:10001270						       ; int __thiscall	sub_10001270(CPhotoInfo	*this, char)
.text:10001270						       sub_10001270    proc near	       ; DATA XREF: .rdata:10005194o
.text:10001270
.text:10001270						       arg_0	       = byte ptr  4
.text:10001270
.text:10001270 53							       push    ebx
.text:10001271 8A 5C 24	08						       mov     bl, [esp+4+arg_0]
.text:10001275 56							       push    esi
.text:10001276 8B F1							       mov     esi, ecx
.text:10001278 F6 C3 02							       test    bl, 2
.text:1000127B 74 2B							       jz      short loc_100012A8
.text:1000127D 8B 46 FC							       mov     eax, [esi-4]
.text:10001280 57							       push    edi
.text:10001281 8D 7E FC							       lea     edi, [esi-4]
.text:10001284 68 10 12	00 10						       push    offset ??1CPhotoInfo@@UAE@XZ ; CPhotoInfo::~CPhotoInfo(void)
.text:10001289 50							       push    eax
.text:1000128A 6A 4C							       push    4Ch
.text:1000128C 56							       push    esi
.text:1000128D E8 5E 28	00 00						       call    sub_10003AF0
.text:10001292 F6 C3 01							       test    bl, 1
.text:10001295 74 09							       jz      short loc_100012A0
.text:10001297 57							       push    edi	       ; void *
.text:10001298 E8 F5 26	00 00						       call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:1000129D 83 C4 04							       add     esp, 4
.text:100012A0
.text:100012A0						       loc_100012A0:			       ; CODE XREF: sub_10001270+25j
.text:100012A0 8B C7							       mov     eax, edi
.text:100012A2 5F							       pop     edi
.text:100012A3 5E							       pop     esi
.text:100012A4 5B							       pop     ebx
.text:100012A5 C2 04 00							       retn    4
.text:100012A8						       ; ---------------------------------------------------------------------------
.text:100012A8
.text:100012A8						       loc_100012A8:			       ; CODE XREF: sub_10001270+Bj
.text:100012A8 8B CE							       mov     ecx, esi	       ; this
.text:100012AA E8 61 FF	FF FF						       call    ??1CPhotoInfo@@UAE@XZ ; CPhotoInfo::~CPhotoInfo(void)
.text:100012AF F6 C3 01							       test    bl, 1
.text:100012B2 74 09							       jz      short loc_100012BD
.text:100012B4 56							       push    esi	       ; void *
.text:100012B5 E8 D8 26	00 00						       call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:100012BA 83 C4 04							       add     esp, 4
.text:100012BD
.text:100012BD						       loc_100012BD:			       ; CODE XREF: sub_10001270+42j
.text:100012BD 8B C6							       mov     eax, esi
.text:100012BF 5E							       pop     esi
.text:100012C0 5B							       pop     ebx
.text:100012C1 C2 04 00							       retn    4
.text:100012C1						       sub_10001270    endp
.text:100012C1
.text:100012C1						       ; ---------------------------------------------------------------------------
.text:100012C4 90 90 90	90 90 90 90 90 90 90 90	90			       align 10h
.text:100012D0						       ; Exported entry	  1. ??0CListInfo@@QAE@XZ
.text:100012D0
.text:100012D0						       ; =============== S U B R O U T I N E =======================================
.text:100012D0
.text:100012D0
.text:100012D0						       ; int __thiscall	CListInfo::CListInfo(CListInfo *__hidden this)
.text:100012D0								       public ??0CListInfo@@QAE@XZ
.text:100012D0						       ??0CListInfo@@QAE@XZ proc near	       ; DATA XREF: .rdata:off_10005C68o
.text:100012D0
.text:100012D0						       var_10	       = dword ptr -10h
.text:100012D0						       var_C	       = dword ptr -0Ch
.text:100012D0						       var_4	       = dword ptr -4
.text:100012D0
.text:100012D0 6A FF							       push    0FFFFFFFFh
.text:100012D2 68 4F 3E	00 10						       push    offset ??0CListInfo@@QAE@XZ_SEH
.text:100012D7 64 A1 00	00 00 00					       mov     eax, large fs:0
.text:100012DD 50							       push    eax
.text:100012DE 64 89 25	00 00 00 00					       mov     large fs:0, esp
.text:100012E5 51							       push    ecx
.text:100012E6 56							       push    esi
.text:100012E7 8B F1							       mov     esi, ecx
.text:100012E9 57							       push    edi
.text:100012EA 89 74 24	08						       mov     [esp+18h+var_10], esi
.text:100012EE C7 06 7C	51 00 10					       mov     dword ptr [esi],	offset off_1000517C
.text:100012F4 8D 4E 04							       lea     ecx, [esi+4]
.text:100012F7 C7 44 24	14 00 00 00 00					       mov     [esp+18h+var_4],	0
.text:100012FF E8 A0 26	00 00						       call    ??0CImageList@@QAE@XZ ; CImageList::CImageList(void)
.text:10001304 8D 7E 0C							       lea     edi, [esi+0Ch]
.text:10001307 6A 0A							       push    0Ah	       ; int
.text:10001309 8B CF							       mov     ecx, edi	       ; this
.text:1000130B C6 44 24	18 01						       mov     byte ptr	[esp+1Ch+var_4], 1
.text:10001310 E8 89 26	00 00						       call    ??0CObList@@QAE@H@Z ; CObList::CObList(int)
.text:10001315 A1 00 50	00 10						       mov     eax, ds:??_7CSortableObList@@6B@	; const	CSortableObList::`vftable'
.text:1000131A 89 07							       mov     [edi], eax
.text:1000131C 8D 7E 28							       lea     edi, [esi+28h]
.text:1000131F 6A 0A							       push    0Ah	       ; int
.text:10001321 8B CF							       mov     ecx, edi	       ; this
.text:10001323 C6 44 24	18 02						       mov     byte ptr	[esp+1Ch+var_4], 2
.text:10001328 E8 71 26	00 00						       call    ??0CObList@@QAE@H@Z ; CObList::CObList(int)
.text:1000132D 8B 0D 00	50 00 10					       mov     ecx, ds:??_7CSortableObList@@6B@	; const	CSortableObList::`vftable'
.text:10001333 8B C6							       mov     eax, esi
.text:10001335 89 0F							       mov     [edi], ecx
.text:10001337 8B 4C 24	0C						       mov     ecx, [esp+18h+var_C]
.text:1000133B C7 06 A4	51 00 10					       mov     dword ptr [esi],	offset ??_7CListInfo@@6B@ ; const CListInfo::`vftable'
.text:10001341 5F							       pop     edi
.text:10001342 5E							       pop     esi
.text:10001343 64 89 0D	00 00 00 00					       mov     large fs:0, ecx
.text:1000134A 83 C4 10							       add     esp, 10h
.text:1000134D C3							       retn
.text:1000134D						       ??0CListInfo@@QAE@XZ endp
.text:1000134D
.text:1000134D						       ; ---------------------------------------------------------------------------
.text:1000134E 90 90							       align 10h
.text:10001350						       ; Exported entry	  4. ??1CListInfo@@UAE@XZ
.text:10001350
.text:10001350						       ; =============== S U B R O U T I N E =======================================
.text:10001350
.text:10001350
.text:10001350						       ; int __thiscall	CListInfo::~CListInfo(CListInfo	*__hidden this)
.text:10001350								       public ??1CListInfo@@UAE@XZ
.text:10001350						       ??1CListInfo@@UAE@XZ proc near	       ; CODE XREF: sub_100013C0+3Ap
.text:10001350											       ; DATA XREF: sub_100013C0+14o ...
.text:10001350
.text:10001350						       var_10	       = dword ptr -10h
.text:10001350						       var_C	       = dword ptr -0Ch
.text:10001350						       var_4	       = dword ptr -4
.text:10001350
.text:10001350 6A FF							       push    0FFFFFFFFh
.text:10001352 68 7F 3E	00 10						       push    offset ??1CListInfo@@UAE@XZ_SEH
.text:10001357 64 A1 00	00 00 00					       mov     eax, large fs:0
.text:1000135D 50							       push    eax
.text:1000135E 64 89 25	00 00 00 00					       mov     large fs:0, esp
.text:10001365 51							       push    ecx
.text:10001366 56							       push    esi
.text:10001367 8B F1							       mov     esi, ecx
.text:10001369 89 74 24	04						       mov     [esp+14h+var_10], esi
.text:1000136D C7 06 A4	51 00 10					       mov     dword ptr [esi],	offset ??_7CListInfo@@6B@ ; const CListInfo::`vftable'
.text:10001373 8D 4E 28							       lea     ecx, [esi+28h]  ; this
.text:10001376 C7 44 24	10 02 00 00 00					       mov     [esp+14h+var_4],	2
.text:1000137E E8 27 26	00 00						       call    ??1CObList@@UAE@XZ ; CObList::~CObList(void)
.text:10001383 8D 4E 0C							       lea     ecx, [esi+0Ch]  ; this
.text:10001386 C6 44 24	10 01						       mov     byte ptr	[esp+14h+var_4], 1
.text:1000138B E8 1A 26	00 00						       call    ??1CObList@@UAE@XZ ; CObList::~CObList(void)
.text:10001390 8D 4E 04							       lea     ecx, [esi+4]    ; this
.text:10001393 C6 44 24	10 00						       mov     byte ptr	[esp+14h+var_4], 0
.text:10001398 E8 FB 25	00 00						       call    ??1CImageList@@UAE@XZ ; CImageList::~CImageList(void)
.text:1000139D 8B 4C 24	08						       mov     ecx, [esp+14h+var_C]
.text:100013A1 C7 06 7C	51 00 10					       mov     dword ptr [esi],	offset off_1000517C
.text:100013A7 5E							       pop     esi
.text:100013A8 64 89 0D	00 00 00 00					       mov     large fs:0, ecx
.text:100013AF 83 C4 10							       add     esp, 10h
.text:100013B2 C3							       retn
.text:100013B2						       ??1CListInfo@@UAE@XZ endp
.text:100013B2
.text:100013B2						       ; ---------------------------------------------------------------------------
.text:100013B3 90 90 90	90 90 90 90 90 90 90 90	90 90			       align 10h
.text:100013C0
.text:100013C0						       ; =============== S U B R O U T I N E =======================================
.text:100013C0
.text:100013C0
.text:100013C0						       ; int __thiscall	sub_100013C0(CListInfo *this, char)
.text:100013C0						       sub_100013C0    proc near	       ; DATA XREF: .rdata:100051A8o
.text:100013C0
.text:100013C0						       arg_0	       = byte ptr  4
.text:100013C0
.text:100013C0 53							       push    ebx
.text:100013C1 8A 5C 24	08						       mov     bl, [esp+4+arg_0]
.text:100013C5 56							       push    esi
.text:100013C6 8B F1							       mov     esi, ecx
.text:100013C8 F6 C3 02							       test    bl, 2
.text:100013CB 74 2B							       jz      short loc_100013F8
.text:100013CD 8B 46 FC							       mov     eax, [esi-4]
.text:100013D0 57							       push    edi
.text:100013D1 8D 7E FC							       lea     edi, [esi-4]
.text:100013D4 68 50 13	00 10						       push    offset ??1CListInfo@@UAE@XZ ; CListInfo::~CListInfo(void)
.text:100013D9 50							       push    eax
.text:100013DA 6A 44							       push    44h
.text:100013DC 56							       push    esi
.text:100013DD E8 0E 27	00 00						       call    sub_10003AF0
.text:100013E2 F6 C3 01							       test    bl, 1
.text:100013E5 74 09							       jz      short loc_100013F0
.text:100013E7 57							       push    edi	       ; void *
.text:100013E8 E8 A5 25	00 00						       call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:100013ED 83 C4 04							       add     esp, 4
.text:100013F0
.text:100013F0						       loc_100013F0:			       ; CODE XREF: sub_100013C0+25j
.text:100013F0 8B C7							       mov     eax, edi
.text:100013F2 5F							       pop     edi
.text:100013F3 5E							       pop     esi
.text:100013F4 5B							       pop     ebx
.text:100013F5 C2 04 00							       retn    4
.text:100013F8						       ; ---------------------------------------------------------------------------
.text:100013F8
.text:100013F8						       loc_100013F8:			       ; CODE XREF: sub_100013C0+Bj
.text:100013F8 8B CE							       mov     ecx, esi	       ; this
.text:100013FA E8 51 FF	FF FF						       call    ??1CListInfo@@UAE@XZ ; CListInfo::~CListInfo(void)
.text:100013FF F6 C3 01							       test    bl, 1
.text:10001402 74 09							       jz      short loc_1000140D
.text:10001404 56							       push    esi	       ; void *
.text:10001405 E8 88 25	00 00						       call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:1000140A 83 C4 04							       add     esp, 4
.text:1000140D
.text:1000140D						       loc_1000140D:			       ; CODE XREF: sub_100013C0+42j
.text:1000140D 8B C6							       mov     eax, esi
.text:1000140F 5E							       pop     esi
.text:10001410 5B							       pop     ebx
.text:10001411 C2 04 00							       retn    4
.text:10001411						       sub_100013C0    endp
.text:10001411
.text:10001411						       ; ---------------------------------------------------------------------------
.text:10001414 90 90 90	90 90 90 90 90 90 90 90	90			       align 10h
.text:10001420
.text:10001420						       ; =============== S U B R O U T I N E =======================================
.text:10001420
.text:10001420
.text:10001420						       sub_10001420    proc near	       ; CODE XREF: DllEntryPoint+8Ep
.text:10001420											       ; .rsrc:10007756p
.text:10001420											       ; DATA XREF: ...
.text:10001420
.text:10001420						       arg_4	       = dword ptr  8
.text:10001420
.text:10001420 83 7C 24	08 01						       cmp     [esp+arg_4], 1
.text:10001425 75 19							       jnz     short loc_10001440
.text:10001427 E8 84 25	00 00						       call    ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ ; AfxGetModuleState(void)
.text:1000142C 8B 48 20							       mov     ecx, [eax+20h]
.text:1000142F 8B 50 2C							       mov     edx, [eax+2Ch]
.text:10001432 89 48 1C							       mov     [eax+1Ch], ecx
.text:10001435 33 C9							       xor     ecx, ecx
.text:10001437 89 50 28							       mov     [eax+28h], edx
.text:1000143A 89 48 20							       mov     [eax+20h], ecx
.text:1000143D 89 48 2C							       mov     [eax+2Ch], ecx
.text:10001440
.text:10001440						       loc_10001440:			       ; CODE XREF: sub_10001420+5j
.text:10001440 B8 01 00	00 00						       mov     eax, 1
.text:10001445 C2 0C 00							       retn    0Ch
.text:10001445						       sub_10001420    endp
.text:10001445
.text:10001445						       ; ---------------------------------------------------------------------------
.text:10001448 90 90 90	90 90 90 90 90					       align 10h
.text:10001450 8B 44 24	08						       mov     eax, [esp+8]
.text:10001454 83 F8 01							       cmp     eax, 1
.text:10001457 75 3A							       jnz     short loc_10001493
.text:10001459 8B 44 24	04						       mov     eax, [esp+4]
.text:1000145D 50							       push    eax
.text:1000145E 68 F0 60	00 10						       push    offset unk_100060F0
.text:10001463 E8 60 25	00 00						       call    ?AfxInitExtensionModule@@YGHAAUAFX_EXTENSION_MODULE@@PAUHINSTANCE__@@@Z ; AfxInitExtensionModule(AFX_EXTENSION_MODULE &,HINSTANCE__ *)
.text:10001468 85 C0							       test    eax, eax
.text:1000146A 75 03							       jnz     short loc_1000146F
.text:1000146C C2 0C 00							       retn    0Ch
.text:1000146F						       ; ---------------------------------------------------------------------------
.text:1000146F
.text:1000146F						       loc_1000146F:			       ; CODE XREF: .text:1000146Aj
.text:1000146F 6A 40							       push    40h
.text:10001471 E8 4C 25	00 00						       call    ??2@YAPAXI@Z    ; operator new(uint)
.text:10001476 83 C4 04							       add     esp, 4
.text:10001479 85 C0							       test    eax, eax
.text:1000147B 74 25							       jz      short loc_100014A2
.text:1000147D 6A 00							       push    0
.text:1000147F 68 F0 60	00 10						       push    offset unk_100060F0
.text:10001484 8B C8							       mov     ecx, eax
.text:10001486 E8 31 25	00 00						       call    ??0CDynLinkLibrary@@QAE@AAUAFX_EXTENSION_MODULE@@H@Z ; CDynLinkLibrary::CDynLinkLibrary(AFX_EXTENSION_MODULE &,int)
.text:1000148B B8 01 00	00 00						       mov     eax, 1
.text:10001490 C2 0C 00							       retn    0Ch
.text:10001493						       ; ---------------------------------------------------------------------------
.text:10001493
.text:10001493						       loc_10001493:			       ; CODE XREF: .text:10001457j
.text:10001493 85 C0							       test    eax, eax
.text:10001495 75 0B							       jnz     short loc_100014A2
.text:10001497 50							       push    eax
.text:10001498 68 F0 60	00 10						       push    offset unk_100060F0
.text:1000149D E8 14 25	00 00						       call    ?AfxTermExtensionModule@@YGXAAUAFX_EXTENSION_MODULE@@H@Z	; AfxTermExtensionModule(AFX_EXTENSION_MODULE &,int)
.text:100014A2
.text:100014A2						       loc_100014A2:			       ; CODE XREF: .text:1000147Bj
.text:100014A2											       ; .text:10001495j
.text:100014A2 B8 01 00	00 00						       mov     eax, 1
.text:100014A7 C2 0C 00							       retn    0Ch
.text:100014A7						       ; ---------------------------------------------------------------------------
.text:100014AA 90 90 90	90 90 90					       align 10h
.text:100014B0						       ; Exported entry	 18. ?GSCRSearchGPSInfo@@YA?AVCString@@XZ
.text:100014B0
.text:100014B0						       ; =============== S U B R O U T I N E =======================================
.text:100014B0
.text:100014B0
.text:100014B0						       ; class CString __cdecl GSCRSearchGPSInfo(void)
.text:100014B0								       public ?GSCRSearchGPSInfo@@YA?AVCString@@XZ
.text:100014B0						       ?GSCRSearchGPSInfo@@YA?AVCString@@XZ proc near
.text:100014B0											       ; DATA XREF: .rdata:off_10005C68o
.text:100014B0
.text:100014B0						       var_24	       = dword ptr -24h
.text:100014B0						       var_20	       = dword ptr -20h
.text:100014B0						       var_1C	       = byte ptr -1Ch
.text:100014B0						       var_C	       = dword ptr -0Ch
.text:100014B0						       var_4	       = dword ptr -4
.text:100014B0						       arg_0	       = dword ptr  4
.text:100014B0
.text:100014B0 6A FF							       push    0FFFFFFFFh
.text:100014B2 68 B7 3E	00 10						       push    offset ?GSCRSearchGPSInfo@@YA?AVCString@@XZ_SEH
.text:100014B7 64 A1 00	00 00 00					       mov     eax, large fs:0
.text:100014BD 50							       push    eax
.text:100014BE 64 89 25	00 00 00 00					       mov     large fs:0, esp
.text:100014C5 83 EC 18							       sub     esp, 18h
.text:100014C8 53							       push    ebx
.text:100014C9 56							       push    esi
.text:100014CA 68 04 61	00 10						       push    offset unk_10006104
.text:100014CF 68 1C 60	00 10						       push    offset aLocationlog ; "LocationLog"
.text:100014D4 8D 44 24	10						       lea     eax, [esp+34h+var_24]
.text:100014D8 68 14 60	00 10						       push    offset aCommon  ; "Common"
.text:100014DD 50							       push    eax
.text:100014DE C7 44 24	1C 00 00 00 00					       mov     [esp+3Ch+var_20], 0
.text:100014E6 FF 15 04	50 00 10					       call    ds:?CMGetProfileString@@YA?AVCString@@PBD00@Z ; CMGetProfileString(char const *,char const *,char const *)
.text:100014EC 83 C4 10							       add     esp, 10h
.text:100014EF 8B 4C 24	08						       mov     ecx, [esp+2Ch+var_24]
.text:100014F3 BB 01 00	00 00						       mov     ebx, 1
.text:100014F8 89 5C 24	28						       mov     [esp+2Ch+var_4],	ebx
.text:100014FC 8B 41 F8							       mov     eax, [ecx-8]
.text:100014FF 85 C0							       test    eax, eax
.text:10001501 75 16							       jnz     short loc_10001519
.text:10001503 8B 74 24	30						       mov     esi, [esp+2Ch+arg_0]
.text:10001507 8D 54 24	08						       lea     edx, [esp+2Ch+var_24]
.text:1000150B 52							       push    edx
.text:1000150C 8B CE							       mov     ecx, esi
.text:1000150E E8 D9 24	00 00						       call    ??0CString@@QAE@ABV0@@Z ; CString::CString(CString const	&)
.text:10001513 89 5C 24	0C						       mov     [esp+2Ch+var_20], ebx
.text:10001517 EB 60							       jmp     short loc_10001579
.text:10001519						       ; ---------------------------------------------------------------------------
.text:10001519
.text:10001519						       loc_10001519:			       ; CODE XREF: GSCRSearchGPSInfo(void)+51j
.text:10001519 8D 4C 24	10						       lea     ecx, [esp+2Ch+var_1C]
.text:1000151D E8 C4 24	00 00						       call    ??0CFile@@QAE@XZ	; CFile::CFile(void)
.text:10001522 8B 44 24	08						       mov     eax, [esp+2Ch+var_24]
.text:10001526 6A 00							       push    0	       ; struct	CFileException *
.text:10001528 6A 00							       push    0	       ; unsigned int
.text:1000152A 50							       push    eax	       ; char *
.text:1000152B 8D 4C 24	1C						       lea     ecx, [esp+38h+var_1C] ; this
.text:1000152F C6 44 24	34 02						       mov     byte ptr	[esp+38h+var_4], 2
.text:10001534 E8 A7 24	00 00						       call    ?Open@CFile@@UAEHPBDIPAVCFileException@@@Z ; CFile::Open(char const *,uint,CFileException *)
.text:10001539 85 C0							       test    eax, eax
.text:1000153B 75 12							       jnz     short loc_1000154F
.text:1000153D 8B 74 24	30						       mov     esi, [esp+2Ch+arg_0]
.text:10001541 68 04 61	00 10						       push    offset unk_10006104
.text:10001546 8B CE							       mov     ecx, esi
.text:10001548 E8 8D 24	00 00						       call    ??0CString@@QAE@PBD@Z ; CString::CString(char const *)
.text:1000154D EB 19							       jmp     short loc_10001568
.text:1000154F						       ; ---------------------------------------------------------------------------
.text:1000154F
.text:1000154F						       loc_1000154F:			       ; CODE XREF: GSCRSearchGPSInfo(void)+8Bj
.text:1000154F 8D 4C 24	10						       lea     ecx, [esp+2Ch+var_1C] ; this
.text:10001553 E8 7C 24	00 00						       call    ?Close@CFile@@UAEXXZ ; CFile::Close(void)
.text:10001558 8B 74 24	30						       mov     esi, [esp+2Ch+arg_0]
.text:1000155C 8D 4C 24	08						       lea     ecx, [esp+2Ch+var_24]
.text:10001560 51							       push    ecx
.text:10001561 8B CE							       mov     ecx, esi
.text:10001563 E8 84 24	00 00						       call    ??0CString@@QAE@ABV0@@Z ; CString::CString(CString const	&)
.text:10001568
.text:10001568						       loc_10001568:			       ; CODE XREF: GSCRSearchGPSInfo(void)+9Dj
.text:10001568 8D 4C 24	10						       lea     ecx, [esp+2Ch+var_1C] ; this
.text:1000156C 89 5C 24	0C						       mov     [esp+2Ch+var_20], ebx
.text:10001570 88 5C 24	28						       mov     byte ptr	[esp+2Ch+var_4], bl
.text:10001574 E8 55 24	00 00						       call    ??1CFile@@UAE@XZ	; CFile::~CFile(void)
.text:10001579
.text:10001579						       loc_10001579:			       ; CODE XREF: GSCRSearchGPSInfo(void)+67j
.text:10001579 8D 4C 24	08						       lea     ecx, [esp+2Ch+var_24] ; this
.text:1000157D C6 44 24	28 00						       mov     byte ptr	[esp+2Ch+var_4], 0
.text:10001582 E8 05 24	00 00						       call    ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10001587 8B 4C 24	20						       mov     ecx, [esp+2Ch+var_C]
.text:1000158B 8B C6							       mov     eax, esi
.text:1000158D 5E							       pop     esi
.text:1000158E 5B							       pop     ebx
.text:1000158F 64 89 0D	00 00 00 00					       mov     large fs:0, ecx
.text:10001596 83 C4 24							       add     esp, 24h
.text:10001599 C3							       retn
.text:10001599						       ?GSCRSearchGPSInfo@@YA?AVCString@@XZ endp
.text:10001599
.text:10001599						       ; ---------------------------------------------------------------------------
.text:1000159A 90 90 90	90 90 90					       align 10h
.text:100015A0
.text:100015A0						       ; =============== S U B R O U T I N E =======================================
.text:100015A0
.text:100015A0
.text:100015A0						       ; int __cdecl sub_100015A0(LPCSTR lpString, int Val, int, int, int)
.text:100015A0						       sub_100015A0    proc near	       ; CODE XREF: GSCRCreateLocationList(char	const *,CListInfo *)+171p
.text:100015A0											       ; GSCRCreateLocationList(char const *,CListInfo *)+189p	...
.text:100015A0
.text:100015A0						       lpString	       = dword ptr  4
.text:100015A0						       Val	       = dword ptr  8
.text:100015A0						       arg_8	       = dword ptr  0Ch
.text:100015A0						       arg_C	       = dword ptr  10h
.text:100015A0						       arg_10	       = dword ptr  14h
.text:100015A0
.text:100015A0 53							       push    ebx
.text:100015A1 55							       push    ebp
.text:100015A2 56							       push    esi
.text:100015A3 8B 74 24	10						       mov     esi, [esp+0Ch+lpString]
.text:100015A7 57							       push    edi
.text:100015A8 56							       push    esi	       ; lpString
.text:100015A9 FF 15 50	50 00 10					       call    ds:lstrlenA
.text:100015AF 40							       inc     eax
.text:100015B0 50							       push    eax	       ; unsigned int
.text:100015B1 E8 0C 24	00 00						       call    ??2@YAPAXI@Z    ; operator new(uint)
.text:100015B6 83 C4 04							       add     esp, 4
.text:100015B9 8B E8							       mov     ebp, eax
.text:100015BB 56							       push    esi	       ; lpString2
.text:100015BC 55							       push    ebp	       ; lpString1
.text:100015BD FF 15 4C	50 00 10					       call    ds:lstrcpyA
.text:100015C3 8B 44 24	18						       mov     eax, [esp+10h+Val]
.text:100015C7 50							       push    eax	       ; Val
.text:100015C8 55							       push    ebp	       ; Str
.text:100015C9 FF 15 58	51 00 10					       call    ds:strchr
.text:100015CF 8B F0							       mov     esi, eax
.text:100015D1 83 C4 08							       add     esp, 8
.text:100015D4 85 F6							       test    esi, esi
.text:100015D6 75 21							       jnz     short loc_100015F9
.text:100015D8 55							       push    ebp	       ; Str
.text:100015D9 FF 15 40	51 00 10					       call    ds:atoi
.text:100015DF 8B 4C 24	20						       mov     ecx, [esp+14h+arg_8]
.text:100015E3 8B 54 24	24						       mov     edx, [esp+14h+arg_C]
.text:100015E7 83 C4 04							       add     esp, 4
.text:100015EA 89 01							       mov     [ecx], eax
.text:100015EC 8B 44 24	24						       mov     eax, [esp+10h+arg_10]
.text:100015F0 89 32							       mov     [edx], esi
.text:100015F2 5F							       pop     edi
.text:100015F3 89 30							       mov     [eax], esi
.text:100015F5 5E							       pop     esi
.text:100015F6 5D							       pop     ebp
.text:100015F7 5B							       pop     ebx
.text:100015F8 C3							       retn
.text:100015F9						       ; ---------------------------------------------------------------------------
.text:100015F9
.text:100015F9						       loc_100015F9:			       ; CODE XREF: sub_100015A0+36j
.text:100015F9 8B 1D 40	51 00 10					       mov     ebx, ds:atoi
.text:100015FF 55							       push    ebp	       ; Str
.text:10001600 C6 06 00							       mov     byte ptr	[esi], 0
.text:10001603 FF D3							       call    ebx ; atoi
.text:10001605 8B 54 24	1C						       mov     edx, [esp+14h+Val]
.text:10001609 8B 4C 24	20						       mov     ecx, [esp+14h+arg_8]
.text:1000160D 8D 7E 01							       lea     edi, [esi+1]
.text:10001610 52							       push    edx	       ; Val
.text:10001611 57							       push    edi	       ; Str
.text:10001612 89 01							       mov     [ecx], eax
.text:10001614 FF 15 58	51 00 10					       call    ds:strchr
.text:1000161A 8B F0							       mov     esi, eax
.text:1000161C 83 C4 0C							       add     esp, 0Ch
.text:1000161F 85 F6							       test    esi, esi
.text:10001621 75 17							       jnz     short loc_1000163A
.text:10001623 57							       push    edi	       ; Str
.text:10001624 FF D3							       call    ebx ; atoi
.text:10001626 8B 4C 24	24						       mov     ecx, [esp+14h+arg_C]
.text:1000162A 8B 54 24	28						       mov     edx, [esp+14h+arg_10]
.text:1000162E 83 C4 04							       add     esp, 4
.text:10001631 89 01							       mov     [ecx], eax
.text:10001633 89 32							       mov     [edx], esi
.text:10001635 5F							       pop     edi
.text:10001636 5E							       pop     esi
.text:10001637 5D							       pop     ebp
.text:10001638 5B							       pop     ebx
.text:10001639 C3							       retn
.text:1000163A						       ; ---------------------------------------------------------------------------
.text:1000163A
.text:1000163A						       loc_1000163A:			       ; CODE XREF: sub_100015A0+81j
.text:1000163A 57							       push    edi	       ; Str
.text:1000163B C6 06 00							       mov     byte ptr	[esi], 0
.text:1000163E FF D3							       call    ebx ; atoi
.text:10001640 8B 54 24	1C						       mov     edx, [esp+14h+Val]
.text:10001644 8B 4C 24	24						       mov     ecx, [esp+14h+arg_C]
.text:10001648 46							       inc     esi
.text:10001649 52							       push    edx	       ; Val
.text:1000164A 56							       push    esi	       ; Str
.text:1000164B 89 01							       mov     [ecx], eax
.text:1000164D FF 15 58	51 00 10					       call    ds:strchr
.text:10001653 83 C4 0C							       add     esp, 0Ch
.text:10001656 85 C0							       test    eax, eax
.text:10001658 75 1A							       jnz     short loc_10001674
.text:1000165A 56							       push    esi	       ; Str
.text:1000165B FF D3							       call    ebx ; atoi
.text:1000165D 8B 4C 24	28						       mov     ecx, [esp+14h+arg_10]
.text:10001661 83 C4 04							       add     esp, 4
.text:10001664 55							       push    ebp	       ; void *
.text:10001665 89 01							       mov     [ecx], eax
.text:10001667 E8 26 23	00 00						       call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:1000166C 83 C4 04							       add     esp, 4
.text:1000166F 5F							       pop     edi
.text:10001670 5E							       pop     esi
.text:10001671 5D							       pop     ebp
.text:10001672 5B							       pop     ebx
.text:10001673 C3							       retn
.text:10001674						       ; ---------------------------------------------------------------------------
.text:10001674
.text:10001674						       loc_10001674:			       ; CODE XREF: sub_100015A0+B8j
.text:10001674 56							       push    esi	       ; Str
.text:10001675 C6 00 00							       mov     byte ptr	[eax], 0
.text:10001678 FF D3							       call    ebx ; atoi
.text:1000167A 8B 54 24	28						       mov     edx, [esp+14h+arg_10]
.text:1000167E 83 C4 04							       add     esp, 4
.text:10001681 55							       push    ebp	       ; void *
.text:10001682 89 02							       mov     [edx], eax
.text:10001684 E8 09 23	00 00						       call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:10001689 83 C4 04							       add     esp, 4
.text:1000168C 5F							       pop     edi
.text:1000168D 5E							       pop     esi
.text:1000168E 5D							       pop     ebp
.text:1000168F 5B							       pop     ebx
.text:10001690 C3							       retn
.text:10001690						       sub_100015A0    endp
.text:10001690
.text:10001690						       ; ---------------------------------------------------------------------------
.text:10001691 90 90 90	90 90 90 90 90 90 90 90	90 90 90 90		       align 10h
.text:100016A0						       ; Exported entry	 11. ?GSCRCreateLocationList@@YAJPBDPAVCListInfo@@@Z
.text:100016A0
.text:100016A0						       ; =============== S U B R O U T I N E =======================================
.text:100016A0
.text:100016A0
.text:100016A0						       ; __int32 __cdecl GSCRCreateLocationList(const char *Filename, struct CListInfo *)
.text:100016A0								       public ?GSCRCreateLocationList@@YAJPBDPAVCListInfo@@@Z
.text:100016A0						       ?GSCRCreateLocationList@@YAJPBDPAVCListInfo@@@Z proc near
.text:100016A0											       ; DATA XREF: .rdata:off_10005C68o
.text:100016A0
.text:100016A0						       var_C8	       = dword ptr -0C8h
.text:100016A0						       var_C4	       = dword ptr -0C4h
.text:100016A0						       var_C0	       = dword ptr -0C0h
.text:100016A0						       var_BC	       = dword ptr -0BCh
.text:100016A0						       var_B8	       = dword ptr -0B8h
.text:100016A0						       var_B4	       = dword ptr -0B4h
.text:100016A0						       var_B0	       = dword ptr -0B0h
.text:100016A0						       Str	       = dword ptr -0ACh
.text:100016A0						       lpString	       = dword ptr -0A8h
.text:100016A0						       var_A4	       = dword ptr -0A4h
.text:100016A0						       String	       = dword ptr -0A0h
.text:100016A0						       var_9C	       = dword ptr -9Ch
.text:100016A0						       var_98	       = dword ptr -98h
.text:100016A0						       var_94	       = dword ptr -94h
.text:100016A0						       var_90	       = byte ptr -90h
.text:100016A0						       Buf	       = byte ptr -8Ch
.text:100016A0						       var_C	       = dword ptr -0Ch
.text:100016A0						       var_4	       = dword ptr -4
.text:100016A0						       Filename	       = dword ptr  4
.text:100016A0						       arg_4	       = dword ptr  8
.text:100016A0
.text:100016A0 6A FF							       push    0FFFFFFFFh
.text:100016A2 68 FE 3E	00 10						       push    offset ?GSCRCreateLocationList@@YAJPBDPAVCListInfo@@@Z_SEH
.text:100016A7 64 A1 00	00 00 00					       mov     eax, large fs:0
.text:100016AD 50							       push    eax
.text:100016AE 64 89 25	00 00 00 00					       mov     large fs:0, esp
.text:100016B5 81 EC BC	00 00 00					       sub     esp, 0BCh
.text:100016BB 56							       push    esi
.text:100016BC 68 8C 39	00 10						       push    offset ??1CString@@QAE@XZ ; CString::~CString(void)
.text:100016C1 68 86 39	00 10						       push    offset ??0CString@@QAE@XZ ; CString::CString(void)
.text:100016C6 6A 06							       push    6
.text:100016C8 8D 44 24	2C						       lea     eax, [esp+0D8h+Str]
.text:100016CC 6A 04							       push    4
.text:100016CE 50							       push    eax
.text:100016CF E8 8A 23	00 00						       call    sub_10003A5E
.text:100016D4 8B 8C 24	D0 00 00 00					       mov     ecx, [esp+0CCh+Filename]
.text:100016DB 68 28 60	00 10						       push    offset Mode     ; "rt"
.text:100016E0 51							       push    ecx	       ; Filename
.text:100016E1 C7 84 24	D0 00 00 00 00 00 00 00				       mov     [esp+0D4h+var_4], 0
.text:100016EC FF 15 48	51 00 10					       call    ds:fopen
.text:100016F2 8B F0							       mov     esi, eax
.text:100016F4 83 C4 08							       add     esp, 8
.text:100016F7 85 F6							       test    esi, esi
.text:100016F9 89 74 24	04						       mov     [esp+0CCh+var_C8], esi
.text:100016FD 0F 84 21	02 00 00					       jz      loc_10001924
.text:10001703 56							       push    esi	       ; File
.text:10001704 8D 54 24	44						       lea     edx, [esp+0D0h+Buf]
.text:10001708 68 80 00	00 00						       push    80h	       ; MaxCount
.text:1000170D 52							       push    edx	       ; Buf
.text:1000170E FF 15 4C	51 00 10					       call    ds:fgets
.text:10001714 83 C4 0C							       add     esp, 0Ch
.text:10001717 85 C0							       test    eax, eax
.text:10001719 0F 84 C5	01 00 00					       jz      loc_100018E4
.text:1000171F 53							       push    ebx
.text:10001720 55							       push    ebp
.text:10001721 57							       push    edi
.text:10001722
.text:10001722						       loc_10001722:			       ; CODE XREF: GSCRCreateLocationList(char	const *,CListInfo *)+23Bj
.text:10001722 80 7C 24	4C 23						       cmp     [esp+0D8h+Buf], 23h
.text:10001727 0F 84 98	01 00 00					       jz      loc_100018C5
.text:1000172D 8D 7C 24	4C						       lea     edi, [esp+0D8h+Buf]
.text:10001731 33 ED							       xor     ebp, ebp
.text:10001733 8D 5C 24	2C						       lea     ebx, [esp+0D8h+Str]
.text:10001737
.text:10001737						       loc_10001737:			       ; CODE XREF: GSCRCreateLocationList(char	const *,CListInfo *)+E6j
.text:10001737 6A 2C							       push    2Ch	       ; Val
.text:10001739 57							       push    edi	       ; Str
.text:1000173A FF 15 58	51 00 10					       call    ds:strchr
.text:10001740 8B F0							       mov     esi, eax
.text:10001742 83 C4 08							       add     esp, 8
.text:10001745 85 F6							       test    esi, esi
.text:10001747 75 24							       jnz     short loc_1000176D
.text:10001749 6A 0D							       push    0Dh	       ; Val
.text:1000174B 57							       push    edi	       ; Str
.text:1000174C FF 15 58	51 00 10					       call    ds:strchr
.text:10001752 8B F0							       mov     esi, eax
.text:10001754 83 C4 08							       add     esp, 8
.text:10001757 85 F6							       test    esi, esi
.text:10001759 75 12							       jnz     short loc_1000176D
.text:1000175B 6A 0A							       push    0Ah	       ; Val
.text:1000175D 57							       push    edi	       ; Str
.text:1000175E FF 15 58	51 00 10					       call    ds:strchr
.text:10001764 8B F0							       mov     esi, eax
.text:10001766 83 C4 08							       add     esp, 8
.text:10001769 85 F6							       test    esi, esi
.text:1000176B 74 03							       jz      short loc_10001770
.text:1000176D
.text:1000176D						       loc_1000176D:			       ; CODE XREF: GSCRCreateLocationList(char	const *,CListInfo *)+A7j
.text:1000176D											       ; GSCRCreateLocationList(char const *,CListInfo *)+B9j
.text:1000176D C6 06 00							       mov     byte ptr	[esi], 0
.text:10001770
.text:10001770						       loc_10001770:			       ; CODE XREF: GSCRCreateLocationList(char	const *,CListInfo *)+CBj
.text:10001770 57							       push    edi
.text:10001771 8B CB							       mov     ecx, ebx
.text:10001773 E8 86 22	00 00						       call    ??4CString@@QAEABV0@PBD@Z ; CString::operator=(char const *)
.text:10001778 85 F6							       test    esi, esi
.text:1000177A 74 0C							       jz      short loc_10001788
.text:1000177C 45							       inc     ebp
.text:1000177D 83 C3 04							       add     ebx, 4
.text:10001780 83 FD 06							       cmp     ebp, 6
.text:10001783 8D 7E 01							       lea     edi, [esi+1]
.text:10001786 7C AF							       jl      short loc_10001737
.text:10001788
.text:10001788						       loc_10001788:			       ; CODE XREF: GSCRCreateLocationList(char	const *,CListInfo *)+DAj
.text:10001788 83 FD 06							       cmp     ebp, 6
.text:1000178B 0F 85 30	01 00 00					       jnz     loc_100018C1
.text:10001791 6A 40							       push    40h	       ; unsigned int
.text:10001793 E8 2A 22	00 00						       call    ??2@YAPAXI@Z    ; operator new(uint)
.text:10001798 8B F0							       mov     esi, eax
.text:1000179A 83 C4 04							       add     esp, 4
.text:1000179D 89 74 24	44						       mov     [esp+0D8h+var_94], esi
.text:100017A1 33 DB							       xor     ebx, ebx
.text:100017A3 3B F3							       cmp     esi, ebx
.text:100017A5 74 3F							       jz      short loc_100017E6
.text:100017A7 C7 06 7C	51 00 10					       mov     dword ptr [esi],	offset off_1000517C
.text:100017AD 68 8C 39	00 10						       push    offset ??1CString@@QAE@XZ ; CString::~CString(void)
.text:100017B2 68 86 39	00 10						       push    offset ??0CString@@QAE@XZ ; CString::CString(void)
.text:100017B7 6A 04							       push    4
.text:100017B9 8D 46 2C							       lea     eax, [esi+2Ch]
.text:100017BC 6A 04							       push    4
.text:100017BE 50							       push    eax
.text:100017BF C6 84 24	E8 00 00 00 02					       mov     byte ptr	[esp+0ECh+var_4], 2
.text:100017C7 E8 92 22	00 00						       call    sub_10003A5E
.text:100017CC 8D 7E 08							       lea     edi, [esi+8]
.text:100017CF B9 09 00	00 00						       mov     ecx, 9
.text:100017D4 33 C0							       xor     eax, eax
.text:100017D6 C7 06 68	51 00 10					       mov     dword ptr [esi],	offset ??_7CLocationInfo@@6B@ ;	const CLocationInfo::`vftable'
.text:100017DC F3 AB							       rep stosd
.text:100017DE 89 5E 04							       mov     [esi+4],	ebx
.text:100017E1 89 5E 3C							       mov     [esi+3Ch], ebx
.text:100017E4 EB 02							       jmp     short loc_100017E8
.text:100017E6						       ; ---------------------------------------------------------------------------
.text:100017E6
.text:100017E6						       loc_100017E6:			       ; CODE XREF: GSCRCreateLocationList(char	const *,CListInfo *)+105j
.text:100017E6 33 F6							       xor     esi, esi
.text:100017E8
.text:100017E8						       loc_100017E8:			       ; CODE XREF: GSCRCreateLocationList(char	const *,CListInfo *)+144j
.text:100017E8 8B 4C 24	2C						       mov     ecx, [esp+0D8h+Str]
.text:100017EC C6 84 24	D4 00 00 00 00					       mov     byte ptr	[esp+0D8h+var_4], 0
.text:100017F4 51							       push    ecx	       ; Str
.text:100017F5 FF 15 40	51 00 10					       call    ds:atoi
.text:100017FB 89 46 04							       mov     [esi+4],	eax
.text:100017FE 8D 56 10							       lea     edx, [esi+10h]
.text:10001801 8D 46 0C							       lea     eax, [esi+0Ch]
.text:10001804 52							       push    edx	       ; int
.text:10001805 8B 54 24	38						       mov     edx, [esp+0E0h+lpString]
.text:10001809 8D 4E 08							       lea     ecx, [esi+8]
.text:1000180C 50							       push    eax	       ; int
.text:1000180D 51							       push    ecx	       ; int
.text:1000180E 6A 2F							       push    2Fh	       ; Val
.text:10001810 52							       push    edx	       ; lpString
.text:10001811 E8 8A FD	FF FF						       call    sub_100015A0
.text:10001816 8D 46 1C							       lea     eax, [esi+1Ch]
.text:10001819 8D 4E 18							       lea     ecx, [esi+18h]
.text:1000181C 50							       push    eax	       ; int
.text:1000181D 8B 44 24	50						       mov     eax, [esp+0F4h+var_A4]
.text:10001821 8D 56 14							       lea     edx, [esi+14h]
.text:10001824 51							       push    ecx	       ; int
.text:10001825 52							       push    edx	       ; int
.text:10001826 6A 2F							       push    2Fh	       ; Val
.text:10001828 50							       push    eax	       ; lpString
.text:10001829 E8 72 FD	FF FF						       call    sub_100015A0
.text:1000182E 8B 4C 24	64						       mov     ecx, [esp+104h+String]
.text:10001832 51							       push    ecx	       ; String
.text:10001833 FF 15 50	51 00 10					       call    ds:atof
.text:10001839 DC 0D B8	51 00 10					       fmul    ds:dbl_100051B8
.text:1000183F E8 A0 23	00 00						       call    _ftol
.text:10001844 89 46 20							       mov     [esi+20h], eax
.text:10001847 8D 54 24	58						       lea     edx, [esp+108h+var_B0]
.text:1000184B 8D 44 24	44						       lea     eax, [esp+108h+var_C4]
.text:1000184F 52							       push    edx	       ; int
.text:10001850 8B 54 24	70						       mov     edx, [esp+10Ch+var_9C]
.text:10001854 8D 4C 24	4C						       lea     ecx, [esp+10Ch+var_C0]
.text:10001858 50							       push    eax	       ; int
.text:10001859 51							       push    ecx	       ; int
.text:1000185A 6A 2F							       push    2Fh	       ; Val
.text:1000185C 52							       push    edx	       ; lpString
.text:1000185D E8 3E FD	FF FF						       call    sub_100015A0
.text:10001862 83 C4 44							       add     esp, 44h
.text:10001865 8D 44 24	20						       lea     eax, [esp+0D8h+var_B8]
.text:10001869 8D 4C 24	1C						       lea     ecx, [esp+0D8h+var_BC]
.text:1000186D 8D 54 24	24						       lea     edx, [esp+0D8h+var_B4]
.text:10001871 50							       push    eax	       ; int
.text:10001872 8B 44 24	44						       mov     eax, [esp+0DCh+var_98]
.text:10001876 51							       push    ecx	       ; int
.text:10001877 52							       push    edx	       ; int
.text:10001878 6A 3A							       push    3Ah	       ; Val
.text:1000187A 50							       push    eax	       ; lpString
.text:1000187B E8 20 FD	FF FF						       call    sub_100015A0
.text:10001880 8B 4C 24	34						       mov     ecx, [esp+0ECh+var_B8]
.text:10001884 8B 54 24	30						       mov     edx, [esp+0ECh+var_BC]
.text:10001888 8B 44 24	38						       mov     eax, [esp+0ECh+var_B4]
.text:1000188C 83 C4 14							       add     esp, 14h
.text:1000188F 6A FF							       push    0FFFFFFFFh      ; int
.text:10001891 51							       push    ecx	       ; int
.text:10001892 8B 4C 24	30						       mov     ecx, [esp+0E0h+var_B0]
.text:10001896 52							       push    edx	       ; int
.text:10001897 8B 54 24	20						       mov     edx, [esp+0E4h+var_C4]
.text:1000189B 50							       push    eax	       ; int
.text:1000189C 8B 44 24	28						       mov     eax, [esp+0E8h+var_C0]
.text:100018A0 51							       push    ecx	       ; int
.text:100018A1 52							       push    edx	       ; int
.text:100018A2 50							       push    eax	       ; int
.text:100018A3 8D 4C 24	64						       lea     ecx, [esp+0F4h+var_90] ;	this
.text:100018A7 E8 4C 21	00 00						       call    ??0CTime@@QAE@HHHHHHH@Z ; CTime::CTime(int,int,int,int,int,int,int)
.text:100018AC 8B 08							       mov     ecx, [eax]
.text:100018AE 8B 94 24	E0 00 00 00					       mov     edx, [esp+0D8h+arg_4]
.text:100018B5 89 4E 3C							       mov     [esi+3Ch], ecx
.text:100018B8 56							       push    esi	       ; struct	CObject	*
.text:100018B9 8D 4A 28							       lea     ecx, [edx+28h]  ; this
.text:100018BC E8 31 21	00 00						       call    ?AddTail@CObList@@QAEPAU__POSITION@@PAVCObject@@@Z ; CObList::AddTail(CObject *)
.text:100018C1
.text:100018C1						       loc_100018C1:			       ; CODE XREF: GSCRCreateLocationList(char	const *,CListInfo *)+EBj
.text:100018C1 8B 74 24	10						       mov     esi, [esp+0D8h+var_C8]
.text:100018C5
.text:100018C5						       loc_100018C5:			       ; CODE XREF: GSCRCreateLocationList(char	const *,CListInfo *)+87j
.text:100018C5 56							       push    esi	       ; File
.text:100018C6 8D 44 24	50						       lea     eax, [esp+0DCh+Buf]
.text:100018CA 68 80 00	00 00						       push    80h	       ; MaxCount
.text:100018CF 50							       push    eax	       ; Buf
.text:100018D0 FF 15 4C	51 00 10					       call    ds:fgets
.text:100018D6 83 C4 0C							       add     esp, 0Ch
.text:100018D9 85 C0							       test    eax, eax
.text:100018DB 0F 85 41	FE FF FF					       jnz     loc_10001722
.text:100018E1 5F							       pop     edi
.text:100018E2 5D							       pop     ebp
.text:100018E3 5B							       pop     ebx
.text:100018E4
.text:100018E4						       loc_100018E4:			       ; CODE XREF: GSCRCreateLocationList(char	const *,CListInfo *)+79j
.text:100018E4 56							       push    esi	       ; File
.text:100018E5 FF 15 54	51 00 10					       call    ds:fclose
.text:100018EB 83 C4 04							       add     esp, 4
.text:100018EE 8D 4C 24	20						       lea     ecx, [esp+0CCh+Str]
.text:100018F2 C7 84 24	C8 00 00 00 FF FF FF FF				       mov     [esp+0CCh+var_4], 0FFFFFFFFh
.text:100018FD 68 8C 39	00 10						       push    offset ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10001902 6A 06							       push    6
.text:10001904 6A 04							       push    4
.text:10001906 51							       push    ecx
.text:10001907 E8 E4 21	00 00						       call    sub_10003AF0
.text:1000190C 33 C0							       xor     eax, eax
.text:1000190E 5E							       pop     esi
.text:1000190F 8B 8C 24	BC 00 00 00					       mov     ecx, [esp+0C8h+var_C]
.text:10001916 64 89 0D	00 00 00 00					       mov     large fs:0, ecx
.text:1000191D 81 C4 C8	00 00 00					       add     esp, 0C8h
.text:10001923 C3							       retn
.text:10001924						       ; ---------------------------------------------------------------------------
.text:10001924
.text:10001924						       loc_10001924:			       ; CODE XREF: GSCRCreateLocationList(char	const *,CListInfo *)+5Dj
.text:10001924 68 8C 39	00 10						       push    offset ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10001929 6A 06							       push    6
.text:1000192B 8D 54 24	28						       lea     edx, [esp+0D4h+Str]
.text:1000192F 6A 04							       push    4
.text:10001931 52							       push    edx
.text:10001932 C7 84 24	D8 00 00 00 FF FF FF FF				       mov     [esp+0DCh+var_4], 0FFFFFFFFh
.text:1000193D E8 AE 21	00 00						       call    sub_10003AF0
.text:10001942 8B 8C 24	C0 00 00 00					       mov     ecx, [esp+0CCh+var_C]
.text:10001949 B8 05 00	00 81						       mov     eax, 81000005h
.text:1000194E 5E							       pop     esi
.text:1000194F 64 89 0D	00 00 00 00					       mov     large fs:0, ecx
.text:10001956 81 C4 C8	00 00 00					       add     esp, 0C8h
.text:1000195C C3							       retn
.text:1000195C						       ?GSCRCreateLocationList@@YAJPBDPAVCListInfo@@@Z endp
.text:1000195C
.text:1000195C						       ; ---------------------------------------------------------------------------
.text:1000195D 90 90 90							       align 10h
.text:10001960
.text:10001960						       ; =============== S U B R O U T I N E =======================================
.text:10001960
.text:10001960
.text:10001960						       ; int __stdcall sub_10001960(void *)
.text:10001960						       sub_10001960    proc near	       ; CODE XREF: sub_10003EE6+7p
.text:10001960											       ; sub_10004030+4p ...
.text:10001960
.text:10001960						       arg_0	       = dword ptr  4
.text:10001960
.text:10001960 8B 44 24	04						       mov     eax, [esp+arg_0]
.text:10001964 50							       push    eax	       ; void *
.text:10001965 E8 28 20	00 00						       call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:1000196A 59							       pop     ecx
.text:1000196B C2 04 00							       retn    4
.text:1000196B						       sub_10001960    endp
.text:1000196B
.text:1000196B						       ; ---------------------------------------------------------------------------
.text:1000196E 90 90							       align 10h
.text:10001970						       ; Exported entry	 13. ?GSCRDeleteListInfo@@YAJPAVCListInfo@@@Z
.text:10001970
.text:10001970						       ; =============== S U B R O U T I N E =======================================
.text:10001970
.text:10001970
.text:10001970						       ; __int32 __cdecl GSCRDeleteListInfo(struct CListInfo *)
.text:10001970								       public ?GSCRDeleteListInfo@@YAJPAVCListInfo@@@Z
.text:10001970						       ?GSCRDeleteListInfo@@YAJPAVCListInfo@@@Z	proc near
.text:10001970											       ; DATA XREF: .rdata:off_10005C68o
.text:10001970
.text:10001970						       arg_0	       = dword ptr  4
.text:10001970
.text:10001970 56							       push    esi
.text:10001971 57							       push    edi
.text:10001972 8B 7C 24	0C						       mov     edi, [esp+8+arg_0]
.text:10001976 8B 77 2C							       mov     esi, [edi+2Ch]
.text:10001979 85 F6							       test    esi, esi
.text:1000197B 74 16							       jz      short loc_10001993
.text:1000197D
.text:1000197D						       loc_1000197D:			       ; CODE XREF: GSCRDeleteListInfo(CListInfo *)+21j
.text:1000197D 8B C6							       mov     eax, esi
.text:1000197F 8B 36							       mov     esi, [esi]
.text:10001981 8B 48 08							       mov     ecx, [eax+8]
.text:10001984 85 C9							       test    ecx, ecx
.text:10001986 74 07							       jz      short loc_1000198F
.text:10001988 8B 01							       mov     eax, [ecx]
.text:1000198A 6A 01							       push    1
.text:1000198C FF 50 04							       call    dword ptr [eax+4]
.text:1000198F
.text:1000198F						       loc_1000198F:			       ; CODE XREF: GSCRDeleteListInfo(CListInfo *)+16j
.text:1000198F 85 F6							       test    esi, esi
.text:10001991 75 EA							       jnz     short loc_1000197D
.text:10001993
.text:10001993						       loc_10001993:			       ; CODE XREF: GSCRDeleteListInfo(CListInfo *)+Bj
.text:10001993 8B 77 10							       mov     esi, [edi+10h]
.text:10001996 85 F6							       test    esi, esi
.text:10001998 74 16							       jz      short loc_100019B0
.text:1000199A
.text:1000199A						       loc_1000199A:			       ; CODE XREF: GSCRDeleteListInfo(CListInfo *)+3Ej
.text:1000199A 8B C6							       mov     eax, esi
.text:1000199C 8B 36							       mov     esi, [esi]
.text:1000199E 8B 48 08							       mov     ecx, [eax+8]
.text:100019A1 85 C9							       test    ecx, ecx
.text:100019A3 74 07							       jz      short loc_100019AC
.text:100019A5 8B 11							       mov     edx, [ecx]
.text:100019A7 6A 01							       push    1
.text:100019A9 FF 52 04							       call    dword ptr [edx+4]
.text:100019AC
.text:100019AC						       loc_100019AC:			       ; CODE XREF: GSCRDeleteListInfo(CListInfo *)+33j
.text:100019AC 85 F6							       test    esi, esi
.text:100019AE 75 EA							       jnz     short loc_1000199A
.text:100019B0
.text:100019B0						       loc_100019B0:			       ; CODE XREF: GSCRDeleteListInfo(CListInfo *)+28j
.text:100019B0 5F							       pop     edi
.text:100019B1 33 C0							       xor     eax, eax
.text:100019B3 5E							       pop     esi
.text:100019B4 C3							       retn
.text:100019B4						       ?GSCRDeleteListInfo@@YAJPAVCListInfo@@@Z	endp
.text:100019B4
.text:100019B4						       ; ---------------------------------------------------------------------------
.text:100019B5 90 90 90	90 90 90 90 90 90 90 90				       align 10h
.text:100019C0						       ; Exported entry	 10. ?GSCRAddLocationNameFromZipcode@@YAJPAVCListInfo@@@Z
.text:100019C0
.text:100019C0						       ; =============== S U B R O U T I N E =======================================
.text:100019C0
.text:100019C0
.text:100019C0						       ; __int32 __cdecl GSCRAddLocationNameFromZipcode(struct CListInfo *)
.text:100019C0								       public ?GSCRAddLocationNameFromZipcode@@YAJPAVCListInfo@@@Z
.text:100019C0						       ?GSCRAddLocationNameFromZipcode@@YAJPAVCListInfo@@@Z proc near
.text:100019C0											       ; DATA XREF: .rdata:off_10005C68o
.text:100019C0
.text:100019C0						       var_318	       = byte ptr -318h
.text:100019C0						       var_314	       = byte ptr -314h
.text:100019C0						       var_310	       = byte ptr -310h
.text:100019C0						       var_30C	       = byte ptr -30Ch
.text:100019C0						       var_20C	       = byte ptr -20Ch
.text:100019C0						       var_10C	       = byte ptr -10Ch
.text:100019C0						       var_C	       = dword ptr -0Ch
.text:100019C0						       var_4	       = dword ptr -4
.text:100019C0						       arg_0	       = dword ptr  4
.text:100019C0
.text:100019C0 6A FF							       push    0FFFFFFFFh
.text:100019C2 68 26 3F	00 10						       push    offset ?GSCRAddLocationNameFromZipcode@@YAJPAVCListInfo@@@Z_SEH
.text:100019C7 64 A1 00	00 00 00					       mov     eax, large fs:0
.text:100019CD 50							       push    eax
.text:100019CE 64 89 25	00 00 00 00					       mov     large fs:0, esp
.text:100019D5 81 EC 0C	03 00 00					       sub     esp, 30Ch
.text:100019DB 53							       push    ebx
.text:100019DC 8D 44 24	08						       lea     eax, [esp+31Ch+var_314]
.text:100019E0 55							       push    ebp
.text:100019E1 50							       push    eax
.text:100019E2 FF 15 08	50 00 10					       call    ds:?CMTLGetExeDir@@YA?AVCString@@XZ ; CMTLGetExeDir(void)
.text:100019E8 83 C4 04							       add     esp, 4
.text:100019EB 68 2C 60	00 10						       push    offset aDatabaseZip_pd ;	"\\DataBase\\zip.pdb"
.text:100019F0 8D 4C 24	14						       lea     ecx, [esp+324h+var_310]
.text:100019F4 50							       push    eax
.text:100019F5 51							       push    ecx
.text:100019F6 C7 84 24	28 03 00 00 00 00 00 00				       mov     [esp+32Ch+var_4], 0
.text:10001A01 E8 FE 1F	00 00						       call    ??H@YG?AVCString@@ABV0@PBD@Z ; operator+(CString	const &,char const *)
.text:10001A06 8B 00							       mov     eax, [eax]
.text:10001A08 50							       push    eax
.text:10001A09 FF 15 1C	50 00 10					       call    ds:CmInitZip2Address
.text:10001A0F 83 C4 04							       add     esp, 4
.text:10001A12 8D 4C 24	10						       lea     ecx, [esp+320h+var_310] ; this
.text:10001A16 8B D8							       mov     ebx, eax
.text:10001A18 E8 6F 1F	00 00						       call    ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10001A1D 83 CD FF							       or      ebp, 0FFFFFFFFh
.text:10001A20 8D 4C 24	0C						       lea     ecx, [esp+320h+var_314] ; this
.text:10001A24 89 AC 24	1C 03 00 00					       mov     [esp+320h+var_4], ebp
.text:10001A2B E8 5C 1F	00 00						       call    ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10001A30 85 DB							       test    ebx, ebx
.text:10001A32 75 1C							       jnz     short loc_10001A50
.text:10001A34 5D							       pop     ebp
.text:10001A35 B8 06 00	00 81						       mov     eax, 81000006h
.text:10001A3A 5B							       pop     ebx
.text:10001A3B 8B 8C 24	0C 03 00 00					       mov     ecx, [esp+318h+var_C]
.text:10001A42 64 89 0D	00 00 00 00					       mov     large fs:0, ecx
.text:10001A49 81 C4 18	03 00 00					       add     esp, 318h
.text:10001A4F C3							       retn
.text:10001A50						       ; ---------------------------------------------------------------------------
.text:10001A50
.text:10001A50						       loc_10001A50:			       ; CODE XREF: GSCRAddLocationNameFromZipcode(CListInfo *)+72j
.text:10001A50 57							       push    edi
.text:10001A51 B9 40 00	00 00						       mov     ecx, 40h
.text:10001A56 33 C0							       xor     eax, eax
.text:10001A58 8D 7C 24	18						       lea     edi, [esp+324h+var_30C]
.text:10001A5C F3 AB							       rep stosd
.text:10001A5E 8B 94 24	28 03 00 00					       mov     edx, [esp+324h+arg_0]
.text:10001A65 B9 40 00	00 00						       mov     ecx, 40h
.text:10001A6A 8D BC 24	18 01 00 00					       lea     edi, [esp+324h+var_20C]
.text:10001A71 F3 AB							       rep stosd
.text:10001A73 B9 40 00	00 00						       mov     ecx, 40h
.text:10001A78 8D BC 24	18 02 00 00					       lea     edi, [esp+324h+var_10C]
.text:10001A7F F3 AB							       rep stosd
.text:10001A81 8B 7A 2C							       mov     edi, [edx+2Ch]
.text:10001A84 8D 4C 24	0C						       lea     ecx, [esp+324h+var_318] ; this
.text:10001A88 E8 F9 1E	00 00						       call    ??0CString@@QAE@XZ ; CString::CString(void)
.text:10001A8D 85 FF							       test    edi, edi
.text:10001A8F C7 84 24	20 03 00 00 01 00 00 00				       mov     [esp+324h+var_4], 1
.text:10001A9A 0F 84 DA	00 00 00					       jz      loc_10001B7A
.text:10001AA0 56							       push    esi
.text:10001AA1
.text:10001AA1						       loc_10001AA1:			       ; CODE XREF: GSCRAddLocationNameFromZipcode(CListInfo *)+1B3j
.text:10001AA1 8B C7							       mov     eax, edi
.text:10001AA3 8B 3F							       mov     edi, [edi]
.text:10001AA5 8B 70 08							       mov     esi, [eax+8]
.text:10001AA8 8B 46 04							       mov     eax, [esi+4]
.text:10001AAB 85 C0							       test    eax, eax
.text:10001AAD 75 2C							       jnz     short loc_10001ADB
.text:10001AAF 68 04 61	00 10						       push    offset unk_10006104
.text:10001AB4 8D 4E 2C							       lea     ecx, [esi+2Ch]
.text:10001AB7 E8 42 1F	00 00						       call    ??4CString@@QAEABV0@PBD@Z ; CString::operator=(char const *)
.text:10001ABC 68 04 61	00 10						       push    offset unk_10006104
.text:10001AC1 8D 4E 30							       lea     ecx, [esi+30h]
.text:10001AC4 E8 35 1F	00 00						       call    ??4CString@@QAEABV0@PBD@Z ; CString::operator=(char const *)
.text:10001AC9 68 04 61	00 10						       push    offset unk_10006104
.text:10001ACE 8D 4E 34							       lea     ecx, [esi+34h]
.text:10001AD1 E8 28 1F	00 00						       call    ??4CString@@QAEABV0@PBD@Z ; CString::operator=(char const *)
.text:10001AD6 E9 96 00	00 00						       jmp     loc_10001B71
.text:10001ADB						       ; ---------------------------------------------------------------------------
.text:10001ADB
.text:10001ADB						       loc_10001ADB:			       ; CODE XREF: GSCRAddLocationNameFromZipcode(CListInfo *)+EDj
.text:10001ADB 3B E8							       cmp     ebp, eax
.text:10001ADD 75 2F							       jnz     short loc_10001B0E
.text:10001ADF 8D 44 24	1C						       lea     eax, [esp+328h+var_30C]
.text:10001AE3 8D 4E 2C							       lea     ecx, [esi+2Ch]
.text:10001AE6 50							       push    eax
.text:10001AE7 E8 12 1F	00 00						       call    ??4CString@@QAEABV0@PBD@Z ; CString::operator=(char const *)
.text:10001AEC 8D 8C 24	1C 01 00 00					       lea     ecx, [esp+328h+var_20C]
.text:10001AF3 51							       push    ecx
.text:10001AF4 8D 4E 30							       lea     ecx, [esi+30h]
.text:10001AF7 E8 02 1F	00 00						       call    ??4CString@@QAEABV0@PBD@Z ; CString::operator=(char const *)
.text:10001AFC 8D 94 24	1C 02 00 00					       lea     edx, [esp+328h+var_10C]
.text:10001B03 8D 4E 34							       lea     ecx, [esi+34h]
.text:10001B06 52							       push    edx
.text:10001B07 E8 F2 1E	00 00						       call    ??4CString@@QAEABV0@PBD@Z ; CString::operator=(char const *)
.text:10001B0C EB 63							       jmp     short loc_10001B71
.text:10001B0E						       ; ---------------------------------------------------------------------------
.text:10001B0E
.text:10001B0E						       loc_10001B0E:			       ; CODE XREF: GSCRAddLocationNameFromZipcode(CListInfo *)+11Dj
.text:10001B0E 8D 8C 24	1C 02 00 00					       lea     ecx, [esp+328h+var_10C]
.text:10001B15 68 00 01	00 00						       push    100h
.text:10001B1A 51							       push    ecx
.text:10001B1B 8D 94 24	24 01 00 00					       lea     edx, [esp+330h+var_20C]
.text:10001B22 68 00 01	00 00						       push    100h
.text:10001B27 52							       push    edx
.text:10001B28 8D 4C 24	2C						       lea     ecx, [esp+338h+var_30C]
.text:10001B2C 68 00 01	00 00						       push    100h
.text:10001B31 51							       push    ecx
.text:10001B32 50							       push    eax
.text:10001B33 53							       push    ebx
.text:10001B34 FF 15 18	50 00 10					       call    ds:CmConvZip2Address
.text:10001B3A 83 C4 20							       add     esp, 20h
.text:10001B3D 85 C0							       test    eax, eax
.text:10001B3F 7C 30							       jl      short loc_10001B71
.text:10001B41 8D 54 24	1C						       lea     edx, [esp+328h+var_30C]
.text:10001B45 8D 4E 2C							       lea     ecx, [esi+2Ch]
.text:10001B48 52							       push    edx
.text:10001B49 E8 B0 1E	00 00						       call    ??4CString@@QAEABV0@PBD@Z ; CString::operator=(char const *)
.text:10001B4E 8D 84 24	1C 01 00 00					       lea     eax, [esp+328h+var_20C]
.text:10001B55 8D 4E 30							       lea     ecx, [esi+30h]
.text:10001B58 50							       push    eax
.text:10001B59 E8 A0 1E	00 00						       call    ??4CString@@QAEABV0@PBD@Z ; CString::operator=(char const *)
.text:10001B5E 8D 8C 24	1C 02 00 00					       lea     ecx, [esp+328h+var_10C]
.text:10001B65 51							       push    ecx
.text:10001B66 8D 4E 34							       lea     ecx, [esi+34h]
.text:10001B69 E8 90 1E	00 00						       call    ??4CString@@QAEABV0@PBD@Z ; CString::operator=(char const *)
.text:10001B6E 8B 6E 04							       mov     ebp, [esi+4]
.text:10001B71
.text:10001B71						       loc_10001B71:			       ; CODE XREF: GSCRAddLocationNameFromZipcode(CListInfo *)+116j
.text:10001B71											       ; GSCRAddLocationNameFromZipcode(CListInfo *)+14Cj ...
.text:10001B71 85 FF							       test    edi, edi
.text:10001B73 0F 85 28	FF FF FF					       jnz     loc_10001AA1
.text:10001B79 5E							       pop     esi
.text:10001B7A
.text:10001B7A						       loc_10001B7A:			       ; CODE XREF: GSCRAddLocationNameFromZipcode(CListInfo *)+DAj
.text:10001B7A 53							       push    ebx
.text:10001B7B FF 15 14	50 00 10					       call    ds:CmExitZip2Address
.text:10001B81 83 C4 04							       add     esp, 4
.text:10001B84 8D 4C 24	0C						       lea     ecx, [esp+324h+var_318] ; this
.text:10001B88 C7 84 24	20 03 00 00 FF FF FF FF				       mov     [esp+324h+var_4], 0FFFFFFFFh
.text:10001B93 E8 F4 1D	00 00						       call    ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10001B98 8B 8C 24	18 03 00 00					       mov     ecx, [esp+324h+var_C]
.text:10001B9F 5F							       pop     edi
.text:10001BA0 5D							       pop     ebp
.text:10001BA1 33 C0							       xor     eax, eax
.text:10001BA3 5B							       pop     ebx
.text:10001BA4 64 89 0D	00 00 00 00					       mov     large fs:0, ecx
.text:10001BAB 81 C4 18	03 00 00					       add     esp, 318h
.text:10001BB1 C3							       retn
.text:10001BB1						       ?GSCRAddLocationNameFromZipcode@@YAJPAVCListInfo@@@Z endp
.text:10001BB1
.text:10001BB1						       ; ---------------------------------------------------------------------------
.text:10001BB2 90 90 90	90 90 90 90 90 90 90 90	90 90 90		       align 10h
.text:10001BC0						       ; Exported entry	 17. ?GSCRRelatePhotosWithLocations@@YAJPAVCListInfo@@@Z
.text:10001BC0
.text:10001BC0						       ; =============== S U B R O U T I N E =======================================
.text:10001BC0
.text:10001BC0
.text:10001BC0						       ; __int32 __cdecl GSCRRelatePhotosWithLocations(struct CListInfo	*)
.text:10001BC0								       public ?GSCRRelatePhotosWithLocations@@YAJPAVCListInfo@@@Z
.text:10001BC0						       ?GSCRRelatePhotosWithLocations@@YAJPAVCListInfo@@@Z proc	near
.text:10001BC0											       ; DATA XREF: .rdata:off_10005C68o
.text:10001BC0
.text:10001BC0						       var_10	       = dword ptr -10h
.text:10001BC0						       var_C	       = dword ptr -0Ch
.text:10001BC0						       var_8	       = dword ptr -8
.text:10001BC0						       var_4	       = dword ptr -4
.text:10001BC0						       arg_0	       = dword ptr  4
.text:10001BC0
.text:10001BC0 8B 4C 24	04						       mov     ecx, [esp+arg_0]
.text:10001BC4 83 EC 10							       sub     esp, 10h
.text:10001BC7 53							       push    ebx
.text:10001BC8 55							       push    ebp
.text:10001BC9 56							       push    esi
.text:10001BCA 33 F6							       xor     esi, esi
.text:10001BCC 3B CE							       cmp     ecx, esi
.text:10001BCE 57							       push    edi
.text:10001BCF 75 0D							       jnz     short loc_10001BDE
.text:10001BD1 B8 57 00	07 80						       mov     eax, 80070057h
.text:10001BD6 5F							       pop     edi
.text:10001BD7 5E							       pop     esi
.text:10001BD8 5D							       pop     ebp
.text:10001BD9 5B							       pop     ebx
.text:10001BDA 83 C4 10							       add     esp, 10h
.text:10001BDD C3							       retn
.text:10001BDE						       ; ---------------------------------------------------------------------------
.text:10001BDE
.text:10001BDE						       loc_10001BDE:			       ; CODE XREF: GSCRRelatePhotosWithLocations(CListInfo *)+Fj
.text:10001BDE 8B 41 2C							       mov     eax, [ecx+2Ch]
.text:10001BE1 8B 59 10							       mov     ebx, [ecx+10h]
.text:10001BE4 3B C6							       cmp     eax, esi
.text:10001BE6 89 5C 24	24						       mov     [esp+20h+arg_0],	ebx
.text:10001BEA 0F 84 7D	01 00 00					       jz      loc_10001D6D
.text:10001BF0 3B DE							       cmp     ebx, esi
.text:10001BF2 0F 84 75	01 00 00					       jz      loc_10001D6D
.text:10001BF8 89 74 24	18						       mov     [esp+20h+var_8],	esi
.text:10001BFC EB 04							       jmp     short loc_10001C02
.text:10001BFE						       ; ---------------------------------------------------------------------------
.text:10001BFE
.text:10001BFE						       loc_10001BFE:			       ; CODE XREF: GSCRRelatePhotosWithLocations(CListInfo *)+12Bj
.text:10001BFE 8B 44 24	1C						       mov     eax, [esp+20h+var_4]
.text:10001C02
.text:10001C02						       loc_10001C02:			       ; CODE XREF: GSCRRelatePhotosWithLocations(CListInfo *)+3Cj
.text:10001C02 8B 68 08							       mov     ebp, [eax+8]
.text:10001C05 8B 08							       mov     ecx, [eax]
.text:10001C07 89 4C 24	1C						       mov     [esp+20h+var_4],	ecx
.text:10001C0B 89 6C 24	14						       mov     [esp+20h+var_C],	ebp
.text:10001C0F 8B 55 3C							       mov     edx, [ebp+3Ch]
.text:10001C12 89 54 24	10						       mov     [esp+20h+var_10], edx
.text:10001C16
.text:10001C16						       loc_10001C16:			       ; CODE XREF: GSCRRelatePhotosWithLocations(CListInfo *)+10Fj
.text:10001C16 85 F6							       test    esi, esi
.text:10001C18 75 0D							       jnz     short loc_10001C27
.text:10001C1A 8B 0B							       mov     ecx, [ebx]
.text:10001C1C 8B C3							       mov     eax, ebx
.text:10001C1E 89 4C 24	24						       mov     [esp+20h+arg_0],	ecx
.text:10001C22 8B D9							       mov     ebx, ecx
.text:10001C24 8B 70 08							       mov     esi, [eax+8]
.text:10001C27
.text:10001C27						       loc_10001C27:			       ; CODE XREF: GSCRRelatePhotosWithLocations(CListInfo *)+58j
.text:10001C27 8B 56 0C							       mov     edx, [esi+0Ch]
.text:10001C2A 51							       push    ecx
.text:10001C2B 8D 7E 0C							       lea     edi, [esi+0Ch]
.text:10001C2E 8B C4							       mov     eax, esp
.text:10001C30 8D 4C 24	1C						       lea     ecx, [esp+24h+var_8]
.text:10001C34 89 10							       mov     [eax], edx
.text:10001C36 E8 45 01	00 00						       call    sub_10001D80
.text:10001C3B 85 C0							       test    eax, eax
.text:10001C3D 74 75							       jz      short loc_10001CB4
.text:10001C3F 51							       push    ecx
.text:10001C40 8B 4C 24	14						       mov     ecx, [esp+24h+var_10]
.text:10001C44 8B C4							       mov     eax, esp
.text:10001C46 89 08							       mov     [eax], ecx
.text:10001C48 8B CF							       mov     ecx, edi
.text:10001C4A E8 41 01	00 00						       call    sub_10001D90
.text:10001C4F 85 C0							       test    eax, eax
.text:10001C51 74 61							       jz      short loc_10001CB4
.text:10001C53 8B 55 04							       mov     edx, [ebp+4]
.text:10001C56 8D 7D 2C							       lea     edi, [ebp+2Ch]
.text:10001C59 89 56 10							       mov     [esi+10h], edx
.text:10001C5C 8D 5E 14							       lea     ebx, [esi+14h]
.text:10001C5F BD 04 00	00 00						       mov     ebp, 4
.text:10001C64
.text:10001C64						       loc_10001C64:			       ; CODE XREF: GSCRRelatePhotosWithLocations(CListInfo *)+B3j
.text:10001C64 57							       push    edi
.text:10001C65 8B CB							       mov     ecx, ebx
.text:10001C67 E8 9E 1D	00 00						       call    ??4CString@@QAEABV0@ABV0@@Z ; CString::operator=(CString	const &)
.text:10001C6C 83 C7 04							       add     edi, 4
.text:10001C6F 83 C3 04							       add     ebx, 4
.text:10001C72 4D							       dec     ebp
.text:10001C73 75 EF							       jnz     short loc_10001C64
.text:10001C75 8B 44 24	14						       mov     eax, [esp+20h+var_C]
.text:10001C79 8D 4E 24							       lea     ecx, [esi+24h]
.text:10001C7C 83 C0 08							       add     eax, 8
.text:10001C7F BA 03 00	00 00						       mov     edx, 3
.text:10001C84
.text:10001C84						       loc_10001C84:			       ; CODE XREF: GSCRRelatePhotosWithLocations(CListInfo *)+DFj
.text:10001C84 8B F0							       mov     esi, eax
.text:10001C86 8B F9							       mov     edi, ecx
.text:10001C88 83 C0 0C							       add     eax, 0Ch
.text:10001C8B 83 C1 0C							       add     ecx, 0Ch
.text:10001C8E 8B 1E							       mov     ebx, [esi]
.text:10001C90 4A							       dec     edx
.text:10001C91 89 1F							       mov     [edi], ebx
.text:10001C93 8B 5E 04							       mov     ebx, [esi+4]
.text:10001C96 89 5F 04							       mov     [edi+4],	ebx
.text:10001C99 8B 76 08							       mov     esi, [esi+8]
.text:10001C9C 89 77 08							       mov     [edi+8],	esi
.text:10001C9F 75 E3							       jnz     short loc_10001C84
.text:10001CA1 8B 44 24	24						       mov     eax, [esp+20h+arg_0]
.text:10001CA5 8B 6C 24	14						       mov     ebp, [esp+20h+var_C]
.text:10001CA9 8B 08							       mov     ecx, [eax]
.text:10001CAB 8B 70 08							       mov     esi, [eax+8]
.text:10001CAE 89 4C 24	24						       mov     [esp+20h+arg_0],	ecx
.text:10001CB2 8B D9							       mov     ebx, ecx
.text:10001CB4
.text:10001CB4						       loc_10001CB4:			       ; CODE XREF: GSCRRelatePhotosWithLocations(CListInfo *)+7Dj
.text:10001CB4											       ; GSCRRelatePhotosWithLocations(CListInfo *)+91j
.text:10001CB4 85 DB							       test    ebx, ebx
.text:10001CB6 0F 84 A7	00 00 00					       jz      loc_10001D63
.text:10001CBC 8B 54 24	10						       mov     edx, [esp+20h+var_10]
.text:10001CC0 51							       push    ecx
.text:10001CC1 8B C4							       mov     eax, esp
.text:10001CC3 8D 4E 0C							       lea     ecx, [esi+0Ch]
.text:10001CC6 89 10							       mov     [eax], edx
.text:10001CC8 E8 C3 00	00 00						       call    sub_10001D90
.text:10001CCD 85 C0							       test    eax, eax
.text:10001CCF 0F 85 41	FF FF FF					       jnz     loc_10001C16
.text:10001CD5 85 DB							       test    ebx, ebx
.text:10001CD7 0F 84 86	00 00 00					       jz      loc_10001D63
.text:10001CDD 8B 44 24	10						       mov     eax, [esp+20h+var_10]
.text:10001CE1 89 44 24	18						       mov     [esp+20h+var_8],	eax
.text:10001CE5 8B 44 24	1C						       mov     eax, [esp+20h+var_4]
.text:10001CE9 85 C0							       test    eax, eax
.text:10001CEB 0F 85 0D	FF FF FF					       jnz     loc_10001BFE
.text:10001CF1 85 DB							       test    ebx, ebx
.text:10001CF3 74 6E							       jz      short loc_10001D63
.text:10001CF5 EB 04							       jmp     short loc_10001CFB
.text:10001CF7						       ; ---------------------------------------------------------------------------
.text:10001CF7
.text:10001CF7						       loc_10001CF7:			       ; CODE XREF: GSCRRelatePhotosWithLocations(CListInfo *)+1A1j
.text:10001CF7 8B 5C 24	24						       mov     ebx, [esp+20h+arg_0]
.text:10001CFB
.text:10001CFB						       loc_10001CFB:			       ; CODE XREF: GSCRRelatePhotosWithLocations(CListInfo *)+135j
.text:10001CFB 8B 0B							       mov     ecx, [ebx]
.text:10001CFD 8B 55 04							       mov     edx, [ebp+4]
.text:10001D00 8B C3							       mov     eax, ebx
.text:10001D02 89 4C 24	24						       mov     [esp+20h+arg_0],	ecx
.text:10001D06 8D 7D 2C							       lea     edi, [ebp+2Ch]
.text:10001D09 C7 44 24	1C 04 00 00 00					       mov     [esp+20h+var_4],	4
.text:10001D11 8B 70 08							       mov     esi, [eax+8]
.text:10001D14 89 56 10							       mov     [esi+10h], edx
.text:10001D17 8D 5E 14							       lea     ebx, [esi+14h]
.text:10001D1A
.text:10001D1A						       loc_10001D1A:			       ; CODE XREF: GSCRRelatePhotosWithLocations(CListInfo *)+171j
.text:10001D1A 57							       push    edi
.text:10001D1B 8B CB							       mov     ecx, ebx
.text:10001D1D E8 E8 1C	00 00						       call    ??4CString@@QAEABV0@ABV0@@Z ; CString::operator=(CString	const &)
.text:10001D22 8B 44 24	1C						       mov     eax, [esp+20h+var_4]
.text:10001D26 83 C7 04							       add     edi, 4
.text:10001D29 83 C3 04							       add     ebx, 4
.text:10001D2C 48							       dec     eax
.text:10001D2D 89 44 24	1C						       mov     [esp+20h+var_4],	eax
.text:10001D31 75 E7							       jnz     short loc_10001D1A
.text:10001D33 8D 4E 24							       lea     ecx, [esi+24h]
.text:10001D36 8D 45 08							       lea     eax, [ebp+8]
.text:10001D39 BA 03 00	00 00						       mov     edx, 3
.text:10001D3E
.text:10001D3E						       loc_10001D3E:			       ; CODE XREF: GSCRRelatePhotosWithLocations(CListInfo *)+199j
.text:10001D3E 8B F0							       mov     esi, eax
.text:10001D40 8B F9							       mov     edi, ecx
.text:10001D42 83 C0 0C							       add     eax, 0Ch
.text:10001D45 83 C1 0C							       add     ecx, 0Ch
.text:10001D48 8B 1E							       mov     ebx, [esi]
.text:10001D4A 4A							       dec     edx
.text:10001D4B 89 1F							       mov     [edi], ebx
.text:10001D4D 8B 5E 04							       mov     ebx, [esi+4]
.text:10001D50 89 5F 04							       mov     [edi+4],	ebx
.text:10001D53 8B 76 08							       mov     esi, [esi+8]
.text:10001D56 89 77 08							       mov     [edi+8],	esi
.text:10001D59 75 E3							       jnz     short loc_10001D3E
.text:10001D5B 8B 44 24	24						       mov     eax, [esp+20h+arg_0]
.text:10001D5F 85 C0							       test    eax, eax
.text:10001D61 75 94							       jnz     short loc_10001CF7
.text:10001D63
.text:10001D63						       loc_10001D63:			       ; CODE XREF: GSCRRelatePhotosWithLocations(CListInfo *)+F6j
.text:10001D63											       ; GSCRRelatePhotosWithLocations(CListInfo *)+117j ...
.text:10001D63 33 C0							       xor     eax, eax
.text:10001D65 5F							       pop     edi
.text:10001D66 5E							       pop     esi
.text:10001D67 5D							       pop     ebp
.text:10001D68 5B							       pop     ebx
.text:10001D69 83 C4 10							       add     esp, 10h
.text:10001D6C C3							       retn
.text:10001D6D						       ; ---------------------------------------------------------------------------
.text:10001D6D
.text:10001D6D						       loc_10001D6D:			       ; CODE XREF: GSCRRelatePhotosWithLocations(CListInfo *)+2Aj
.text:10001D6D											       ; GSCRRelatePhotosWithLocations(CListInfo *)+32j
.text:10001D6D 5F							       pop     edi
.text:10001D6E 5E							       pop     esi
.text:10001D6F 5D							       pop     ebp
.text:10001D70 B8 05 40	00 80						       mov     eax, 80004005h
.text:10001D75 5B							       pop     ebx
.text:10001D76 83 C4 10							       add     esp, 10h
.text:10001D79 C3							       retn
.text:10001D79						       ?GSCRRelatePhotosWithLocations@@YAJPAVCListInfo@@@Z endp
.text:10001D79
.text:10001D79						       ; ---------------------------------------------------------------------------
.text:10001D7A 90 90 90	90 90 90					       align 10h
.text:10001D80
.text:10001D80						       ; =============== S U B R O U T I N E =======================================
.text:10001D80
.text:10001D80
.text:10001D80						       sub_10001D80    proc near	       ; CODE XREF: GSCRRelatePhotosWithLocations(CListInfo *)+76p
.text:10001D80
.text:10001D80						       arg_0	       = dword ptr  4
.text:10001D80
.text:10001D80 8B 09							       mov     ecx, [ecx]
.text:10001D82 8B 54 24	04						       mov     edx, [esp+arg_0]
.text:10001D86 33 C0							       xor     eax, eax
.text:10001D88 3B CA							       cmp     ecx, edx
.text:10001D8A 0F 9C C0							       setl    al
.text:10001D8D C2 04 00							       retn    4
.text:10001D8D						       sub_10001D80    endp
.text:10001D8D
.text:10001D90
.text:10001D90						       ; =============== S U B R O U T I N E =======================================
.text:10001D90
.text:10001D90
.text:10001D90						       sub_10001D90    proc near	       ; CODE XREF: GSCRRelatePhotosWithLocations(CListInfo *)+8Ap
.text:10001D90											       ; GSCRRelatePhotosWithLocations(CListInfo *)+108p
.text:10001D90
.text:10001D90						       arg_0	       = dword ptr  4
.text:10001D90
.text:10001D90 8B 09							       mov     ecx, [ecx]
.text:10001D92 8B 54 24	04						       mov     edx, [esp+arg_0]
.text:10001D96 33 C0							       xor     eax, eax
.text:10001D98 3B CA							       cmp     ecx, edx
.text:10001D9A 0F 9E C0							       setle   al
.text:10001D9D C2 04 00							       retn    4
.text:10001D9D						       sub_10001D90    endp
.text:10001D9D
.text:10001DA0
.text:10001DA0						       ; =============== S U B R O U T I N E =======================================
.text:10001DA0
.text:10001DA0
.text:10001DA0						       sub_10001DA0    proc near	       ; CODE XREF: GSCRSetLogFilename(void *,char const *,int)+3Dp
.text:10001DA0
.text:10001DA0						       var_10	       = dword ptr -10h
.text:10001DA0						       var_C	       = dword ptr -0Ch
.text:10001DA0						       var_4	       = dword ptr -4
.text:10001DA0						       arg_4	       = dword ptr  8
.text:10001DA0
.text:10001DA0 6A FF							       push    0FFFFFFFFh
.text:10001DA2 68 43 3F	00 10						       push    offset SEH_10001DA0
.text:10001DA7 64 A1 00	00 00 00					       mov     eax, large fs:0
.text:10001DAD 50							       push    eax
.text:10001DAE 64 89 25	00 00 00 00					       mov     large fs:0, esp
.text:10001DB5 51							       push    ecx
.text:10001DB6 56							       push    esi
.text:10001DB7 8B F1							       mov     esi, ecx
.text:10001DB9 89 74 24	04						       mov     [esp+14h+var_10], esi
.text:10001DBD C7 06 7C	51 00 10					       mov     dword ptr [esi],	offset off_1000517C
.text:10001DC3 8D 4E 08							       lea     ecx, [esi+8]    ; this
.text:10001DC6 C7 44 24	10 00 00 00 00					       mov     [esp+14h+var_4],	0
.text:10001DCE E8 B3 1B	00 00						       call    ??0CString@@QAE@XZ ; CString::CString(void)
.text:10001DD3 8D 4E 10							       lea     ecx, [esi+10h]  ; this
.text:10001DD6 C6 44 24	10 01						       mov     byte ptr	[esp+14h+var_4], 1
.text:10001DDB E8 A6 1B	00 00						       call    ??0CString@@QAE@XZ ; CString::CString(void)
.text:10001DE0 8B 44 24	1C						       mov     eax, [esp+14h+arg_4]
.text:10001DE4 8B 4C 24	08						       mov     ecx, [esp+14h+var_C]
.text:10001DE8 89 46 0C							       mov     [esi+0Ch], eax
.text:10001DEB C7 06 C0	51 00 10					       mov     dword ptr [esi],	offset off_100051C0
.text:10001DF1 C7 46 04	00 00 00 00					       mov     dword ptr [esi+4], 0
.text:10001DF8 8B C6							       mov     eax, esi
.text:10001DFA 5E							       pop     esi
.text:10001DFB 64 89 0D	00 00 00 00					       mov     large fs:0, ecx
.text:10001E02 83 C4 10							       add     esp, 10h
.text:10001E05 C2 08 00							       retn    8
.text:10001E05						       sub_10001DA0    endp
.text:10001E05
.text:10001E05						       ; ---------------------------------------------------------------------------
.text:10001E08 90 90 90	90 90 90 90 90					       align 10h
.text:10001E10
.text:10001E10						       ; =============== S U B R O U T I N E =======================================
.text:10001E10
.text:10001E10
.text:10001E10						       sub_10001E10    proc near	       ; DATA XREF: .rdata:100051D4o
.text:10001E10											       ; .rdata:100051D8o
.text:10001E10 33 C0							       xor     eax, eax
.text:10001E12 C3							       retn
.text:10001E12						       sub_10001E10    endp
.text:10001E12
.text:10001E12						       ; ---------------------------------------------------------------------------
.text:10001E13 90 90 90	90 90 90 90 90 90 90 90	90 90			       align 10h
.text:10001E20
.text:10001E20						       ; =============== S U B R O U T I N E =======================================
.text:10001E20
.text:10001E20
.text:10001E20						       sub_10001E20    proc near	       ; DATA XREF: .rdata:100051DCo
.text:10001E20
.text:10001E20						       var_C	       = dword ptr -0Ch
.text:10001E20						       var_4	       = dword ptr -4
.text:10001E20						       arg_4	       = byte ptr  8
.text:10001E20						       arg_8	       = byte ptr  0Ch
.text:10001E20						       arg_C	       = byte ptr  10h
.text:10001E20
.text:10001E20 64 A1 00	00 00 00					       mov     eax, large fs:0
.text:10001E26 6A FF							       push    0FFFFFFFFh
.text:10001E28 68 60 3F	00 10						       push    offset SEH_10001E20
.text:10001E2D 50							       push    eax
.text:10001E2E 64 89 25	00 00 00 00					       mov     large fs:0, esp
.text:10001E35 8D 4C 24	14						       lea     ecx, [esp+0Ch+arg_4] ; this
.text:10001E39 C7 44 24	08 01 00 00 00					       mov     [esp+0Ch+var_4],	1
.text:10001E41 E8 46 1B	00 00						       call    ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10001E46 8D 4C 24	18						       lea     ecx, [esp+0Ch+arg_8] ; this
.text:10001E4A C6 44 24	08 00						       mov     byte ptr	[esp+0Ch+var_4], 0
.text:10001E4F E8 38 1B	00 00						       call    ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10001E54 8D 4C 24	1C						       lea     ecx, [esp+0Ch+arg_C] ; this
.text:10001E58 C7 44 24	08 FF FF FF FF					       mov     [esp+0Ch+var_4],	0FFFFFFFFh
.text:10001E60 E8 27 1B	00 00						       call    ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10001E65 8B 4C 24	00						       mov     ecx, [esp+0Ch+var_C]
.text:10001E69 33 C0							       xor     eax, eax
.text:10001E6B 64 89 0D	00 00 00 00					       mov     large fs:0, ecx
.text:10001E72 83 C4 0C							       add     esp, 0Ch
.text:10001E75 C2 10 00							       retn    10h
.text:10001E75						       sub_10001E20    endp
.text:10001E75
.text:10001E75						       ; ---------------------------------------------------------------------------
.text:10001E78 90 90 90	90 90 90 90 90					       align 10h
.text:10001E80
.text:10001E80						       ; =============== S U B R O U T I N E =======================================
.text:10001E80
.text:10001E80
.text:10001E80						       sub_10001E80    proc near	       ; DATA XREF: .rdata:100051E0o
.text:10001E80 33 C0							       xor     eax, eax
.text:10001E82 C2 04 00							       retn    4
.text:10001E82						       sub_10001E80    endp
.text:10001E82
.text:10001E82						       ; ---------------------------------------------------------------------------
.text:10001E85 90 90 90	90 90 90 90 90 90 90 90				       align 10h
.text:10001E90
.text:10001E90						       ; =============== S U B R O U T I N E =======================================
.text:10001E90
.text:10001E90
.text:10001E90						       ; int __thiscall	sub_10001E90(void *, char)
.text:10001E90						       sub_10001E90    proc near	       ; DATA XREF: .rdata:100051C4o
.text:10001E90
.text:10001E90						       arg_0	       = byte ptr  4
.text:10001E90
.text:10001E90 56							       push    esi
.text:10001E91 8B F1							       mov     esi, ecx
.text:10001E93 E8 18 00	00 00						       call    sub_10001EB0
.text:10001E98 F6 44 24	08 01						       test    [esp+4+arg_0], 1
.text:10001E9D 74 09							       jz      short loc_10001EA8
.text:10001E9F 56							       push    esi	       ; void *
.text:10001EA0 E8 ED 1A	00 00						       call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:10001EA5 83 C4 04							       add     esp, 4
.text:10001EA8
.text:10001EA8						       loc_10001EA8:			       ; CODE XREF: sub_10001E90+Dj
.text:10001EA8 8B C6							       mov     eax, esi
.text:10001EAA 5E							       pop     esi
.text:10001EAB C2 04 00							       retn    4
.text:10001EAB						       sub_10001E90    endp
.text:10001EAB
.text:10001EAB						       ; ---------------------------------------------------------------------------
.text:10001EAE 90 90							       align 10h
.text:10001EB0
.text:10001EB0						       ; =============== S U B R O U T I N E =======================================
.text:10001EB0
.text:10001EB0
.text:10001EB0						       sub_10001EB0    proc near	       ; CODE XREF: sub_10001E90+3p
.text:10001EB0
.text:10001EB0						       var_10	       = dword ptr -10h
.text:10001EB0						       var_C	       = dword ptr -0Ch
.text:10001EB0						       var_4	       = dword ptr -4
.text:10001EB0
.text:10001EB0 6A FF							       push    0FFFFFFFFh
.text:10001EB2 68 8E 3F	00 10						       push    offset SEH_10001EB0
.text:10001EB7 64 A1 00	00 00 00					       mov     eax, large fs:0
.text:10001EBD 50							       push    eax
.text:10001EBE 64 89 25	00 00 00 00					       mov     large fs:0, esp
.text:10001EC5 51							       push    ecx
.text:10001EC6 56							       push    esi
.text:10001EC7 8B F1							       mov     esi, ecx
.text:10001EC9 89 74 24	04						       mov     [esp+14h+var_10], esi
.text:10001ECD C7 06 C0	51 00 10					       mov     dword ptr [esi],	offset off_100051C0
.text:10001ED3 8B 4E 04							       mov     ecx, [esi+4]
.text:10001ED6 C7 44 24	10 02 00 00 00					       mov     [esp+14h+var_4],	2
.text:10001EDE 85 C9							       test    ecx, ecx
.text:10001EE0 74 05							       jz      short loc_10001EE7
.text:10001EE2 8B 01							       mov     eax, [ecx]
.text:10001EE4 FF 50 54							       call    dword ptr [eax+54h]
.text:10001EE7
.text:10001EE7						       loc_10001EE7:			       ; CODE XREF: sub_10001EB0+30j
.text:10001EE7 8D 4E 10							       lea     ecx, [esi+10h]  ; this
.text:10001EEA C7 46 04	00 00 00 00					       mov     dword ptr [esi+4], 0
.text:10001EF1 C6 44 24	10 01						       mov     byte ptr	[esp+14h+var_4], 1
.text:10001EF6 E8 91 1A	00 00						       call    ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10001EFB 8D 4E 08							       lea     ecx, [esi+8]    ; this
.text:10001EFE C6 44 24	10 00						       mov     byte ptr	[esp+14h+var_4], 0
.text:10001F03 E8 84 1A	00 00						       call    ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10001F08 8B 4C 24	08						       mov     ecx, [esp+14h+var_C]
.text:10001F0C C7 06 7C	51 00 10					       mov     dword ptr [esi],	offset off_1000517C
.text:10001F12 5E							       pop     esi
.text:10001F13 64 89 0D	00 00 00 00					       mov     large fs:0, ecx
.text:10001F1A 83 C4 10							       add     esp, 10h
.text:10001F1D C3							       retn
.text:10001F1D						       sub_10001EB0    endp
.text:10001F1D
.text:10001F1D						       ; ---------------------------------------------------------------------------
.text:10001F1E 90 90							       align 10h
.text:10001F20
.text:10001F20						       ; =============== S U B R O U T I N E =======================================
.text:10001F20
.text:10001F20						       ; Attributes: bp-based frame
.text:10001F20
.text:10001F20						       sub_10001F20    proc near	       ; CODE XREF: sub_10002200+7p
.text:10001F20											       ; sub_10002210+Fp ...
.text:10001F20
.text:10001F20						       var_10	       = dword ptr -10h
.text:10001F20						       var_C	       = dword ptr -0Ch
.text:10001F20						       var_4	       = dword ptr -4
.text:10001F20
.text:10001F20 55							       push    ebp
.text:10001F21 8B EC							       mov     ebp, esp
.text:10001F23 6A FF							       push    0FFFFFFFFh
.text:10001F25 68 A0 3F	00 10						       push    offset SEH_10001F20
.text:10001F2A 64 A1 00	00 00 00					       mov     eax, large fs:0
.text:10001F30 50							       push    eax
.text:10001F31 64 89 25	00 00 00 00					       mov     large fs:0, esp
.text:10001F38 83 EC 08							       sub     esp, 8
.text:10001F3B 8B 41 10							       mov     eax, [ecx+10h]
.text:10001F3E 8B 49 04							       mov     ecx, [ecx+4]
.text:10001F41 53							       push    ebx
.text:10001F42 56							       push    esi
.text:10001F43 8B 50 F8							       mov     edx, [eax-8]
.text:10001F46 8B 31							       mov     esi, [ecx]
.text:10001F48 57							       push    edi
.text:10001F49 C7 45 FC	00 00 00 00					       mov     [ebp+var_4], 0
.text:10001F50 89 65 F0							       mov     [ebp+var_10], esp
.text:10001F53 52							       push    edx
.text:10001F54 50							       push    eax
.text:10001F55 FF 56 40							       call    dword ptr [esi+40h]
.text:10001F58 33 C0							       xor     eax, eax
.text:10001F5A 8B 4D F4							       mov     ecx, [ebp+var_C]
.text:10001F5D 64 89 0D	00 00 00 00					       mov     large fs:0, ecx
.text:10001F64 5F							       pop     edi
.text:10001F65 5E							       pop     esi
.text:10001F66 5B							       pop     ebx
.text:10001F67 8B E5							       mov     esp, ebp
.text:10001F69 5D							       pop     ebp
.text:10001F6A C3							       retn
.text:10001F6A						       sub_10001F20    endp
.text:10001F6A
.text:10001F6B
.text:10001F6B						       ; =============== S U B R O U T I N E =======================================
.text:10001F6B
.text:10001F6B
.text:10001F6B						       sub_10001F6B    proc near	       ; DATA XREF: .rdata:stru_10005520o
.text:10001F6B 8B 4D EC							       mov     ecx, [ebp-14h]  ; this
.text:10001F6E E8 9D 1A	00 00						       call    ?Delete@CException@@QAEXXZ ; CException::Delete(void)
.text:10001F73 B8 79 1F	00 10						       mov     eax, offset loc_10001F79
.text:10001F78 C3							       retn
.text:10001F79						       ; ---------------------------------------------------------------------------
.text:10001F79
.text:10001F79						       loc_10001F79:			       ; CODE XREF: sub_10001F6B+Dj
.text:10001F79											       ; DATA XREF: sub_10001F6B+8o
.text:10001F79 8B 4D F4							       mov     ecx, [ebp-0Ch]
.text:10001F7C 5F							       pop     edi
.text:10001F7D 5E							       pop     esi
.text:10001F7E B8 05 40	00 80						       mov     eax, 80004005h
.text:10001F83 64 89 0D	00 00 00 00					       mov     large fs:0, ecx
.text:10001F8A 5B							       pop     ebx
.text:10001F8B 8B E5							       mov     esp, ebp
.text:10001F8D 5D							       pop     ebp
.text:10001F8E C3							       retn
.text:10001F8E						       sub_10001F6B    endp ; sp-analysis failed
.text:10001F8E
.text:10001F8E						       ; ---------------------------------------------------------------------------
.text:10001F8F 90							       align 10h
.text:10001F90
.text:10001F90						       ; =============== S U B R O U T I N E =======================================
.text:10001F90
.text:10001F90
.text:10001F90						       sub_10001F90    proc near	       ; CODE XREF: GSCREnumDevices(void)+187p
.text:10001F90
.text:10001F90						       var_10	       = dword ptr -10h
.text:10001F90						       var_C	       = dword ptr -0Ch
.text:10001F90						       var_4	       = dword ptr -4
.text:10001F90
.text:10001F90 6A FF							       push    0FFFFFFFFh
.text:10001F92 68 D9 3F	00 10						       push    offset SEH_10001F90
.text:10001F97 64 A1 00	00 00 00					       mov     eax, large fs:0
.text:10001F9D 50							       push    eax
.text:10001F9E 64 89 25	00 00 00 00					       mov     large fs:0, esp
.text:10001FA5 51							       push    ecx
.text:10001FA6 56							       push    esi
.text:10001FA7 8B F1							       mov     esi, ecx
.text:10001FA9 57							       push    edi
.text:10001FAA 89 74 24	08						       mov     [esp+18h+var_10], esi
.text:10001FAE C7 06 7C	51 00 10					       mov     dword ptr [esi],	offset off_1000517C
.text:10001FB4 33 FF							       xor     edi, edi
.text:10001FB6 6A 0A							       push    0Ah	       ; int
.text:10001FB8 8D 4E 08							       lea     ecx, [esi+8]    ; this
.text:10001FBB 89 7C 24	18						       mov     [esp+1Ch+var_4],	edi
.text:10001FBF E8 DA 19	00 00						       call    ??0CObList@@QAE@H@Z ; CObList::CObList(int)
.text:10001FC4 68 8C 39	00 10						       push    offset ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10001FC9 68 86 39	00 10						       push    offset ??0CString@@QAE@XZ ; CString::CString(void)
.text:10001FCE 6A 03							       push    3
.text:10001FD0 8D 46 40							       lea     eax, [esi+40h]
.text:10001FD3 6A 04							       push    4
.text:10001FD5 50							       push    eax
.text:10001FD6 C6 44 24	28 01						       mov     byte ptr	[esp+2Ch+var_4], 1
.text:10001FDB E8 7E 1A	00 00						       call    sub_10003A5E
.text:10001FE0 8D 4E 50							       lea     ecx, [esi+50h]  ; this
.text:10001FE3 C6 44 24	14 02						       mov     byte ptr	[esp+18h+var_4], 2
.text:10001FE8 E8 99 19	00 00						       call    ??0CString@@QAE@XZ ; CString::CString(void)
.text:10001FED 8B 4C 24	0C						       mov     ecx, [esp+18h+var_C]
.text:10001FF1 89 7E 04							       mov     [esi+4],	edi
.text:10001FF4 89 7E 24							       mov     [esi+24h], edi
.text:10001FF7 89 7E 28							       mov     [esi+28h], edi
.text:10001FFA 89 7E 38							       mov     [esi+38h], edi
.text:10001FFD 89 7E 3C							       mov     [esi+3Ch], edi
.text:10002000 89 7E 2C							       mov     [esi+2Ch], edi
.text:10002003 89 7E 30							       mov     [esi+30h], edi
.text:10002006 89 7E 5C							       mov     [esi+5Ch], edi
.text:10002009 C7 06 E4	51 00 10					       mov     dword ptr [esi],	offset off_100051E4
.text:1000200F C7 46 34	01 00 00 00					       mov     dword ptr [esi+34h], 1
.text:10002016 C7 46 58	10 27 00 00					       mov     dword ptr [esi+58h], 2710h
.text:1000201D 8B C6							       mov     eax, esi
.text:1000201F 5F							       pop     edi
.text:10002020 5E							       pop     esi
.text:10002021 64 89 0D	00 00 00 00					       mov     large fs:0, ecx
.text:10002028 83 C4 10							       add     esp, 10h
.text:1000202B C3							       retn
.text:1000202B						       sub_10001F90    endp
.text:1000202B
.text:1000202B						       ; ---------------------------------------------------------------------------
.text:1000202C 90 90 90	90						       align 10h
.text:10002030
.text:10002030						       ; =============== S U B R O U T I N E =======================================
.text:10002030
.text:10002030
.text:10002030						       ; int __thiscall	sub_10002030(void *, char)
.text:10002030						       sub_10002030    proc near	       ; DATA XREF: .rdata:100051E8o
.text:10002030
.text:10002030						       arg_0	       = byte ptr  4
.text:10002030
.text:10002030 56							       push    esi
.text:10002031 8B F1							       mov     esi, ecx
.text:10002033 E8 18 00	00 00						       call    sub_10002050
.text:10002038 F6 44 24	08 01						       test    [esp+4+arg_0], 1
.text:1000203D 74 09							       jz      short loc_10002048
.text:1000203F 56							       push    esi	       ; void *
.text:10002040 E8 4D 19	00 00						       call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:10002045 83 C4 04							       add     esp, 4
.text:10002048
.text:10002048						       loc_10002048:			       ; CODE XREF: sub_10002030+Dj
.text:10002048 8B C6							       mov     eax, esi
.text:1000204A 5E							       pop     esi
.text:1000204B C2 04 00							       retn    4
.text:1000204B						       sub_10002030    endp
.text:1000204B
.text:1000204B						       ; ---------------------------------------------------------------------------
.text:1000204E 90 90							       align 10h
.text:10002050
.text:10002050						       ; =============== S U B R O U T I N E =======================================
.text:10002050
.text:10002050
.text:10002050						       sub_10002050    proc near	       ; CODE XREF: sub_10002030+3p
.text:10002050
.text:10002050						       var_10	       = dword ptr -10h
.text:10002050						       var_C	       = dword ptr -0Ch
.text:10002050						       var_4	       = dword ptr -4
.text:10002050
.text:10002050 6A FF							       push    0FFFFFFFFh
.text:10002052 68 19 40	00 10						       push    offset SEH_10002050
.text:10002057 64 A1 00	00 00 00					       mov     eax, large fs:0
.text:1000205D 50							       push    eax
.text:1000205E 64 89 25	00 00 00 00					       mov     large fs:0, esp
.text:10002065 51							       push    ecx
.text:10002066 56							       push    esi
.text:10002067 8B F1							       mov     esi, ecx
.text:10002069 89 74 24	04						       mov     [esp+14h+var_10], esi
.text:1000206D 8D 4E 50							       lea     ecx, [esi+50h]  ; this
.text:10002070 C7 44 24	10 02 00 00 00					       mov     [esp+14h+var_4],	2
.text:10002078 E8 0F 19	00 00						       call    ??1CString@@QAE@XZ ; CString::~CString(void)
.text:1000207D 68 8C 39	00 10						       push    offset ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10002082 6A 03							       push    3
.text:10002084 8D 46 40							       lea     eax, [esi+40h]
.text:10002087 6A 04							       push    4
.text:10002089 50							       push    eax
.text:1000208A C6 44 24	20 01						       mov     byte ptr	[esp+24h+var_4], 1
.text:1000208F E8 5C 1A	00 00						       call    sub_10003AF0
.text:10002094 8D 4E 08							       lea     ecx, [esi+8]    ; this
.text:10002097 C6 44 24	10 00						       mov     byte ptr	[esp+14h+var_4], 0
.text:1000209C E8 09 19	00 00						       call    ??1CObList@@UAE@XZ ; CObList::~CObList(void)
.text:100020A1 8B 4C 24	08						       mov     ecx, [esp+14h+var_C]
.text:100020A5 C7 06 7C	51 00 10					       mov     dword ptr [esi],	offset off_1000517C
.text:100020AB 5E							       pop     esi
.text:100020AC 64 89 0D	00 00 00 00					       mov     large fs:0, ecx
.text:100020B3 83 C4 10							       add     esp, 10h
.text:100020B6 C3							       retn
.text:100020B6						       sub_10002050    endp
.text:100020B6
.text:100020B6						       ; ---------------------------------------------------------------------------
.text:100020B7 90 90 90	90 90 90 90 90 90				       align 10h
.text:100020C0
.text:100020C0						       ; =============== S U B R O U T I N E =======================================
.text:100020C0
.text:100020C0
.text:100020C0						       sub_100020C0    proc near	       ; CODE XREF: sub_10003030+20p
.text:100020C0
.text:100020C0						       var_14	       = dword ptr -14h
.text:100020C0						       var_10	       = dword ptr -10h
.text:100020C0						       var_C	       = dword ptr -0Ch
.text:100020C0						       var_4	       = dword ptr -4
.text:100020C0
.text:100020C0 6A FF							       push    0FFFFFFFFh
.text:100020C2 68 3A 40	00 10						       push    offset SEH_100020C0
.text:100020C7 64 A1 00	00 00 00					       mov     eax, large fs:0
.text:100020CD 50							       push    eax
.text:100020CE 64 89 25	00 00 00 00					       mov     large fs:0, esp
.text:100020D5 83 EC 08							       sub     esp, 8
.text:100020D8 53							       push    ebx
.text:100020D9 56							       push    esi
.text:100020DA 8B 71 0C							       mov     esi, [ecx+0Ch]
.text:100020DD 57							       push    edi
.text:100020DE 85 F6							       test    esi, esi
.text:100020E0 89 4C 24	0C						       mov     [esp+20h+var_14], ecx
.text:100020E4 74 7C							       jz      short loc_10002162
.text:100020E6
.text:100020E6						       loc_100020E6:			       ; CODE XREF: sub_100020C0+A0j
.text:100020E6 8B C6							       mov     eax, esi
.text:100020E8 8B 36							       mov     esi, [esi]
.text:100020EA 6A 10							       push    10h	       ; unsigned int
.text:100020EC 8B 78 08							       mov     edi, [eax+8]
.text:100020EF E8 CE 18	00 00						       call    ??2@YAPAXI@Z    ; operator new(uint)
.text:100020F4 83 C4 04							       add     esp, 4
.text:100020F7 89 44 24	10						       mov     [esp+20h+var_10], eax
.text:100020FB 85 C0							       test    eax, eax
.text:100020FD C7 44 24	1C 00 00 00 00					       mov     [esp+20h+var_4],	0
.text:10002105 74 0B							       jz      short loc_10002112
.text:10002107 8B C8							       mov     ecx, eax
.text:10002109 E8 D8 18	00 00						       call    ??0CFile@@QAE@XZ	; CFile::CFile(void)
.text:1000210E 8B D8							       mov     ebx, eax
.text:10002110 EB 02							       jmp     short loc_10002114
.text:10002112						       ; ---------------------------------------------------------------------------
.text:10002112
.text:10002112						       loc_10002112:			       ; CODE XREF: sub_100020C0+45j
.text:10002112 33 DB							       xor     ebx, ebx
.text:10002114
.text:10002114						       loc_10002114:			       ; CODE XREF: sub_100020C0+50j
.text:10002114 8B 47 0C							       mov     eax, [edi+0Ch]
.text:10002117 C7 44 24	1C FF FF FF FF					       mov     [esp+20h+var_4],	0FFFFFFFFh
.text:1000211F A9 00 00	01 00						       test    eax, 10000h
.text:10002124 74 07							       jz      short loc_1000212D
.text:10002126 B9 01 00	00 00						       mov     ecx, 1
.text:1000212B EB 0C							       jmp     short loc_10002139
.text:1000212D						       ; ---------------------------------------------------------------------------
.text:1000212D
.text:1000212D						       loc_1000212D:			       ; CODE XREF: sub_100020C0+64j
.text:1000212D A9 00 00	02 00						       test    eax, 20000h
.text:10002132 74 59							       jz      short loc_1000218D
.text:10002134 B9 01 10	00 00						       mov     ecx, 1001h
.text:10002139
.text:10002139						       loc_10002139:			       ; CODE XREF: sub_100020C0+6Bj
.text:10002139 8B 47 08							       mov     eax, [edi+8]
.text:1000213C 8B 13							       mov     edx, [ebx]
.text:1000213E 6A 00							       push    0
.text:10002140 51							       push    ecx
.text:10002141 50							       push    eax
.text:10002142 8B CB							       mov     ecx, ebx
.text:10002144 FF 52 28							       call    dword ptr [edx+28h]
.text:10002147 85 C0							       test    eax, eax
.text:10002149 74 2B							       jz      short loc_10002176
.text:1000214B 8B 4C 24	0C						       mov     ecx, [esp+20h+var_14]
.text:1000214F 8B 41 38							       mov     eax, [ecx+38h]
.text:10002152 85 C0							       test    eax, eax
.text:10002154 75 05							       jnz     short loc_1000215B
.text:10002156 E8 05 01	00 00						       call    sub_10002260
.text:1000215B
.text:1000215B						       loc_1000215B:			       ; CODE XREF: sub_100020C0+94j
.text:1000215B 85 F6							       test    esi, esi
.text:1000215D 89 5F 04							       mov     [edi+4],	ebx
.text:10002160 75 84							       jnz     short loc_100020E6
.text:10002162
.text:10002162						       loc_10002162:			       ; CODE XREF: sub_100020C0+24j
.text:10002162 5F							       pop     edi
.text:10002163 5E							       pop     esi
.text:10002164 33 C0							       xor     eax, eax
.text:10002166 5B							       pop     ebx
.text:10002167 8B 4C 24	08						       mov     ecx, [esp+14h+var_C]
.text:1000216B 64 89 0D	00 00 00 00					       mov     large fs:0, ecx
.text:10002172 83 C4 14							       add     esp, 14h
.text:10002175 C3							       retn
.text:10002176						       ; ---------------------------------------------------------------------------
.text:10002176
.text:10002176						       loc_10002176:			       ; CODE XREF: sub_100020C0+89j
.text:10002176 5F							       pop     edi
.text:10002177 5E							       pop     esi
.text:10002178 B8 05 40	00 80						       mov     eax, 80004005h
.text:1000217D 5B							       pop     ebx
.text:1000217E 8B 4C 24	08						       mov     ecx, [esp+14h+var_C]
.text:10002182 64 89 0D	00 00 00 00					       mov     large fs:0, ecx
.text:10002189 83 C4 14							       add     esp, 14h
.text:1000218C C3							       retn
.text:1000218D						       ; ---------------------------------------------------------------------------
.text:1000218D
.text:1000218D						       loc_1000218D:			       ; CODE XREF: sub_100020C0+72j
.text:1000218D 8B 4C 24	14						       mov     ecx, [esp+20h+var_C]
.text:10002191 5F							       pop     edi
.text:10002192 5E							       pop     esi
.text:10002193 B8 57 00	07 80						       mov     eax, 80070057h
.text:10002198 5B							       pop     ebx
.text:10002199 64 89 0D	00 00 00 00					       mov     large fs:0, ecx
.text:100021A0 83 C4 14							       add     esp, 14h
.text:100021A3 C3							       retn
.text:100021A3						       sub_100020C0    endp
.text:100021A3
.text:100021A3						       ; ---------------------------------------------------------------------------
.text:100021A4 90 90 90	90 90 90 90 90 90 90 90	90			       align 10h
.text:100021B0
.text:100021B0						       ; =============== S U B R O U T I N E =======================================
.text:100021B0
.text:100021B0
.text:100021B0						       sub_100021B0    proc near	       ; CODE XREF: sub_10003160+F9p
.text:100021B0 56							       push    esi
.text:100021B1 8B 71 0C							       mov     esi, [ecx+0Ch]
.text:100021B4 85 F6							       test    esi, esi
.text:100021B6 74 24							       jz      short loc_100021DC
.text:100021B8 57							       push    edi
.text:100021B9
.text:100021B9						       loc_100021B9:			       ; CODE XREF: sub_100021B0+25j
.text:100021B9 8B C6							       mov     eax, esi
.text:100021BB 8B 36							       mov     esi, [esi]
.text:100021BD 8B 78 08							       mov     edi, [eax+8]
.text:100021C0 8B 4F 04							       mov     ecx, [edi+4]
.text:100021C3 85 C9							       test    ecx, ecx
.text:100021C5 74 05							       jz      short loc_100021CC
.text:100021C7 8B 01							       mov     eax, [ecx]
.text:100021C9 FF 50 54							       call    dword ptr [eax+54h]
.text:100021CC
.text:100021CC						       loc_100021CC:			       ; CODE XREF: sub_100021B0+15j
.text:100021CC 85 F6							       test    esi, esi
.text:100021CE C7 47 04	00 00 00 00					       mov     dword ptr [edi+4], 0
.text:100021D5 75 E2							       jnz     short loc_100021B9
.text:100021D7 5F							       pop     edi
.text:100021D8 33 C0							       xor     eax, eax
.text:100021DA 5E							       pop     esi
.text:100021DB C3							       retn
.text:100021DC						       ; ---------------------------------------------------------------------------
.text:100021DC
.text:100021DC						       loc_100021DC:			       ; CODE XREF: sub_100021B0+6j
.text:100021DC 33 C0							       xor     eax, eax
.text:100021DE 5E							       pop     esi
.text:100021DF C3							       retn
.text:100021DF						       sub_100021B0    endp
.text:100021DF
.text:100021E0
.text:100021E0						       ; =============== S U B R O U T I N E =======================================
.text:100021E0
.text:100021E0
.text:100021E0						       sub_100021E0    proc near	       ; CODE XREF: sub_100022C0+6F7p
.text:100021E0											       ; sub_100022C0+760p
.text:100021E0
.text:100021E0						       arg_0	       = dword ptr  4
.text:100021E0
.text:100021E0 8B 41 4C							       mov     eax, [ecx+4Ch]
.text:100021E3 85 C0							       test    eax, eax
.text:100021E5 74 0D							       jz      short loc_100021F4
.text:100021E7 8B 4C 24	04						       mov     ecx, [esp+arg_0]
.text:100021EB 51							       push    ecx
.text:100021EC 8D 48 10							       lea     ecx, [eax+10h]
.text:100021EF E8 0A 18	00 00						       call    ??4CString@@QAEABV0@PBD@Z ; CString::operator=(char const *)
.text:100021F4
.text:100021F4						       loc_100021F4:			       ; CODE XREF: sub_100021E0+5j
.text:100021F4 33 C0							       xor     eax, eax
.text:100021F6 C2 04 00							       retn    4
.text:100021F6						       sub_100021E0    endp
.text:100021F6
.text:100021F6						       ; ---------------------------------------------------------------------------
.text:100021F9 90 90 90	90 90 90 90					       align 10h
.text:10002200
.text:10002200						       ; =============== S U B R O U T I N E =======================================
.text:10002200
.text:10002200
.text:10002200						       sub_10002200    proc near	       ; CODE XREF: sub_100022C0+7B5p
.text:10002200 8B 49 4C							       mov     ecx, [ecx+4Ch]
.text:10002203 85 C9							       test    ecx, ecx
.text:10002205 74 05							       jz      short loc_1000220C
.text:10002207 E8 14 FD	FF FF						       call    sub_10001F20
.text:1000220C
.text:1000220C						       loc_1000220C:			       ; CODE XREF: sub_10002200+5j
.text:1000220C 33 C0							       xor     eax, eax
.text:1000220E C3							       retn
.text:1000220E						       sub_10002200    endp
.text:1000220E
.text:1000220E						       ; ---------------------------------------------------------------------------
.text:1000220F 90							       align 10h
.text:10002210
.text:10002210						       ; =============== S U B R O U T I N E =======================================
.text:10002210
.text:10002210
.text:10002210						       sub_10002210    proc near	       ; DATA XREF: .rdata:100051F8o
.text:10002210 56							       push    esi
.text:10002211 8B 71 0C							       mov     esi, [ecx+0Ch]
.text:10002214 85 F6							       test    esi, esi
.text:10002216 74 10							       jz      short loc_10002228
.text:10002218
.text:10002218						       loc_10002218:			       ; CODE XREF: sub_10002210+16j
.text:10002218 8B C6							       mov     eax, esi
.text:1000221A 8B 36							       mov     esi, [esi]
.text:1000221C 8B 48 08							       mov     ecx, [eax+8]
.text:1000221F E8 FC FC	FF FF						       call    sub_10001F20
.text:10002224 85 F6							       test    esi, esi
.text:10002226 75 F0							       jnz     short loc_10002218
.text:10002228
.text:10002228						       loc_10002228:			       ; CODE XREF: sub_10002210+6j
.text:10002228 33 C0							       xor     eax, eax
.text:1000222A 5E							       pop     esi
.text:1000222B C3							       retn
.text:1000222B						       sub_10002210    endp
.text:1000222B
.text:1000222B						       ; ---------------------------------------------------------------------------
.text:1000222C 90 90 90	90						       align 10h
.text:10002230
.text:10002230						       ; =============== S U B R O U T I N E =======================================
.text:10002230
.text:10002230
.text:10002230						       sub_10002230    proc near	       ; CODE XREF: .text:10002BF6p
.text:10002230
.text:10002230						       arg_0	       = dword ptr  4
.text:10002230
.text:10002230 56							       push    esi
.text:10002231 8B 71 0C							       mov     esi, [ecx+0Ch]
.text:10002234 85 F6							       test    esi, esi
.text:10002236 74 1D							       jz      short loc_10002255
.text:10002238 57							       push    edi
.text:10002239 8B 7C 24	0C						       mov     edi, [esp+8+arg_0]
.text:1000223D
.text:1000223D						       loc_1000223D:			       ; CODE XREF: sub_10002230+1Cj
.text:1000223D 8B C6							       mov     eax, esi
.text:1000223F 8B 36							       mov     esi, [esi]
.text:10002241 57							       push    edi
.text:10002242 8B 48 08							       mov     ecx, [eax+8]
.text:10002245 8B 01							       mov     eax, [ecx]
.text:10002247 FF 50 20							       call    dword ptr [eax+20h]
.text:1000224A 85 F6							       test    esi, esi
.text:1000224C 75 EF							       jnz     short loc_1000223D
.text:1000224E 5F							       pop     edi
.text:1000224F 33 C0							       xor     eax, eax
.text:10002251 5E							       pop     esi
.text:10002252 C2 04 00							       retn    4
.text:10002255						       ; ---------------------------------------------------------------------------
.text:10002255
.text:10002255						       loc_10002255:			       ; CODE XREF: sub_10002230+6j
.text:10002255 33 C0							       xor     eax, eax
.text:10002257 5E							       pop     esi
.text:10002258 C2 04 00							       retn    4
.text:10002258						       sub_10002230    endp
.text:10002258
.text:10002258						       ; ---------------------------------------------------------------------------
.text:1000225B 90 90 90	90 90						       align 10h
.text:10002260
.text:10002260						       ; =============== S U B R O U T I N E =======================================
.text:10002260
.text:10002260
.text:10002260						       sub_10002260    proc near	       ; CODE XREF: sub_100020C0+96p
.text:10002260 8B 41 38							       mov     eax, [ecx+38h]
.text:10002263 56							       push    esi
.text:10002264 85 C0							       test    eax, eax
.text:10002266 75 17							       jnz     short loc_1000227F
.text:10002268 8B 71 0C							       mov     esi, [ecx+0Ch]
.text:1000226B 85 F6							       test    esi, esi
.text:1000226D 74 10							       jz      short loc_1000227F
.text:1000226F
.text:1000226F						       loc_1000226F:			       ; CODE XREF: sub_10002260+1Dj
.text:1000226F 8B C6							       mov     eax, esi
.text:10002271 8B 36							       mov     esi, [esi]
.text:10002273 8B 48 08							       mov     ecx, [eax+8]
.text:10002276 8B 01							       mov     eax, [ecx]
.text:10002278 FF 50 14							       call    dword ptr [eax+14h]
.text:1000227B 85 F6							       test    esi, esi
.text:1000227D 75 F0							       jnz     short loc_1000226F
.text:1000227F
.text:1000227F						       loc_1000227F:			       ; CODE XREF: sub_10002260+6j
.text:1000227F											       ; sub_10002260+Dj
.text:1000227F 33 C0							       xor     eax, eax
.text:10002281 5E							       pop     esi
.text:10002282 C3							       retn
.text:10002282						       sub_10002260    endp
.text:10002282
.text:10002282						       ; ---------------------------------------------------------------------------
.text:10002283 90 90 90	90 90 90 90 90 90 90 90	90 90			       align 10h
.text:10002290
.text:10002290						       ; =============== S U B R O U T I N E =======================================
.text:10002290
.text:10002290
.text:10002290						       sub_10002290    proc near	       ; CODE XREF: sub_10003160+F2p
.text:10002290 8B 41 38							       mov     eax, [ecx+38h]
.text:10002293 56							       push    esi
.text:10002294 85 C0							       test    eax, eax
.text:10002296 75 17							       jnz     short loc_100022AF
.text:10002298 8B 71 0C							       mov     esi, [ecx+0Ch]
.text:1000229B 85 F6							       test    esi, esi
.text:1000229D 74 10							       jz      short loc_100022AF
.text:1000229F
.text:1000229F						       loc_1000229F:			       ; CODE XREF: sub_10002290+1Dj
.text:1000229F 8B C6							       mov     eax, esi
.text:100022A1 8B 36							       mov     esi, [esi]
.text:100022A3 8B 48 08							       mov     ecx, [eax+8]
.text:100022A6 8B 01							       mov     eax, [ecx]
.text:100022A8 FF 50 18							       call    dword ptr [eax+18h]
.text:100022AB 85 F6							       test    esi, esi
.text:100022AD 75 F0							       jnz     short loc_1000229F
.text:100022AF
.text:100022AF						       loc_100022AF:			       ; CODE XREF: sub_10002290+6j
.text:100022AF											       ; sub_10002290+Dj
.text:100022AF 33 C0							       xor     eax, eax
.text:100022B1 5E							       pop     esi
.text:100022B2 C3							       retn
.text:100022B2						       sub_10002290    endp
.text:100022B2
.text:100022B2						       ; ---------------------------------------------------------------------------
.text:100022B3 90 90 90	90 90 90 90 90 90 90 90	90 90			       align 10h
.text:100022C0
.text:100022C0						       ; =============== S U B R O U T I N E =======================================
.text:100022C0
.text:100022C0
.text:100022C0						       ; int __stdcall sub_100022C0(int, char *Str)
.text:100022C0						       sub_100022C0    proc near	       ; CODE XREF: .text:10002C13p
.text:100022C0
.text:100022C0						       var_6C	       = dword ptr -6Ch
.text:100022C0						       var_68	       = dword ptr -68h
.text:100022C0						       var_64	       = dword ptr -64h
.text:100022C0						       var_60	       = dword ptr -60h
.text:100022C0						       var_5C	       = dword ptr -5Ch
.text:100022C0						       var_58	       = dword ptr -58h
.text:100022C0						       var_54	       = byte ptr -54h
.text:100022C0						       var_50	       = byte ptr -50h
.text:100022C0						       var_4C	       = byte ptr -4Ch
.text:100022C0						       var_48	       = byte ptr -48h
.text:100022C0						       var_44	       = byte ptr -44h
.text:100022C0						       var_40	       = dword ptr -40h
.text:100022C0						       var_3C	       = dword ptr -3Ch
.text:100022C0						       var_38	       = byte ptr -38h
.text:100022C0						       var_34	       = byte ptr -34h
.text:100022C0						       var_30	       = dword ptr -30h
.text:100022C0						       var_2C	       = dword ptr -2Ch
.text:100022C0						       var_28	       = dword ptr -28h
.text:100022C0						       var_24	       = byte ptr -24h
.text:100022C0						       var_20	       = byte ptr -20h
.text:100022C0						       var_1C	       = dword ptr -1Ch
.text:100022C0						       var_18	       = dword ptr -18h
.text:100022C0						       var_14	       = dword ptr -14h
.text:100022C0						       var_10	       = dword ptr -10h
.text:100022C0						       var_C	       = dword ptr -0Ch
.text:100022C0						       var_4	       = dword ptr -4
.text:100022C0						       arg_0	       = dword ptr  4
.text:100022C0						       Str	       = dword ptr  8
.text:100022C0
.text:100022C0 6A FF							       push    0FFFFFFFFh
.text:100022C2 68 EB 40	00 10						       push    offset SEH_100022C0
.text:100022C7 64 A1 00	00 00 00					       mov     eax, large fs:0
.text:100022CD 50							       push    eax
.text:100022CE 64 89 25	00 00 00 00					       mov     large fs:0, esp
.text:100022D5 83 EC 60							       sub     esp, 60h
.text:100022D8 8B 44 24	70						       mov     eax, [esp+6Ch+arg_0]
.text:100022DC 53							       push    ebx
.text:100022DD 55							       push    ebp
.text:100022DE 56							       push    esi
.text:100022DF 57							       push    edi
.text:100022E0 8B F9							       mov     edi, ecx
.text:100022E2 85 C0							       test    eax, eax
.text:100022E4 89 7C 24	10						       mov     [esp+7Ch+var_6C], edi
.text:100022E8 C7 44 24	14 00 00 00 00					       mov     [esp+7Ch+var_68], 0
.text:100022F0 0F 8E B9	07 00 00					       jle     loc_10002AAF
.text:100022F6 8B B4 24	84 00 00 00					       mov     esi, [esp+7Ch+Str]
.text:100022FD 85 F6							       test    esi, esi
.text:100022FF 0F 84 AA	07 00 00					       jz      loc_10002AAF
.text:10002305 8D 5F 50							       lea     ebx, [edi+50h]
.text:10002308 56							       push    esi
.text:10002309 8B CB							       mov     ecx, ebx
.text:1000230B C6 04 30	00						       mov     byte ptr	[eax+esi], 0
.text:1000230F E8 26 17	00 00						       call    ??YCString@@QAEABV0@PBD@Z ; CString::operator+=(char const *)
.text:10002314 8B 2D 38	51 00 10					       mov     ebp, ds:strstr
.text:1000231A 68 84 60	00 10						       push    offset aOk      ; "OK"
.text:1000231F 56							       push    esi	       ; Str
.text:10002320 FF D5							       call    ebp ; strstr
.text:10002322 83 C4 08							       add     esp, 8
.text:10002325 85 C0							       test    eax, eax
.text:10002327 75 13							       jnz     short loc_1000233C
.text:10002329 68 7C 60	00 10						       push    offset aError   ; "ERROR"
.text:1000232E 56							       push    esi	       ; Str
.text:1000232F FF D5							       call    ebp ; strstr
.text:10002331 83 C4 08							       add     esp, 8
.text:10002334 85 C0							       test    eax, eax
.text:10002336 0F 84 78	07 00 00					       jz      loc_10002AB4
.text:1000233C
.text:1000233C						       loc_1000233C:			       ; CODE XREF: sub_100022C0+67j
.text:1000233C 8D 8C 24	84 00 00 00					       lea     ecx, [esp+7Ch+Str] ; this
.text:10002343 E8 3E 16	00 00						       call    ??0CString@@QAE@XZ ; CString::CString(void)
.text:10002348 68 8C 39	00 10						       push    offset ??1CString@@QAE@XZ ; CString::~CString(void)
.text:1000234D 68 86 39	00 10						       push    offset ??0CString@@QAE@XZ ; CString::CString(void)
.text:10002352 6A 03							       push    3
.text:10002354 8D 44 24	70						       lea     eax, [esp+88h+var_18]
.text:10002358 33 F6							       xor     esi, esi
.text:1000235A 6A 04							       push    4
.text:1000235C 50							       push    eax
.text:1000235D 89 B4 24	8C 00 00 00					       mov     [esp+90h+var_4],	esi
.text:10002364 E8 F5 16	00 00						       call    sub_10003A5E
.text:10002369 8B 0B							       mov     ecx, [ebx]
.text:1000236B 8B 2D 44	51 00 10					       mov     ebp, ds:_mbscmp
.text:10002371 C6 44 24	78 01						       mov     byte ptr	[esp+7Ch+var_4], 1
.text:10002376 89 B4 24	80 00 00 00					       mov     [esp+7Ch+arg_0],	esi
.text:1000237D 8B 41 F8							       mov     eax, [ecx-8]
.text:10002380 89 74 24	1C						       mov     [esp+7Ch+var_60], esi
.text:10002384 3B C6							       cmp     eax, esi
.text:10002386 89 74 24	18						       mov     [esp+7Ch+var_64], esi
.text:1000238A 0F 8E 54	05 00 00					       jle     loc_100028E4
.text:10002390
.text:10002390						       loc_10002390:			       ; CODE XREF: sub_100022C0+61Cj
.text:10002390 8B 94 24	80 00 00 00					       mov     edx, [esp+7Ch+arg_0]
.text:10002397 8B CB							       mov     ecx, ebx	       ; this
.text:10002399 52							       push    edx	       ; int
.text:1000239A 6A 0A							       push    0Ah	       ; char
.text:1000239C E8 93 16	00 00						       call    ?Find@CString@@QBEHDH@Z ; CString::Find(char,int)
.text:100023A1 8B F0							       mov     esi, eax
.text:100023A3 85 F6							       test    esi, esi
.text:100023A5 89 74 24	24						       mov     [esp+7Ch+var_58], esi
.text:100023A9 0F 8C 33	05 00 00					       jl      loc_100028E2
.text:100023AF 75 0C							       jnz     short loc_100023BD
.text:100023B1 FF 84 24	80 00 00 00					       inc     [esp+7Ch+arg_0]
.text:100023B8 E9 16 05	00 00						       jmp     loc_100028D3
.text:100023BD						       ; ---------------------------------------------------------------------------
.text:100023BD
.text:100023BD						       loc_100023BD:			       ; CODE XREF: sub_100022C0+EFj
.text:100023BD 8B 84 24	80 00 00 00					       mov     eax, [esp+7Ch+arg_0]
.text:100023C4 8B CE							       mov     ecx, esi
.text:100023C6 2B C8							       sub     ecx, eax
.text:100023C8 8D 54 24	28						       lea     edx, [esp+7Ch+var_54]
.text:100023CC 51							       push    ecx
.text:100023CD 50							       push    eax
.text:100023CE 52							       push    edx
.text:100023CF 8B CB							       mov     ecx, ebx
.text:100023D1 E8 58 16	00 00						       call    ?Mid@CString@@QBE?AV1@HH@Z ; CString::Mid(int,int)
.text:100023D6 50							       push    eax
.text:100023D7 8D 8C 24	88 00 00 00					       lea     ecx, [esp+80h+Str]
.text:100023DE C6 44 24	7C 02						       mov     byte ptr	[esp+80h+var_4], 2
.text:100023E3 E8 22 16	00 00						       call    ??4CString@@QAEABV0@ABV0@@Z ; CString::operator=(CString	const &)
.text:100023E8 8D 4C 24	28						       lea     ecx, [esp+7Ch+var_54] ; this
.text:100023EC C6 44 24	78 01						       mov     byte ptr	[esp+7Ch+var_4], 1
.text:100023F1 E8 96 15	00 00						       call    ??1CString@@QAE@XZ ; CString::~CString(void)
.text:100023F6 8B 84 24	84 00 00 00					       mov     eax, [esp+7Ch+Str]
.text:100023FD 8B 48 F8							       mov     ecx, [eax-8]
.text:10002400 85 C9							       test    ecx, ecx
.text:10002402 0F 84 C1	00 00 00					       jz      loc_100024C9
.text:10002408
.text:10002408						       loc_10002408:			       ; CODE XREF: sub_100022C0+203j
.text:10002408 8D 4C 24	30						       lea     ecx, [esp+7Ch+var_4C]
.text:1000240C 6A 01							       push    1
.text:1000240E 51							       push    ecx
.text:1000240F 8D 8C 24	8C 00 00 00					       lea     ecx, [esp+84h+Str]
.text:10002416 E8 07 16	00 00						       call    ?Right@CString@@QBE?AV1@H@Z ; CString::Right(int)
.text:1000241B 8B 00							       mov     eax, [eax]
.text:1000241D 68 78 60	00 10						       push    offset byte_10006078 ; unsigned __int8 *
.text:10002422 50							       push    eax	       ; unsigned __int8 *
.text:10002423 C6 84 24	80 00 00 00 03					       mov     byte ptr	[esp+84h+var_4], 3
.text:1000242B FF D5							       call    ebp ; _mbscmp
.text:1000242D 83 C4 08							       add     esp, 8
.text:10002430 85 C0							       test    eax, eax
.text:10002432 74 32							       jz      short loc_10002466
.text:10002434 8D 54 24	2C						       lea     edx, [esp+7Ch+var_50]
.text:10002438 6A 01							       push    1
.text:1000243A 52							       push    edx
.text:1000243B 8D 8C 24	8C 00 00 00					       lea     ecx, [esp+84h+Str]
.text:10002442 E8 DB 15	00 00						       call    ?Right@CString@@QBE?AV1@H@Z ; CString::Right(int)
.text:10002447 8B 00							       mov     eax, [eax]
.text:10002449 68 74 60	00 10						       push    offset asc_10006074 ; "\n"
.text:1000244E 50							       push    eax	       ; unsigned __int8 *
.text:1000244F FF D5							       call    ebp ; _mbscmp
.text:10002451 83 C4 08							       add     esp, 8
.text:10002454 8D 4C 24	2C						       lea     ecx, [esp+7Ch+var_50] ; this
.text:10002458 85 C0							       test    eax, eax
.text:1000245A 0F 94 C3							       setz    bl
.text:1000245D E8 2A 15	00 00						       call    ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10002462 84 DB							       test    bl, bl
.text:10002464 74 02							       jz      short loc_10002468
.text:10002466
.text:10002466						       loc_10002466:			       ; CODE XREF: sub_100022C0+172j
.text:10002466 B3 01							       mov     bl, 1
.text:10002468
.text:10002468						       loc_10002468:			       ; CODE XREF: sub_100022C0+1A4j
.text:10002468 8D 4C 24	30						       lea     ecx, [esp+7Ch+var_4C] ; this
.text:1000246C C6 44 24	78 01						       mov     byte ptr	[esp+7Ch+var_4], 1
.text:10002471 E8 16 15	00 00						       call    ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10002476 84 DB							       test    bl, bl
.text:10002478 74 4F							       jz      short loc_100024C9
.text:1000247A 8B 84 24	84 00 00 00					       mov     eax, [esp+7Ch+Str]
.text:10002481 8D 4C 24	34						       lea     ecx, [esp+7Ch+var_48]
.text:10002485 8B 40 F8							       mov     eax, [eax-8]
.text:10002488 48							       dec     eax
.text:10002489 50							       push    eax
.text:1000248A 51							       push    ecx
.text:1000248B 8D 8C 24	8C 00 00 00					       lea     ecx, [esp+84h+Str]
.text:10002492 E8 91 15	00 00						       call    ?Left@CString@@QBE?AV1@H@Z ; CString::Left(int)
.text:10002497 50							       push    eax
.text:10002498 8D 8C 24	88 00 00 00					       lea     ecx, [esp+80h+Str]
.text:1000249F C6 44 24	7C 04						       mov     byte ptr	[esp+80h+var_4], 4
.text:100024A4 E8 61 15	00 00						       call    ??4CString@@QAEABV0@ABV0@@Z ; CString::operator=(CString	const &)
.text:100024A9 8D 4C 24	34						       lea     ecx, [esp+7Ch+var_48] ; this
.text:100024AD C6 44 24	78 01						       mov     byte ptr	[esp+7Ch+var_4], 1
.text:100024B2 E8 D5 14	00 00						       call    ??1CString@@QAE@XZ ; CString::~CString(void)
.text:100024B7 8B 94 24	84 00 00 00					       mov     edx, [esp+7Ch+Str]
.text:100024BE 8B 42 F8							       mov     eax, [edx-8]
.text:100024C1 85 C0							       test    eax, eax
.text:100024C3 0F 85 3F	FF FF FF					       jnz     loc_10002408
.text:100024C9
.text:100024C9						       loc_100024C9:			       ; CODE XREF: sub_100022C0+142j
.text:100024C9											       ; sub_100022C0+1B8j
.text:100024C9 8B 8C 24	84 00 00 00					       mov     ecx, [esp+7Ch+Str]
.text:100024D0 8D 46 01							       lea     eax, [esi+1]
.text:100024D3 89 84 24	80 00 00 00					       mov     [esp+7Ch+arg_0],	eax
.text:100024DA 8B 41 F8							       mov     eax, [ecx-8]
.text:100024DD 85 C0							       test    eax, eax
.text:100024DF 0F 84 EE	03 00 00					       jz      loc_100028D3
.text:100024E5 8D 54 24	38						       lea     edx, [esp+7Ch+var_44]
.text:100024E9 6A 02							       push    2
.text:100024EB 52							       push    edx
.text:100024EC 8D 8C 24	8C 00 00 00					       lea     ecx, [esp+84h+Str]
.text:100024F3 E8 30 15	00 00						       call    ?Left@CString@@QBE?AV1@H@Z ; CString::Left(int)
.text:100024F8 8B 00							       mov     eax, [eax]
.text:100024FA 68 70 60	00 10						       push    offset aAt      ; "AT"
.text:100024FF 50							       push    eax	       ; unsigned __int8 *
.text:10002500 FF D5							       call    ebp ; _mbscmp
.text:10002502 83 C4 08							       add     esp, 8
.text:10002505 8D 4C 24	38						       lea     ecx, [esp+7Ch+var_44] ; this
.text:10002509 85 C0							       test    eax, eax
.text:1000250B 0F 94 C3							       setz    bl
.text:1000250E E8 79 14	00 00						       call    ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10002513 84 DB							       test    bl, bl
.text:10002515 0F 84 98	00 00 00					       jz      loc_100025B3
.text:1000251B 6A 05							       push    5
.text:1000251D 8D 44 24	40						       lea     eax, [esp+80h+var_40]
.text:10002521 6A 02							       push    2
.text:10002523 50							       push    eax
.text:10002524 8D 8C 24	90 00 00 00					       lea     ecx, [esp+88h+Str]
.text:1000252B E8 FE 14	00 00						       call    ?Mid@CString@@QBE?AV1@HH@Z ; CString::Mid(int,int)
.text:10002530 8B 00							       mov     eax, [eax]
.text:10002532 68 68 60	00 10						       push    offset a@lbc?   ; "@LBC?"
.text:10002537 50							       push    eax	       ; unsigned __int8 *
.text:10002538 FF D5							       call    ebp ; _mbscmp
.text:1000253A 83 C4 08							       add     esp, 8
.text:1000253D 8D 4C 24	3C						       lea     ecx, [esp+7Ch+var_40] ; this
.text:10002541 85 C0							       test    eax, eax
.text:10002543 0F 94 C3							       setz    bl
.text:10002546 E8 41 14	00 00						       call    ??1CString@@QAE@XZ ; CString::~CString(void)
.text:1000254B 84 DB							       test    bl, bl
.text:1000254D 74 15							       jz      short loc_10002564
.text:1000254F C7 44 24	1C 01 00 00 00					       mov     [esp+7Ch+var_60], 1
.text:10002557 C7 44 24	18 00 00 00 00					       mov     [esp+7Ch+var_64], 0
.text:1000255F E9 6F 03	00 00						       jmp     loc_100028D3
.text:10002564						       ; ---------------------------------------------------------------------------
.text:10002564
.text:10002564						       loc_10002564:			       ; CODE XREF: sub_100022C0+28Dj
.text:10002564 6A 05							       push    5
.text:10002566 8D 4C 24	44						       lea     ecx, [esp+80h+var_3C]
.text:1000256A 6A 02							       push    2
.text:1000256C 51							       push    ecx
.text:1000256D 8D 8C 24	90 00 00 00					       lea     ecx, [esp+88h+Str]
.text:10002574 E8 B5 14	00 00						       call    ?Mid@CString@@QBE?AV1@HH@Z ; CString::Mid(int,int)
.text:10002579 8B 00							       mov     eax, [eax]
.text:1000257B 68 60 60	00 10						       push    offset aLbc2    ; "LBC2"
.text:10002580 50							       push    eax	       ; unsigned __int8 *
.text:10002581 FF D5							       call    ebp ; _mbscmp
.text:10002583 83 C4 08							       add     esp, 8
.text:10002586 8D 4C 24	40						       lea     ecx, [esp+7Ch+var_3C] ; this
.text:1000258A 85 C0							       test    eax, eax
.text:1000258C 0F 94 C3							       setz    bl
.text:1000258F E8 F8 13	00 00						       call    ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10002594 84 DB							       test    bl, bl
.text:10002596 0F 84 37	03 00 00					       jz      loc_100028D3
.text:1000259C 8B 47 2C							       mov     eax, [edi+2Ch]
.text:1000259F 85 C0							       test    eax, eax
.text:100025A1 0F 84 2C	03 00 00					       jz      loc_100028D3
.text:100025A7 50							       push    eax	       ; hEvent
.text:100025A8 FF 15 54	50 00 10					       call    ds:SetEvent
.text:100025AE E9 20 03	00 00						       jmp     loc_100028D3
.text:100025B3						       ; ---------------------------------------------------------------------------
.text:100025B3
.text:100025B3						       loc_100025B3:			       ; CODE XREF: sub_100022C0+255j
.text:100025B3 8D 54 24	44						       lea     edx, [esp+7Ch+var_38]
.text:100025B7 6A 02							       push    2
.text:100025B9 52							       push    edx
.text:100025BA 8D 8C 24	8C 00 00 00					       lea     ecx, [esp+84h+Str]
.text:100025C1 E8 62 14	00 00						       call    ?Left@CString@@QBE?AV1@H@Z ; CString::Left(int)
.text:100025C6 8B 00							       mov     eax, [eax]
.text:100025C8 68 84 60	00 10						       push    offset aOk      ; "OK"
.text:100025CD 50							       push    eax	       ; unsigned __int8 *
.text:100025CE FF D5							       call    ebp ; _mbscmp
.text:100025D0 83 C4 08							       add     esp, 8
.text:100025D3 8D 4C 24	44						       lea     ecx, [esp+7Ch+var_38] ; this
.text:100025D7 85 C0							       test    eax, eax
.text:100025D9 0F 94 C3							       setz    bl
.text:100025DC E8 AB 13	00 00						       call    ??1CString@@QAE@XZ ; CString::~CString(void)
.text:100025E1 84 DB							       test    bl, bl
.text:100025E3 0F 85 EA	02 00 00					       jnz     loc_100028D3
.text:100025E9 8D 44 24	48						       lea     eax, [esp+7Ch+var_34]
.text:100025ED 6A 05							       push    5
.text:100025EF 50							       push    eax
.text:100025F0 8D 8C 24	8C 00 00 00					       lea     ecx, [esp+84h+Str]
.text:100025F7 E8 2C 14	00 00						       call    ?Left@CString@@QBE?AV1@H@Z ; CString::Left(int)
.text:100025FC 8B 00							       mov     eax, [eax]
.text:100025FE 68 7C 60	00 10						       push    offset aError   ; "ERROR"
.text:10002603 50							       push    eax	       ; unsigned __int8 *
.text:10002604 FF D5							       call    ebp ; _mbscmp
.text:10002606 83 C4 08							       add     esp, 8
.text:10002609 8D 4C 24	48						       lea     ecx, [esp+7Ch+var_34] ; this
.text:1000260D 85 C0							       test    eax, eax
.text:1000260F 0F 94 C3							       setz    bl
.text:10002612 E8 75 13	00 00						       call    ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10002617 84 DB							       test    bl, bl
.text:10002619 74 08							       jz      short loc_10002623
.text:1000261B C7 44 24	14 01 00 00 01					       mov     [esp+7Ch+var_68], 1000001h
.text:10002623
.text:10002623						       loc_10002623:			       ; CODE XREF: sub_100022C0+359j
.text:10002623 8B 44 24	1C						       mov     eax, [esp+7Ch+var_60]
.text:10002627 85 C0							       test    eax, eax
.text:10002629 0F 84 A4	02 00 00					       jz      loc_100028D3
.text:1000262F 8B 5C 24	18						       mov     ebx, [esp+7Ch+var_64]
.text:10002633 83 FB 03							       cmp     ebx, 3
.text:10002636 0F 8D 97	02 00 00					       jge     loc_100028D3
.text:1000263C 8D 8C 24	84 00 00 00					       lea     ecx, [esp+7Ch+Str]
.text:10002643 51							       push    ecx
.text:10002644 8D 4C 9C	68						       lea     ecx, [esp+ebx*4+80h+var_18]
.text:10002648 E8 BD 13	00 00						       call    ??4CString@@QAEABV0@ABV0@@Z ; CString::operator=(CString	const &)
.text:1000264D 43							       inc     ebx
.text:1000264E 83 FB 03							       cmp     ebx, 3
.text:10002651 89 5C 24	18						       mov     [esp+7Ch+var_64], ebx
.text:10002655 0F 85 E1	01 00 00					       jnz     loc_1000283C
.text:1000265B 8B 54 24	64						       mov     edx, [esp+7Ch+var_18]
.text:1000265F 68 5C 60	00 10						       push    offset byte_1000605C ; unsigned __int8 *
.text:10002664 52							       push    edx	       ; unsigned __int8 *
.text:10002665 FF D5							       call    ebp ; _mbscmp
.text:10002667 83 C4 08							       add     esp, 8
.text:1000266A 85 C0							       test    eax, eax
.text:1000266C 0F 84 CA	01 00 00					       jz      loc_1000283C
.text:10002672 8B 44 24	68						       mov     eax, [esp+7Ch+var_14]
.text:10002676 68 5C 60	00 10						       push    offset byte_1000605C ; unsigned __int8 *
.text:1000267B 50							       push    eax	       ; unsigned __int8 *
.text:1000267C FF D5							       call    ebp ; _mbscmp
.text:1000267E 83 C4 08							       add     esp, 8
.text:10002681 85 C0							       test    eax, eax
.text:10002683 0F 84 B3	01 00 00					       jz      loc_1000283C
.text:10002689 8B 4C 24	6C						       mov     ecx, [esp+7Ch+var_10]
.text:1000268D 68 5C 60	00 10						       push    offset byte_1000605C ; unsigned __int8 *
.text:10002692 51							       push    ecx	       ; unsigned __int8 *
.text:10002693 FF D5							       call    ebp ; _mbscmp
.text:10002695 83 C4 08							       add     esp, 8
.text:10002698 85 C0							       test    eax, eax
.text:1000269A 0F 84 9C	01 00 00					       jz      loc_1000283C
.text:100026A0 8B 54 24	68						       mov     edx, [esp+7Ch+var_14]
.text:100026A4 8B 47 44							       mov     eax, [edi+44h]
.text:100026A7 52							       push    edx	       ; unsigned __int8 *
.text:100026A8 50							       push    eax	       ; unsigned __int8 *
.text:100026A9 FF D5							       call    ebp ; _mbscmp
.text:100026AB 83 C4 08							       add     esp, 8
.text:100026AE 85 C0							       test    eax, eax
.text:100026B0 75 16							       jnz     short loc_100026C8
.text:100026B2 8B 4C 24	6C						       mov     ecx, [esp+7Ch+var_10]
.text:100026B6 8B 47 48							       mov     eax, [edi+48h]
.text:100026B9 51							       push    ecx	       ; unsigned __int8 *
.text:100026BA 50							       push    eax	       ; unsigned __int8 *
.text:100026BB FF D5							       call    ebp ; _mbscmp
.text:100026BD 83 C4 08							       add     esp, 8
.text:100026C0 85 C0							       test    eax, eax
.text:100026C2 0F 84 74	01 00 00					       jz      loc_1000283C
.text:100026C8
.text:100026C8						       loc_100026C8:			       ; CODE XREF: sub_100022C0+3F0j
.text:100026C8 8B 7F 0C							       mov     edi, [edi+0Ch]
.text:100026CB 85 FF							       test    edi, edi
.text:100026CD 0F 84 8E	00 00 00					       jz      loc_10002761
.text:100026D3
.text:100026D3						       loc_100026D3:			       ; CODE XREF: sub_100022C0+499j
.text:100026D3 8B 5C 24	10						       mov     ebx, [esp+7Ch+var_6C]
.text:100026D7 8B C7							       mov     eax, edi
.text:100026D9 8B 3F							       mov     edi, [edi]
.text:100026DB 8B 70 08							       mov     esi, [eax+8]
.text:100026DE 8B 43 3C							       mov     eax, [ebx+3Ch]
.text:100026E1 85 C0							       test    eax, eax
.text:100026E3 74 72							       jz      short loc_10002757
.text:100026E5 51							       push    ecx
.text:100026E6 8D 53 48							       lea     edx, [ebx+48h]
.text:100026E9 8B CC							       mov     ecx, esp
.text:100026EB 89 64 24	50						       mov     [esp+80h+var_30], esp
.text:100026EF 52							       push    edx
.text:100026F0 E8 F7 12	00 00						       call    ??0CString@@QAE@ABV0@@Z ; CString::CString(CString const	&)
.text:100026F5 51							       push    ecx
.text:100026F6 8D 43 44							       lea     eax, [ebx+44h]
.text:100026F9 8B CC							       mov     ecx, esp
.text:100026FB 89 64 24	58						       mov     [esp+84h+var_2C], esp
.text:100026FF 50							       push    eax
.text:10002700 C6 84 24	84 00 00 00 05					       mov     byte ptr	[esp+88h+var_4], 5
.text:10002708 E8 DF 12	00 00						       call    ??0CString@@QAE@ABV0@@Z ; CString::CString(CString const	&)
.text:1000270D 51							       push    ecx
.text:1000270E 8D 43 40							       lea     eax, [ebx+40h]
.text:10002711 8B CC							       mov     ecx, esp
.text:10002713 89 64 24	60						       mov     [esp+88h+var_28], esp
.text:10002717 50							       push    eax
.text:10002718 C6 84 24	88 00 00 00 06					       mov     byte ptr	[esp+8Ch+var_4], 6
.text:10002720 E8 C7 12	00 00						       call    ??0CString@@QAE@ABV0@@Z ; CString::CString(CString const	&)
.text:10002725 8B 16							       mov     edx, [esi]
.text:10002727 51							       push    ecx
.text:10002728 83 C3 54							       add     ebx, 54h
.text:1000272B 8B CC							       mov     ecx, esp
.text:1000272D 89 64 24	24						       mov     [esp+8Ch+var_68], esp
.text:10002731 53							       push    ebx
.text:10002732 C6 84 24	8C 00 00 00 01					       mov     byte ptr	[esp+90h+var_4], 1
.text:1000273A 89 54 24	28						       mov     [esp+90h+var_68], edx
.text:1000273E E8 8D 03	00 00						       call    sub_10002AD0
.text:10002743 8B 54 24	24						       mov     edx, [esp+8Ch+var_68]
.text:10002747 8B CE							       mov     ecx, esi
.text:10002749 FF 52 1C							       call    dword ptr [edx+1Ch]
.text:1000274C 8B CE							       mov     ecx, esi
.text:1000274E E8 CD F7	FF FF						       call    sub_10001F20
.text:10002753 8B 5C 24	10						       mov     ebx, [esp+7Ch+var_6C]
.text:10002757
.text:10002757						       loc_10002757:			       ; CODE XREF: sub_100022C0+423j
.text:10002757 85 FF							       test    edi, edi
.text:10002759 0F 85 74	FF FF FF					       jnz     loc_100026D3
.text:1000275F EB 04							       jmp     short loc_10002765
.text:10002761						       ; ---------------------------------------------------------------------------
.text:10002761
.text:10002761						       loc_10002761:			       ; CODE XREF: sub_100022C0+40Dj
.text:10002761 8B 5C 24	10						       mov     ebx, [esp+7Ch+var_6C]
.text:10002765
.text:10002765						       loc_10002765:			       ; CODE XREF: sub_100022C0+49Fj
.text:10002765 8D 74 24	64						       lea     esi, [esp+7Ch+var_18]
.text:10002769 8D 7B 40							       lea     edi, [ebx+40h]
.text:1000276C C7 44 24	14 03 00 00 00					       mov     [esp+7Ch+var_68], 3
.text:10002774
.text:10002774						       loc_10002774:			       ; CODE XREF: sub_100022C0+4CBj
.text:10002774 56							       push    esi
.text:10002775 8B CF							       mov     ecx, edi
.text:10002777 E8 8E 12	00 00						       call    ??4CString@@QAEABV0@ABV0@@Z ; CString::operator=(CString	const &)
.text:1000277C 8B 44 24	14						       mov     eax, [esp+7Ch+var_68]
.text:10002780 83 C6 04							       add     esi, 4
.text:10002783 83 C7 04							       add     edi, 4
.text:10002786 48							       dec     eax
.text:10002787 89 44 24	14						       mov     [esp+7Ch+var_68], eax
.text:1000278B 75 E7							       jnz     short loc_10002774
.text:1000278D 8D 44 24	58						       lea     eax, [esp+7Ch+var_24]
.text:10002791 50							       push    eax
.text:10002792 E8 85 12	00 00						       call    ?GetTickCount@CTime@@SG?AV1@XZ ;	CTime::GetTickCount(void)
.text:10002797 8B 73 0C							       mov     esi, [ebx+0Ch]
.text:1000279A 8B 08							       mov     ecx, [eax]
.text:1000279C 85 F6							       test    esi, esi
.text:1000279E 89 4C 24	20						       mov     [esp+7Ch+var_5C], ecx
.text:100027A2 74 79							       jz      short loc_1000281D
.text:100027A4
.text:100027A4						       loc_100027A4:			       ; CODE XREF: sub_100022C0+557j
.text:100027A4 51							       push    ecx
.text:100027A5 8B C6							       mov     eax, esi
.text:100027A7 8B 36							       mov     esi, [esi]
.text:100027A9 8D 54 24	70						       lea     edx, [esp+80h+var_10]
.text:100027AD 8B 78 08							       mov     edi, [eax+8]
.text:100027B0 8B CC							       mov     ecx, esp
.text:100027B2 89 64 24	58						       mov     [esp+80h+var_28], esp
.text:100027B6 52							       push    edx
.text:100027B7 E8 30 12	00 00						       call    ??0CString@@QAE@ABV0@@Z ; CString::CString(CString const	&)
.text:100027BC 51							       push    ecx
.text:100027BD 8D 44 24	70						       lea     eax, [esp+84h+var_14]
.text:100027C1 8B CC							       mov     ecx, esp
.text:100027C3 89 64 24	58						       mov     [esp+84h+var_2C], esp
.text:100027C7 50							       push    eax
.text:100027C8 C6 84 24	84 00 00 00 08					       mov     byte ptr	[esp+88h+var_4], 8
.text:100027D0 E8 17 12	00 00						       call    ??0CString@@QAE@ABV0@@Z ; CString::CString(CString const	&)
.text:100027D5 51							       push    ecx
.text:100027D6 8D 54 24	70						       lea     edx, [esp+88h+var_18]
.text:100027DA 8B CC							       mov     ecx, esp
.text:100027DC 89 64 24	58						       mov     [esp+88h+var_30], esp
.text:100027E0 52							       push    edx
.text:100027E1 C6 84 24	88 00 00 00 09					       mov     byte ptr	[esp+8Ch+var_4], 9
.text:100027E9 E8 FE 11	00 00						       call    ??0CString@@QAE@ABV0@@Z ; CString::CString(CString const	&)
.text:100027EE 8B 1F							       mov     ebx, [edi]
.text:100027F0 51							       push    ecx
.text:100027F1 8D 44 24	30						       lea     eax, [esp+8Ch+var_5C]
.text:100027F5 8B CC							       mov     ecx, esp
.text:100027F7 89 64 24	24						       mov     [esp+8Ch+var_68], esp
.text:100027FB 50							       push    eax
.text:100027FC C6 84 24	8C 00 00 00 01					       mov     byte ptr	[esp+90h+var_4], 1
.text:10002804 E8 C7 02	00 00						       call    sub_10002AD0
.text:10002809 8B CF							       mov     ecx, edi
.text:1000280B FF 53 1C							       call    dword ptr [ebx+1Ch]
.text:1000280E 8B CF							       mov     ecx, edi
.text:10002810 E8 0B F7	FF FF						       call    sub_10001F20
.text:10002815 85 F6							       test    esi, esi
.text:10002817 75 8B							       jnz     short loc_100027A4
.text:10002819 8B 5C 24	10						       mov     ebx, [esp+7Ch+var_6C]
.text:1000281D
.text:1000281D						       loc_1000281D:			       ; CODE XREF: sub_100022C0+4E2j
.text:1000281D 8B 4C 24	20						       mov     ecx, [esp+7Ch+var_5C]
.text:10002821 8B 7C 24	10						       mov     edi, [esp+7Ch+var_6C]
.text:10002825 89 4B 54							       mov     [ebx+54h], ecx
.text:10002828 C7 44 24	14 02 00 00 01					       mov     [esp+7Ch+var_68], 1000002h
.text:10002830 C7 43 3C	00 00 00 00					       mov     dword ptr [ebx+3Ch], 0
.text:10002837 E9 93 00	00 00						       jmp     loc_100028CF
.text:1000283C						       ; ---------------------------------------------------------------------------
.text:1000283C
.text:1000283C						       loc_1000283C:			       ; CODE XREF: sub_100022C0+395j
.text:1000283C											       ; sub_100022C0+3ACj ...
.text:1000283C 8D 54 24	5C						       lea     edx, [esp+7Ch+var_20]
.text:10002840 52							       push    edx
.text:10002841 E8 D6 11	00 00						       call    ?GetTickCount@CTime@@SG?AV1@XZ ;	CTime::GetTickCount(void)
.text:10002846 8B 00							       mov     eax, [eax]
.text:10002848 8D 5F 54							       lea     ebx, [edi+54h]
.text:1000284B 89 03							       mov     [ebx], eax
.text:1000284D 8B 77 0C							       mov     esi, [edi+0Ch]
.text:10002850 85 F6							       test    esi, esi
.text:10002852 74 74							       jz      short loc_100028C8
.text:10002854
.text:10002854						       loc_10002854:			       ; CODE XREF: sub_100022C0+5FCj
.text:10002854 51							       push    ecx
.text:10002855 8B C6							       mov     eax, esi
.text:10002857 8B 36							       mov     esi, [esi]
.text:10002859 8D 54 24	70						       lea     edx, [esp+80h+var_10]
.text:1000285D 8B 78 08							       mov     edi, [eax+8]
.text:10002860 8B CC							       mov     ecx, esp
.text:10002862 89 64 24	58						       mov     [esp+80h+var_28], esp
.text:10002866 52							       push    edx
.text:10002867 E8 80 11	00 00						       call    ??0CString@@QAE@ABV0@@Z ; CString::CString(CString const	&)
.text:1000286C 51							       push    ecx
.text:1000286D 8D 44 24	70						       lea     eax, [esp+84h+var_14]
.text:10002871 8B CC							       mov     ecx, esp
.text:10002873 89 64 24	58						       mov     [esp+84h+var_2C], esp
.text:10002877 50							       push    eax
.text:10002878 C6 84 24	84 00 00 00 0B					       mov     byte ptr	[esp+88h+var_4], 0Bh
.text:10002880 E8 67 11	00 00						       call    ??0CString@@QAE@ABV0@@Z ; CString::CString(CString const	&)
.text:10002885 51							       push    ecx
.text:10002886 8D 54 24	70						       lea     edx, [esp+88h+var_18]
.text:1000288A 8B CC							       mov     ecx, esp
.text:1000288C 89 64 24	58						       mov     [esp+88h+var_30], esp
.text:10002890 52							       push    edx
.text:10002891 C6 84 24	88 00 00 00 0C					       mov     byte ptr	[esp+8Ch+var_4], 0Ch
.text:10002899 E8 4E 11	00 00						       call    ??0CString@@QAE@ABV0@@Z ; CString::CString(CString const	&)
.text:1000289E 8B 2F							       mov     ebp, [edi]
.text:100028A0 51							       push    ecx
.text:100028A1 8B CC							       mov     ecx, esp
.text:100028A3 89 64 24	70						       mov     [esp+8Ch+var_1C], esp
.text:100028A7 53							       push    ebx
.text:100028A8 C6 84 24	8C 00 00 00 01					       mov     byte ptr	[esp+90h+var_4], 1
.text:100028B0 E8 1B 02	00 00						       call    sub_10002AD0
.text:100028B5 8B CF							       mov     ecx, edi
.text:100028B7 FF 55 1C							       call    dword ptr [ebp+1Ch]
.text:100028BA 85 F6							       test    esi, esi
.text:100028BC 75 96							       jnz     short loc_10002854
.text:100028BE 8B 2D 44	51 00 10					       mov     ebp, ds:_mbscmp
.text:100028C4 8B 7C 24	10						       mov     edi, [esp+7Ch+var_6C]
.text:100028C8
.text:100028C8						       loc_100028C8:			       ; CODE XREF: sub_100022C0+592j
.text:100028C8 C7 47 3C	01 00 00 00					       mov     dword ptr [edi+3Ch], 1
.text:100028CF
.text:100028CF						       loc_100028CF:			       ; CODE XREF: sub_100022C0+577j
.text:100028CF 8B 74 24	24						       mov     esi, [esp+7Ch+var_58]
.text:100028D3
.text:100028D3						       loc_100028D3:			       ; CODE XREF: sub_100022C0+F8j
.text:100028D3											       ; sub_100022C0+21Fj ...
.text:100028D3 8B 47 50							       mov     eax, [edi+50h]
.text:100028D6 8D 5F 50							       lea     ebx, [edi+50h]
.text:100028D9 3B 70 F8							       cmp     esi, [eax-8]
.text:100028DC 0F 8C AE	FA FF FF					       jl      loc_10002390
.text:100028E2
.text:100028E2						       loc_100028E2:			       ; CODE XREF: sub_100022C0+E9j
.text:100028E2 33 F6							       xor     esi, esi
.text:100028E4
.text:100028E4						       loc_100028E4:			       ; CODE XREF: sub_100022C0+CAj
.text:100028E4 8B 0B							       mov     ecx, [ebx]
.text:100028E6 89 74 24	3C						       mov     [esp+7Ch+var_40], esi
.text:100028EA 89 74 24	40						       mov     [esp+7Ch+var_3C], esi
.text:100028EE 8B 79 F8							       mov     edi, [ecx-8]
.text:100028F1 8D 77 FE							       lea     esi, [edi-2]
.text:100028F4 85 F6							       test    esi, esi
.text:100028F6 0F 8C 7E	01 00 00					       jl      loc_10002A7A
.text:100028FC
.text:100028FC						       loc_100028FC:			       ; CODE XREF: sub_100022C0+6B1j
.text:100028FC 6A 02							       push    2
.text:100028FE 8D 54 24	4C						       lea     edx, [esp+80h+var_34]
.text:10002902 56							       push    esi
.text:10002903 52							       push    edx
.text:10002904 8B CB							       mov     ecx, ebx
.text:10002906 E8 23 11	00 00						       call    ?Mid@CString@@QBE?AV1@HH@Z ; CString::Mid(int,int)
.text:1000290B 8B 00							       mov     eax, [eax]
.text:1000290D 68 84 60	00 10						       push    offset aOk      ; "OK"
.text:10002912 50							       push    eax	       ; unsigned __int8 *
.text:10002913 FF D5							       call    ebp ; _mbscmp
.text:10002915 83 C4 08							       add     esp, 8
.text:10002918 8D 4C 24	48						       lea     ecx, [esp+7Ch+var_34] ; this
.text:1000291C 85 C0							       test    eax, eax
.text:1000291E 0F 94 84	24 80 00 00 00					       setz    byte ptr	[esp+7Ch+arg_0]
.text:10002926 E8 61 10	00 00						       call    ??1CString@@QAE@XZ ; CString::~CString(void)
.text:1000292B 8A 84 24	80 00 00 00					       mov     al, byte	ptr [esp+7Ch+arg_0]
.text:10002932 84 C0							       test    al, al
.text:10002934 75 42							       jnz     short loc_10002978
.text:10002936 6A 05							       push    5
.text:10002938 8D 44 24	48						       lea     eax, [esp+80h+var_38]
.text:1000293C 56							       push    esi
.text:1000293D 50							       push    eax
.text:1000293E 8B CB							       mov     ecx, ebx
.text:10002940 E8 E9 10	00 00						       call    ?Mid@CString@@QBE?AV1@HH@Z ; CString::Mid(int,int)
.text:10002945 8B 00							       mov     eax, [eax]
.text:10002947 68 7C 60	00 10						       push    offset aError   ; "ERROR"
.text:1000294C 50							       push    eax	       ; unsigned __int8 *
.text:1000294D FF D5							       call    ebp ; _mbscmp
.text:1000294F 83 C4 08							       add     esp, 8
.text:10002952 8D 4C 24	44						       lea     ecx, [esp+7Ch+var_38] ; this
.text:10002956 85 C0							       test    eax, eax
.text:10002958 0F 94 84	24 80 00 00 00					       setz    byte ptr	[esp+7Ch+arg_0]
.text:10002960 E8 27 10	00 00						       call    ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10002965 8A 84 24	80 00 00 00					       mov     al, byte	ptr [esp+7Ch+arg_0]
.text:1000296C 84 C0							       test    al, al
.text:1000296E 75 13							       jnz     short loc_10002983
.text:10002970 4E							       dec     esi
.text:10002971 79 89							       jns     short loc_100028FC
.text:10002973 E9 02 01	00 00						       jmp     loc_10002A7A
.text:10002978						       ; ---------------------------------------------------------------------------
.text:10002978
.text:10002978						       loc_10002978:			       ; CODE XREF: sub_100022C0+674j
.text:10002978 8B 4C 24	40						       mov     ecx, [esp+7Ch+var_3C]
.text:1000297C B8 01 00	00 00						       mov     eax, 1
.text:10002981 EB 09							       jmp     short loc_1000298C
.text:10002983						       ; ---------------------------------------------------------------------------
.text:10002983
.text:10002983						       loc_10002983:			       ; CODE XREF: sub_100022C0+6AEj
.text:10002983 8B 44 24	3C						       mov     eax, [esp+7Ch+var_40]
.text:10002987 B9 01 00	00 00						       mov     ecx, 1
.text:1000298C
.text:1000298C						       loc_1000298C:			       ; CODE XREF: sub_100022C0+6C1j
.text:1000298C 85 F6							       test    esi, esi
.text:1000298E 0F 8C E6	00 00 00					       jl      loc_10002A7A
.text:10002994 85 C0							       test    eax, eax
.text:10002996 74 65							       jz      short loc_100029FD
.text:10002998 8D 4E 04							       lea     ecx, [esi+4]
.text:1000299B 8D 94 24	80 00 00 00					       lea     edx, [esp+7Ch+arg_0]
.text:100029A2 51							       push    ecx
.text:100029A3 52							       push    edx
.text:100029A4 8B CB							       mov     ecx, ebx
.text:100029A6 E8 7D 10	00 00						       call    ?Left@CString@@QBE?AV1@H@Z ; CString::Left(int)
.text:100029AB 8B 00							       mov     eax, [eax]
.text:100029AD 8B 4C 24	10						       mov     ecx, [esp+7Ch+var_6C]
.text:100029B1 50							       push    eax
.text:100029B2 C6 44 24	7C 0E						       mov     byte ptr	[esp+80h+var_4], 0Eh
.text:100029B7 E8 24 F8	FF FF						       call    sub_100021E0
.text:100029BC 8D 8C 24	80 00 00 00					       lea     ecx, [esp+7Ch+arg_0] ; this
.text:100029C3 C6 44 24	78 01						       mov     byte ptr	[esp+7Ch+var_4], 1
.text:100029C8 E8 BF 0F	00 00						       call    ??1CString@@QAE@XZ ; CString::~CString(void)
.text:100029CD 2B FE							       sub     edi, esi
.text:100029CF 8D 84 24	80 00 00 00					       lea     eax, [esp+7Ch+arg_0]
.text:100029D6 83 EF 04							       sub     edi, 4
.text:100029D9 8B CB							       mov     ecx, ebx
.text:100029DB 57							       push    edi
.text:100029DC 50							       push    eax
.text:100029DD E8 40 10	00 00						       call    ?Right@CString@@QBE?AV1@H@Z ; CString::Right(int)
.text:100029E2 50							       push    eax
.text:100029E3 8B CB							       mov     ecx, ebx
.text:100029E5 C6 44 24	7C 0F						       mov     byte ptr	[esp+80h+var_4], 0Fh
.text:100029EA E8 1B 10	00 00						       call    ??4CString@@QAEABV0@ABV0@@Z ; CString::operator=(CString	const &)
.text:100029EF C6 44 24	78 01						       mov     byte ptr	[esp+7Ch+var_4], 1
.text:100029F4 8D 8C 24	80 00 00 00					       lea     ecx, [esp+7Ch+arg_0]
.text:100029FB EB 67							       jmp     short loc_10002A64
.text:100029FD						       ; ---------------------------------------------------------------------------
.text:100029FD
.text:100029FD						       loc_100029FD:			       ; CODE XREF: sub_100022C0+6D6j
.text:100029FD 85 C9							       test    ecx, ecx
.text:100029FF 74 70							       jz      short loc_10002A71
.text:10002A01 8D 4E 07							       lea     ecx, [esi+7]
.text:10002A04 8D 94 24	80 00 00 00					       lea     edx, [esp+7Ch+arg_0]
.text:10002A0B 51							       push    ecx
.text:10002A0C 52							       push    edx
.text:10002A0D 8B CB							       mov     ecx, ebx
.text:10002A0F E8 14 10	00 00						       call    ?Left@CString@@QBE?AV1@H@Z ; CString::Left(int)
.text:10002A14 8B 00							       mov     eax, [eax]
.text:10002A16 8B 4C 24	10						       mov     ecx, [esp+7Ch+var_6C]
.text:10002A1A 50							       push    eax
.text:10002A1B C6 44 24	7C 10						       mov     byte ptr	[esp+80h+var_4], 10h
.text:10002A20 E8 BB F7	FF FF						       call    sub_100021E0
.text:10002A25 8D 8C 24	80 00 00 00					       lea     ecx, [esp+7Ch+arg_0] ; this
.text:10002A2C C6 44 24	78 01						       mov     byte ptr	[esp+7Ch+var_4], 1
.text:10002A31 E8 56 0F	00 00						       call    ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10002A36 2B FE							       sub     edi, esi
.text:10002A38 8D 84 24	80 00 00 00					       lea     eax, [esp+7Ch+arg_0]
.text:10002A3F 83 EF 07							       sub     edi, 7
.text:10002A42 8B CB							       mov     ecx, ebx
.text:10002A44 57							       push    edi
.text:10002A45 50							       push    eax
.text:10002A46 E8 D7 0F	00 00						       call    ?Right@CString@@QBE?AV1@H@Z ; CString::Right(int)
.text:10002A4B 50							       push    eax
.text:10002A4C 8B CB							       mov     ecx, ebx
.text:10002A4E C6 44 24	7C 11						       mov     byte ptr	[esp+80h+var_4], 11h
.text:10002A53 E8 B2 0F	00 00						       call    ??4CString@@QAEABV0@ABV0@@Z ; CString::operator=(CString	const &)
.text:10002A58 C6 44 24	78 01						       mov     byte ptr	[esp+7Ch+var_4], 1
.text:10002A5D 8D 8C 24	80 00 00 00					       lea     ecx, [esp+7Ch+arg_0] ; this
.text:10002A64
.text:10002A64						       loc_10002A64:			       ; CODE XREF: sub_100022C0+73Bj
.text:10002A64 E8 23 0F	00 00						       call    ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10002A69 C7 44 24	14 03 00 00 01					       mov     [esp+7Ch+var_68], 1000003h
.text:10002A71
.text:10002A71						       loc_10002A71:			       ; CODE XREF: sub_100022C0+73Fj
.text:10002A71 8B 4C 24	10						       mov     ecx, [esp+7Ch+var_6C]
.text:10002A75 E8 86 F7	FF FF						       call    sub_10002200
.text:10002A7A
.text:10002A7A						       loc_10002A7A:			       ; CODE XREF: sub_100022C0+636j
.text:10002A7A											       ; sub_100022C0+6B3j ...
.text:10002A7A 68 8C 39	00 10						       push    offset ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10002A7F 6A 03							       push    3
.text:10002A81 8D 4C 24	6C						       lea     ecx, [esp+84h+var_18]
.text:10002A85 6A 04							       push    4
.text:10002A87 51							       push    ecx
.text:10002A88 C6 84 24	88 00 00 00 00					       mov     byte ptr	[esp+8Ch+var_4], 0
.text:10002A90 E8 5B 10	00 00						       call    sub_10003AF0
.text:10002A95 8D 8C 24	84 00 00 00					       lea     ecx, [esp+7Ch+Str] ; this
.text:10002A9C C7 44 24	78 FF FF FF FF					       mov     [esp+7Ch+var_4],	0FFFFFFFFh
.text:10002AA4 E8 E3 0E	00 00						       call    ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10002AA9 8B 44 24	14						       mov     eax, [esp+7Ch+var_68]
.text:10002AAD EB 05							       jmp     short loc_10002AB4
.text:10002AAF						       ; ---------------------------------------------------------------------------
.text:10002AAF
.text:10002AAF						       loc_10002AAF:			       ; CODE XREF: sub_100022C0+30j
.text:10002AAF											       ; sub_100022C0+3Fj
.text:10002AAF B8 05 40	00 80						       mov     eax, 80004005h
.text:10002AB4
.text:10002AB4						       loc_10002AB4:			       ; CODE XREF: sub_100022C0+76j
.text:10002AB4											       ; sub_100022C0+7EDj
.text:10002AB4 8B 4C 24	70						       mov     ecx, [esp+7Ch+var_C]
.text:10002AB8 5F							       pop     edi
.text:10002AB9 5E							       pop     esi
.text:10002ABA 5D							       pop     ebp
.text:10002ABB 64 89 0D	00 00 00 00					       mov     large fs:0, ecx
.text:10002AC2 5B							       pop     ebx
.text:10002AC3 83 C4 6C							       add     esp, 6Ch
.text:10002AC6 C2 08 00							       retn    8
.text:10002AC6						       sub_100022C0    endp
.text:10002AC6
.text:10002AC6						       ; ---------------------------------------------------------------------------
.text:10002AC9 90 90 90	90 90 90 90					       align 10h
.text:10002AD0
.text:10002AD0						       ; =============== S U B R O U T I N E =======================================
.text:10002AD0
.text:10002AD0
.text:10002AD0						       sub_10002AD0    proc near	       ; CODE XREF: sub_100022C0+47Ep
.text:10002AD0											       ; sub_100022C0+544p ...
.text:10002AD0
.text:10002AD0						       arg_0	       = dword ptr  4
.text:10002AD0
.text:10002AD0 8B C1							       mov     eax, ecx
.text:10002AD2 8B 4C 24	04						       mov     ecx, [esp+arg_0]
.text:10002AD6 8B 11							       mov     edx, [ecx]
.text:10002AD8 89 10							       mov     [eax], edx
.text:10002ADA C2 04 00							       retn    4
.text:10002ADA						       sub_10002AD0    endp
.text:10002ADA
.text:10002ADA						       ; ---------------------------------------------------------------------------
.text:10002ADD 90 90 90							       align 10h
.text:10002AE0
.text:10002AE0						       ; =============== S U B R O U T I N E =======================================
.text:10002AE0
.text:10002AE0
.text:10002AE0						       ; int __cdecl sub_10002AE0(LPSTR	lpString1, int)
.text:10002AE0						       sub_10002AE0    proc near	       ; CODE XREF: GSCREnumDevices(void)+148p
.text:10002AE0											       ; DATA XREF: GSCREnumDevices(void)+ADo
.text:10002AE0
.text:10002AE0						       lpString1       = dword ptr  4
.text:10002AE0						       arg_4	       = dword ptr  8
.text:10002AE0
.text:10002AE0 8A 0D 0C	61 00 10					       mov     cl, byte_1000610C
.text:10002AE6 B0 01							       mov     al, 1
.text:10002AE8 84 C8							       test    al, cl
.text:10002AEA 75 21							       jnz     short loc_10002B0D
.text:10002AEC 8A D1							       mov     dl, cl
.text:10002AEE B9 08 61	00 10						       mov     ecx, offset lpString2 ; this
.text:10002AF3 0A D0							       or      dl, al
.text:10002AF5 88 15 0C	61 00 10					       mov     byte_1000610C, dl
.text:10002AFB E8 86 0E	00 00						       call    ??0CString@@QAE@XZ ; CString::CString(void)
.text:10002B00 68 C0 2B	00 10						       push    offset Func     ; Func
.text:10002B05 E8 28 11	00 00						       call    sub_10003C32
.text:10002B0A 83 C4 04							       add     esp, 4
.text:10002B0D
.text:10002B0D						       loc_10002B0D:			       ; CODE XREF: sub_10002AE0+Aj
.text:10002B0D 57							       push    edi
.text:10002B0E 8B 7C 24	08						       mov     edi, [esp+4+lpString1]
.text:10002B12 85 FF							       test    edi, edi
.text:10002B14 0F 84 A3	00 00 00					       jz      loc_10002BBD
.text:10002B1A 8B 44 24	0C						       mov     eax, [esp+4+arg_4]
.text:10002B1E 85 C0							       test    eax, eax
.text:10002B20 0F 84 88	00 00 00					       jz      loc_10002BAE
.text:10002B26 83 F8 03							       cmp     eax, 3
.text:10002B29 74 1D							       jz      short loc_10002B48
.text:10002B2B 83 F8 10							       cmp     eax, 10h
.text:10002B2E 0F 85 89	00 00 00					       jnz     loc_10002BBD
.text:10002B34 A1 08 61	00 10						       mov     eax, lpString2
.text:10002B39 68 00 01	00 00						       push    100h	       ; iMaxLength
.text:10002B3E 50							       push    eax	       ; lpString2
.text:10002B3F 57							       push    edi	       ; lpString1
.text:10002B40 FF 15 58	50 00 10					       call    ds:lstrcpynA
.text:10002B46 5F							       pop     edi
.text:10002B47 C3							       retn
.text:10002B48						       ; ---------------------------------------------------------------------------
.text:10002B48
.text:10002B48						       loc_10002B48:			       ; CODE XREF: sub_10002AE0+49j
.text:10002B48 56							       push    esi
.text:10002B49 8B CF							       mov     ecx, edi
.text:10002B4B E8 C0 0A	00 00						       call    sub_10003610
.text:10002B50 8B CF							       mov     ecx, edi
.text:10002B52 8B F0							       mov     esi, eax
.text:10002B54 E8 A7 0A	00 00						       call    sub_10003600
.text:10002B59 85 F6							       test    esi, esi
.text:10002B5B 7E 47							       jle     short loc_10002BA4
.text:10002B5D 85 C0							       test    eax, eax
.text:10002B5F 74 43							       jz      short loc_10002BA4
.text:10002B61 50							       push    eax
.text:10002B62 B9 08 61	00 10						       mov     ecx, offset lpString2
.text:10002B67 C6 04 30	00						       mov     byte ptr	[eax+esi], 0
.text:10002B6B E8 CA 0E	00 00						       call    ??YCString@@QAEABV0@PBD@Z ; CString::operator+=(char const *)
.text:10002B70 68 84 60	00 10						       push    offset aOk      ; "OK"
.text:10002B75 B9 08 61	00 10						       mov     ecx, offset lpString2 ; this
.text:10002B7A E8 C1 0E	00 00						       call    ?Find@CString@@QBEHPBD@Z	; CString::Find(char const *)
.text:10002B7F 85 C0							       test    eax, eax
.text:10002B81 7D 13							       jge     short loc_10002B96
.text:10002B83 68 7C 60	00 10						       push    offset aError   ; "ERROR"
.text:10002B88 B9 08 61	00 10						       mov     ecx, offset lpString2 ; this
.text:10002B8D E8 AE 0E	00 00						       call    ?Find@CString@@QBEHPBD@Z	; CString::Find(char const *)
.text:10002B92 85 C0							       test    eax, eax
.text:10002B94 7C 0E							       jl      short loc_10002BA4
.text:10002B96
.text:10002B96						       loc_10002B96:			       ; CODE XREF: sub_10002AE0+A1j
.text:10002B96 8B CF							       mov     ecx, edi
.text:10002B98 E8 D3 0D	00 00						       call    sub_10003970
.text:10002B9D 50							       push    eax	       ; hEvent
.text:10002B9E FF 15 54	50 00 10					       call    ds:SetEvent
.text:10002BA4
.text:10002BA4						       loc_10002BA4:			       ; CODE XREF: sub_10002AE0+7Bj
.text:10002BA4											       ; sub_10002AE0+7Fj ...
.text:10002BA4 8B CF							       mov     ecx, edi
.text:10002BA6 E8 75 0A	00 00						       call    sub_10003620
.text:10002BAB 5E							       pop     esi
.text:10002BAC 5F							       pop     edi
.text:10002BAD C3							       retn
.text:10002BAE						       ; ---------------------------------------------------------------------------
.text:10002BAE
.text:10002BAE						       loc_10002BAE:			       ; CODE XREF: sub_10002AE0+40j
.text:10002BAE 68 04 61	00 10						       push    offset unk_10006104
.text:10002BB3 B9 08 61	00 10						       mov     ecx, offset lpString2
.text:10002BB8 E8 41 0E	00 00						       call    ??4CString@@QAEABV0@PBD@Z ; CString::operator=(char const *)
.text:10002BBD
.text:10002BBD						       loc_10002BBD:			       ; CODE XREF: sub_10002AE0+34j
.text:10002BBD											       ; sub_10002AE0+4Ej
.text:10002BBD 5F							       pop     edi
.text:10002BBE C3							       retn
.text:10002BBE						       sub_10002AE0    endp
.text:10002BBE
.text:10002BBE						       ; ---------------------------------------------------------------------------
.text:10002BBF 90							       align 10h
.text:10002BC0
.text:10002BC0						       ; =============== S U B R O U T I N E =======================================
.text:10002BC0
.text:10002BC0
.text:10002BC0						       ; int __cdecl Func()
.text:10002BC0						       Func	       proc near	       ; DATA XREF: sub_10002AE0+20o
.text:10002BC0 B9 08 61	00 10						       mov     ecx, offset lpString2
.text:10002BC5 E9 C2 0D	00 00						       jmp     ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10002BC5						       Func	       endp
.text:10002BC5
.text:10002BC5						       ; ---------------------------------------------------------------------------
.text:10002BCA 90 90 90	90 90 90					       align 10h
.text:10002BD0
.text:10002BD0						       loc_10002BD0:			       ; DATA XREF: sub_10003030:loc_100030A3o
.text:10002BD0 56							       push    esi
.text:10002BD1 8B 74 24	08						       mov     esi, [esp+8]
.text:10002BD5 85 F6							       test    esi, esi
.text:10002BD7 57							       push    edi
.text:10002BD8 74 58							       jz      short loc_10002C32 ; jumptable 10002BEC default case
.text:10002BDA 8B CE							       mov     ecx, esi
.text:10002BDC E8 8F 0D	00 00						       call    sub_10003970
.text:10002BE1 8B F8							       mov     edi, eax
.text:10002BE3 8B 44 24	10						       mov     eax, [esp+10h]
.text:10002BE7 83 F8 06							       cmp     eax, 6	       ; switch	7 cases
.text:10002BEA 77 46							       ja      short loc_10002C32 ; jumptable 10002BEC default case
.text:10002BEC FF 24 85	38 2C 00 10					       jmp     ds:off_10002C38[eax*4] ;	switch jump
.text:10002BF3						       ; ---------------------------------------------------------------------------
.text:10002BF3
.text:10002BF3						       loc_10002BF3:			       ; CODE XREF: .text:10002BECj
.text:10002BF3											       ; DATA XREF: .text:off_10002C38o
.text:10002BF3 50							       push    eax	       ; jumptable 10002BEC cases 0-2,4-6
.text:10002BF4 8B CF							       mov     ecx, edi
.text:10002BF6 E8 35 F6	FF FF						       call    sub_10002230
.text:10002BFB 5F							       pop     edi
.text:10002BFC 5E							       pop     esi
.text:10002BFD C3							       retn
.text:10002BFE						       ; ---------------------------------------------------------------------------
.text:10002BFE
.text:10002BFE						       loc_10002BFE:			       ; CODE XREF: .text:10002BECj
.text:10002BFE											       ; DATA XREF: .text:off_10002C38o
.text:10002BFE 53							       push    ebx	       ; jumptable 10002BEC case 3
.text:10002BFF 8B CE							       mov     ecx, esi
.text:10002C01 E8 0A 0A	00 00						       call    sub_10003610
.text:10002C06 8B CE							       mov     ecx, esi
.text:10002C08 8B D8							       mov     ebx, eax
.text:10002C0A E8 F1 09	00 00						       call    sub_10003600
.text:10002C0F 50							       push    eax
.text:10002C10 53							       push    ebx
.text:10002C11 8B CF							       mov     ecx, edi
.text:10002C13 E8 A8 F6	FF FF						       call    sub_100022C0
.text:10002C18 85 C0							       test    eax, eax
.text:10002C1A 5B							       pop     ebx
.text:10002C1B 74 0E							       jz      short loc_10002C2B
.text:10002C1D 6A 00							       push    0
.text:10002C1F 50							       push    eax
.text:10002C20 68 21 07	00 00						       push    721h
.text:10002C25 FF 57 5C							       call    dword ptr [edi+5Ch]
.text:10002C28 83 C4 0C							       add     esp, 0Ch
.text:10002C2B
.text:10002C2B						       loc_10002C2B:			       ; CODE XREF: .text:10002C1Bj
.text:10002C2B 8B CE							       mov     ecx, esi
.text:10002C2D E8 EE 09	00 00						       call    sub_10003620
.text:10002C32
.text:10002C32						       loc_10002C32:			       ; CODE XREF: .text:10002BD8j
.text:10002C32											       ; .text:10002BEAj
.text:10002C32 5F							       pop     edi	       ; jumptable 10002BEC default case
.text:10002C33 5E							       pop     esi
.text:10002C34 C3							       retn
.text:10002C34						       ; ---------------------------------------------------------------------------
.text:10002C35 8D 49 00							       align 4
.text:10002C38 F3 2B 00	10 F3 2B 00 10 F3 2B 00	10 FE 2B 00 10+off_10002C38    dd offset loc_10002BF3  ; DATA XREF: .text:10002BECr
.text:10002C38 F3 2B 00	10 F3 2B 00 10 F3 2B 00	10			       dd offset loc_10002BF3  ; jump table for	switch statement
.text:10002C38								       dd offset loc_10002BF3
.text:10002C38								       dd offset loc_10002BFE
.text:10002C38								       dd offset loc_10002BF3
.text:10002C38								       dd offset loc_10002BF3
.text:10002C38								       dd offset loc_10002BF3
.text:10002C54 90 90 90	90 90 90 90 90 90 90 90	90			       align 10h
.text:10002C60						       ; Exported entry	 14. ?GSCREnumDevices@@YAPAXXZ
.text:10002C60
.text:10002C60						       ; =============== S U B R O U T I N E =======================================
.text:10002C60
.text:10002C60
.text:10002C60						       ; void *__cdecl GSCREnumDevices()
.text:10002C60								       public ?GSCREnumDevices@@YAPAXXZ
.text:10002C60						       ?GSCREnumDevices@@YAPAXXZ proc near     ; DATA XREF: .rdata:off_10005C68o
.text:10002C60
.text:10002C60						       var_118	       = dword ptr -118h
.text:10002C60						       var_114	       = dword ptr -114h
.text:10002C60						       var_110	       = dword ptr -110h
.text:10002C60						       String1	       = byte ptr -10Ch
.text:10002C60						       var_C	       = dword ptr -0Ch
.text:10002C60						       var_4	       = dword ptr -4
.text:10002C60
.text:10002C60 6A FF							       push    0FFFFFFFFh
.text:10002C62 68 33 41	00 10						       push    offset ?GSCREnumDevices@@YAPAXXZ_SEH
.text:10002C67 64 A1 00	00 00 00					       mov     eax, large fs:0
.text:10002C6D 50							       push    eax
.text:10002C6E 64 89 25	00 00 00 00					       mov     large fs:0, esp
.text:10002C75 81 EC 0C	01 00 00					       sub     esp, 10Ch
.text:10002C7B 6A 1C							       push    1Ch	       ; unsigned int
.text:10002C7D E8 40 0D	00 00						       call    ??2@YAPAXI@Z    ; operator new(uint)
.text:10002C82 83 C4 04							       add     esp, 4
.text:10002C85 89 44 24	00						       mov     [esp+118h+var_118], eax
.text:10002C89 33 C9							       xor     ecx, ecx
.text:10002C8B 3B C1							       cmp     eax, ecx
.text:10002C8D 89 8C 24	14 01 00 00					       mov     [esp+118h+var_4], ecx
.text:10002C94 74 0F							       jz      short loc_10002CA5
.text:10002C96 6A 0A							       push    0Ah
.text:10002C98 8B C8							       mov     ecx, eax
.text:10002C9A E8 AD 0D	00 00						       call    ??0CPtrList@@QAE@H@Z ; CPtrList::CPtrList(int)
.text:10002C9F 89 44 24	00						       mov     [esp+118h+var_118], eax
.text:10002CA3 EB 04							       jmp     short loc_10002CA9
.text:10002CA5						       ; ---------------------------------------------------------------------------
.text:10002CA5
.text:10002CA5						       loc_10002CA5:			       ; CODE XREF: GSCREnumDevices(void)+34j
.text:10002CA5 89 4C 24	00						       mov     [esp+118h+var_118], ecx
.text:10002CA9
.text:10002CA9						       loc_10002CA9:			       ; CODE XREF: GSCREnumDevices(void)+43j
.text:10002CA9 53							       push    ebx
.text:10002CAA 55							       push    ebp
.text:10002CAB 56							       push    esi
.text:10002CAC 57							       push    edi
.text:10002CAD 8D 4C 24	14						       lea     ecx, [esp+128h+var_114] ; this
.text:10002CB1 C7 84 24	24 01 00 00 FF FF FF FF				       mov     [esp+128h+var_4], 0FFFFFFFFh
.text:10002CBC E8 C5 0C	00 00						       call    ??0CString@@QAE@XZ ; CString::CString(void)
.text:10002CC1 8B 2D 50	50 00 10					       mov     ebp, ds:lstrlenA
.text:10002CC7 BB 01 00	00 00						       mov     ebx, 1
.text:10002CCC 89 9C 24	24 01 00 00					       mov     [esp+128h+var_4], ebx
.text:10002CD3
.text:10002CD3						       loc_10002CD3:			       ; CODE XREF: GSCREnumDevices(void)+1C0j
.text:10002CD3 68 A0 02	00 00						       push    2A0h	       ; unsigned int
.text:10002CD8 E8 E5 0C	00 00						       call    ??2@YAPAXI@Z    ; operator new(uint)
.text:10002CDD 83 C4 04							       add     esp, 4
.text:10002CE0 89 44 24	18						       mov     [esp+128h+var_110], eax
.text:10002CE4 85 C0							       test    eax, eax
.text:10002CE6 C6 84 24	24 01 00 00 02					       mov     byte ptr	[esp+128h+var_4], 2
.text:10002CEE 74 0B							       jz      short loc_10002CFB
.text:10002CF0 8B C8							       mov     ecx, eax
.text:10002CF2 E8 89 05	00 00						       call    sub_10003280
.text:10002CF7 8B F0							       mov     esi, eax
.text:10002CF9 EB 02							       jmp     short loc_10002CFD
.text:10002CFB						       ; ---------------------------------------------------------------------------
.text:10002CFB
.text:10002CFB						       loc_10002CFB:			       ; CODE XREF: GSCREnumDevices(void)+8Ej
.text:10002CFB 33 F6							       xor     esi, esi
.text:10002CFD
.text:10002CFD						       loc_10002CFD:			       ; CODE XREF: GSCREnumDevices(void)+99j
.text:10002CFD 85 F6							       test    esi, esi
.text:10002CFF C6 84 24	24 01 00 00 01					       mov     byte ptr	[esp+128h+var_4], 1
.text:10002D07 0F 84 19	01 00 00					       jz      loc_10002E26
.text:10002D0D 68 E0 2A	00 10						       push    offset sub_10002AE0
.text:10002D12 8B CE							       mov     ecx, esi
.text:10002D14 E8 B7 08	00 00						       call    sub_100035D0
.text:10002D19 53							       push    ebx
.text:10002D1A 8D 44 24	18						       lea     eax, [esp+12Ch+var_114]
.text:10002D1E 68 9C 60	00 10						       push    offset aCom01d  ; "COM%01d"
.text:10002D23 50							       push    eax	       ; this
.text:10002D24 E8 ED 0C	00 00						       call    ?Format@CString@@QAAXPBDZZ ; CString::Format(char const *,...)
.text:10002D29 8B 4C 24	20						       mov     ecx, [esp+134h+var_114]
.text:10002D2D 83 C4 0C							       add     esp, 0Ch
.text:10002D30 6A 01							       push    1
.text:10002D32 6A 08							       push    8
.text:10002D34 6A 00							       push    0
.text:10002D36 68 00 C2	01 00						       push    1C200h
.text:10002D3B 51							       push    ecx
.text:10002D3C 8B CE							       mov     ecx, esi
.text:10002D3E E8 5D 06	00 00						       call    sub_100033A0
.text:10002D43 85 C0							       test    eax, eax
.text:10002D45 0F 85 C1	00 00 00					       jnz     loc_10002E0C
.text:10002D4B 50							       push    eax	       ; lpName
.text:10002D4C 50							       push    eax	       ; bInitialState
.text:10002D4D 6A 01							       push    1	       ; bManualReset
.text:10002D4F 50							       push    eax	       ; lpEventAttributes
.text:10002D50 FF 15 60	50 00 10					       call    ds:CreateEventA
.text:10002D56 8D 54 24	1C						       lea     edx, [esp+128h+String1]
.text:10002D5A 68 94 60	00 10						       push    offset String2  ; "ATI4\r"
.text:10002D5F 52							       push    edx	       ; lpString1
.text:10002D60 8B F8							       mov     edi, eax
.text:10002D62 FF 15 4C	50 00 10					       call    ds:lstrcpyA
.text:10002D68 57							       push    edi
.text:10002D69 8B CE							       mov     ecx, esi
.text:10002D6B E8 F0 0B	00 00						       call    sub_10003960
.text:10002D70 8D 44 24	1C						       lea     eax, [esp+128h+String1]
.text:10002D74 50							       push    eax	       ; lpString
.text:10002D75 FF D5							       call    ebp ; lstrlenA
.text:10002D77 8D 4C 24	1C						       lea     ecx, [esp+128h+String1]
.text:10002D7B 50							       push    eax
.text:10002D7C 51							       push    ecx
.text:10002D7D 8B CE							       mov     ecx, esi
.text:10002D7F E8 AC 08	00 00						       call    sub_10003630
.text:10002D84 8D 54 24	1C						       lea     edx, [esp+128h+String1]
.text:10002D88 52							       push    edx	       ; lpString
.text:10002D89 FF D5							       call    ebp ; lstrlenA
.text:10002D8B 50							       push    eax
.text:10002D8C 8B CE							       mov     ecx, esi
.text:10002D8E E8 4D 08	00 00						       call    sub_100035E0
.text:10002D93 68 B8 0B	00 00						       push    0BB8h	       ; dwMilliseconds
.text:10002D98 57							       push    edi	       ; hHandle
.text:10002D99 FF 15 5C	50 00 10					       call    ds:WaitForSingleObject
.text:10002D9F 8B F8							       mov     edi, eax
.text:10002DA1 8D 44 24	1C						       lea     eax, [esp+128h+String1]
.text:10002DA5 6A 10							       push    10h	       ; int
.text:10002DA7 50							       push    eax	       ; lpString1
.text:10002DA8 E8 33 FD	FF FF						       call    sub_10002AE0
.text:10002DAD 83 C4 08							       add     esp, 8
.text:10002DB0 85 FF							       test    edi, edi
.text:10002DB2 75 51							       jnz     short loc_10002E05
.text:10002DB4 8D 4C 24	1C						       lea     ecx, [esp+128h+String1]
.text:10002DB8 68 88 60	00 10						       push    offset SubStr   ; "AH-S101S"
.text:10002DBD 51							       push    ecx	       ; Str
.text:10002DBE FF 15 38	51 00 10					       call    ds:strstr
.text:10002DC4 83 C4 08							       add     esp, 8
.text:10002DC7 85 C0							       test    eax, eax
.text:10002DC9 75 3A							       jnz     short loc_10002E05
.text:10002DCB 6A 60							       push    60h	       ; unsigned int
.text:10002DCD E8 F0 0B	00 00						       call    ??2@YAPAXI@Z    ; operator new(uint)
.text:10002DD2 83 C4 04							       add     esp, 4
.text:10002DD5 89 44 24	18						       mov     [esp+128h+var_110], eax
.text:10002DD9 85 C0							       test    eax, eax
.text:10002DDB C6 84 24	24 01 00 00 03					       mov     byte ptr	[esp+128h+var_4], 3
.text:10002DE3 74 09							       jz      short loc_10002DEE
.text:10002DE5 8B C8							       mov     ecx, eax
.text:10002DE7 E8 A4 F1	FF FF						       call    sub_10001F90
.text:10002DEC EB 02							       jmp     short loc_10002DF0
.text:10002DEE						       ; ---------------------------------------------------------------------------
.text:10002DEE
.text:10002DEE						       loc_10002DEE:			       ; CODE XREF: GSCREnumDevices(void)+183j
.text:10002DEE 33 C0							       xor     eax, eax
.text:10002DF0
.text:10002DF0						       loc_10002DF0:			       ; CODE XREF: GSCREnumDevices(void)+18Cj
.text:10002DF0 8B 4C 24	10						       mov     ecx, [esp+128h+var_118] ; this
.text:10002DF4 50							       push    eax	       ; void *
.text:10002DF5 C6 84 24	28 01 00 00 01					       mov     byte ptr	[esp+12Ch+var_4], 1
.text:10002DFD 89 58 04							       mov     [eax+4],	ebx
.text:10002E00 E8 41 0C	00 00						       call    ?AddTail@CPtrList@@QAEPAU__POSITION@@PAX@Z ; CPtrList::AddTail(void *)
.text:10002E05
.text:10002E05						       loc_10002E05:			       ; CODE XREF: GSCREnumDevices(void)+152j
.text:10002E05											       ; GSCREnumDevices(void)+169j
.text:10002E05 8B CE							       mov     ecx, esi
.text:10002E07 E8 64 05	00 00						       call    sub_10003370
.text:10002E0C
.text:10002E0C						       loc_10002E0C:			       ; CODE XREF: GSCREnumDevices(void)+E5j
.text:10002E0C 8B CE							       mov     ecx, esi
.text:10002E0E E8 FD 04	00 00						       call    sub_10003310
.text:10002E13 56							       push    esi	       ; void *
.text:10002E14 E8 79 0B	00 00						       call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:10002E19 83 C4 04							       add     esp, 4
.text:10002E1C 43							       inc     ebx
.text:10002E1D 83 FB 07							       cmp     ebx, 7
.text:10002E20 0F 8C AD	FE FF FF					       jl      loc_10002CD3
.text:10002E26
.text:10002E26						       loc_10002E26:			       ; CODE XREF: GSCREnumDevices(void)+A7j
.text:10002E26 8D 4C 24	14						       lea     ecx, [esp+128h+var_114] ; this
.text:10002E2A C7 84 24	24 01 00 00 FF FF FF FF				       mov     [esp+128h+var_4], 0FFFFFFFFh
.text:10002E35 E8 52 0B	00 00						       call    ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10002E3A 8B 8C 24	1C 01 00 00					       mov     ecx, [esp+128h+var_C]
.text:10002E41 8B 44 24	10						       mov     eax, [esp+128h+var_118]
.text:10002E45 5F							       pop     edi
.text:10002E46 5E							       pop     esi
.text:10002E47 5D							       pop     ebp
.text:10002E48 5B							       pop     ebx
.text:10002E49 64 89 0D	00 00 00 00					       mov     large fs:0, ecx
.text:10002E50 81 C4 18	01 00 00					       add     esp, 118h
.text:10002E56 C3							       retn
.text:10002E56						       ?GSCREnumDevices@@YAPAXXZ endp
.text:10002E56
.text:10002E56						       ; ---------------------------------------------------------------------------
.text:10002E57 90 90 90	90 90 90 90 90 90				       align 10h
.text:10002E60						       ; Exported entry	 15. ?GSCRGetNumOfDevices@@YAHPAX@Z
.text:10002E60
.text:10002E60						       ; =============== S U B R O U T I N E =======================================
.text:10002E60
.text:10002E60
.text:10002E60						       ; int __cdecl GSCRGetNumOfDevices(void *)
.text:10002E60								       public ?GSCRGetNumOfDevices@@YAHPAX@Z
.text:10002E60						       ?GSCRGetNumOfDevices@@YAHPAX@Z proc near
.text:10002E60											       ; DATA XREF: .rdata:off_10005C68o
.text:10002E60
.text:10002E60						       arg_0	       = dword ptr  4
.text:10002E60
.text:10002E60 8B 44 24	04						       mov     eax, [esp+arg_0]
.text:10002E64 8B 40 0C							       mov     eax, [eax+0Ch]
.text:10002E67 C3							       retn
.text:10002E67						       ?GSCRGetNumOfDevices@@YAHPAX@Z endp
.text:10002E67
.text:10002E67						       ; ---------------------------------------------------------------------------
.text:10002E68 90 90 90	90 90 90 90 90					       align 10h
.text:10002E70						       ; Exported entry	 12. ?GSCRDeleteEnumDevices@@YAJPAX@Z
.text:10002E70
.text:10002E70						       ; =============== S U B R O U T I N E =======================================
.text:10002E70
.text:10002E70
.text:10002E70						       ; __int32 __cdecl GSCRDeleteEnumDevices(void *)
.text:10002E70								       public ?GSCRDeleteEnumDevices@@YAJPAX@Z
.text:10002E70						       ?GSCRDeleteEnumDevices@@YAJPAX@Z	proc near
.text:10002E70											       ; DATA XREF: .rdata:off_10005C68o
.text:10002E70
.text:10002E70						       arg_0	       = dword ptr  4
.text:10002E70
.text:10002E70 8B 44 24	04						       mov     eax, [esp+arg_0]
.text:10002E74 56							       push    esi
.text:10002E75 8B 70 04							       mov     esi, [eax+4]
.text:10002E78 85 F6							       test    esi, esi
.text:10002E7A 74 16							       jz      short loc_10002E92
.text:10002E7C
.text:10002E7C						       loc_10002E7C:			       ; CODE XREF: GSCRDeleteEnumDevices(void *)+20j
.text:10002E7C 8B C6							       mov     eax, esi
.text:10002E7E 8B 36							       mov     esi, [esi]
.text:10002E80 8B 48 08							       mov     ecx, [eax+8]
.text:10002E83 85 C9							       test    ecx, ecx
.text:10002E85 74 07							       jz      short loc_10002E8E
.text:10002E87 8B 11							       mov     edx, [ecx]
.text:10002E89 6A 01							       push    1
.text:10002E8B FF 52 04							       call    dword ptr [edx+4]
.text:10002E8E
.text:10002E8E						       loc_10002E8E:			       ; CODE XREF: GSCRDeleteEnumDevices(void *)+15j
.text:10002E8E 85 F6							       test    esi, esi
.text:10002E90 75 EA							       jnz     short loc_10002E7C
.text:10002E92
.text:10002E92						       loc_10002E92:			       ; CODE XREF: GSCRDeleteEnumDevices(void *)+Aj
.text:10002E92 33 C0							       xor     eax, eax
.text:10002E94 5E							       pop     esi
.text:10002E95 C3							       retn
.text:10002E95						       ?GSCRDeleteEnumDevices@@YAJPAX@Z	endp
.text:10002E95
.text:10002E95						       ; ---------------------------------------------------------------------------
.text:10002E96 90 90 90	90 90 90 90 90 90 90				       align 10h
.text:10002EA0						       ; Exported entry	 16. ?GSCRInitDevice@@YAPAXPAXHPAJ@Z
.text:10002EA0
.text:10002EA0						       ; =============== S U B R O U T I N E =======================================
.text:10002EA0
.text:10002EA0
.text:10002EA0						       ; void *__cdecl GSCRInitDevice(CPtrList *, int, __int32 *)
.text:10002EA0								       public ?GSCRInitDevice@@YAPAXPAXHPAJ@Z
.text:10002EA0						       ?GSCRInitDevice@@YAPAXPAXHPAJ@Z proc near
.text:10002EA0											       ; DATA XREF: .rdata:off_10005C68o
.text:10002EA0
.text:10002EA0						       arg_0	       = dword ptr  4
.text:10002EA0						       arg_4	       = dword ptr  8
.text:10002EA0
.text:10002EA0 8B 44 24	08						       mov     eax, [esp+arg_4]
.text:10002EA4 8B 4C 24	04						       mov     ecx, [esp+arg_0]	; this
.text:10002EA8 50							       push    eax	       ; int
.text:10002EA9 E8 A4 0B	00 00						       call    ?FindIndex@CPtrList@@QBEPAU__POSITION@@H@Z ; CPtrList::FindIndex(int)
.text:10002EAE 8B 40 08							       mov     eax, [eax+8]
.text:10002EB1 C3							       retn
.text:10002EB1						       ?GSCRInitDevice@@YAPAXPAXHPAJ@Z endp
.text:10002EB1
.text:10002EB1						       ; ---------------------------------------------------------------------------
.text:10002EB2 90 90 90	90 90 90 90 90 90 90 90	90 90 90		       align 10h
.text:10002EC0						       ; Exported entry	 22. ?GSCRUninitDevice@@YAJPAX@Z
.text:10002EC0
.text:10002EC0						       ; =============== S U B R O U T I N E =======================================
.text:10002EC0
.text:10002EC0
.text:10002EC0						       ; __int32 __cdecl GSCRUninitDevice(void *)
.text:10002EC0								       public ?GSCRUninitDevice@@YAJPAX@Z
.text:10002EC0						       ?GSCRUninitDevice@@YAJPAX@Z proc	near   ; DATA XREF: .rdata:off_10005C68o
.text:10002EC0
.text:10002EC0						       arg_0	       = dword ptr  4
.text:10002EC0
.text:10002EC0 8B 44 24	04						       mov     eax, [esp+arg_0]
.text:10002EC4 50							       push    eax	       ; void *
.text:10002EC5 E8 26 00	00 00						       call    ?GSCRStopLogging@@YAJPAX@Z ; GSCRStopLogging(void *)
.text:10002ECA 83 C4 04							       add     esp, 4
.text:10002ECD 33 C0							       xor     eax, eax
.text:10002ECF C3							       retn
.text:10002ECF						       ?GSCRUninitDevice@@YAJPAX@Z endp
.text:10002ECF
.text:10002ED0						       ; Exported entry	 20. ?GSCRStartLogging@@YAJPAXP6AKKJJ@Z@Z
.text:10002ED0
.text:10002ED0						       ; =============== S U B R O U T I N E =======================================
.text:10002ED0
.text:10002ED0
.text:10002ED0						       ; __int32 __cdecl GSCRStartLogging(void *, unsigned __int32 (__cdecl *)(unsigned	__int32, __int32, __int32))
.text:10002ED0								       public ?GSCRStartLogging@@YAJPAXP6AKKJJ@Z@Z
.text:10002ED0						       ?GSCRStartLogging@@YAJPAXP6AKKJJ@Z@Z proc near
.text:10002ED0											       ; DATA XREF: .rdata:off_10005C68o
.text:10002ED0
.text:10002ED0						       arg_0	       = dword ptr  4
.text:10002ED0
.text:10002ED0 8B 44 24	04						       mov     eax, [esp+arg_0]
.text:10002ED4 6A 00							       push    0	       ; struct	_SECURITY_ATTRIBUTES *
.text:10002ED6 6A 00							       push    0	       ; unsigned __int32
.text:10002ED8 6A 00							       push    0	       ; unsigned int
.text:10002EDA 6A 00							       push    0	       ; int
.text:10002EDC 50							       push    eax	       ; void *
.text:10002EDD 68 90 2F	00 10						       push    offset sub_10002F90 ; unsigned int (__cdecl *)(void *)
.text:10002EE2 E8 71 0B	00 00						       call    ?AfxBeginThread@@YGPAVCWinThread@@P6AIPAX@Z0HIKPAU_SECURITY_ATTRIBUTES@@@Z ; AfxBeginThread(uint	(*)(void *),void *,int,uint,ulong,_SECURITY_ATTRIBUTES *)
.text:10002EE7 33 C0							       xor     eax, eax
.text:10002EE9 C3							       retn
.text:10002EE9						       ?GSCRStartLogging@@YAJPAXP6AKKJJ@Z@Z endp
.text:10002EE9
.text:10002EE9						       ; ---------------------------------------------------------------------------
.text:10002EEA 90 90 90	90 90 90					       align 10h
.text:10002EF0						       ; Exported entry	 21. ?GSCRStopLogging@@YAJPAX@Z
.text:10002EF0
.text:10002EF0						       ; =============== S U B R O U T I N E =======================================
.text:10002EF0
.text:10002EF0
.text:10002EF0						       ; __int32 __cdecl GSCRStopLogging(void *)
.text:10002EF0								       public ?GSCRStopLogging@@YAJPAX@Z
.text:10002EF0						       ?GSCRStopLogging@@YAJPAX@Z proc near    ; CODE XREF: GSCRUninitDevice(void *)+5p
.text:10002EF0											       ; DATA XREF: .rdata:off_10005C68o
.text:10002EF0
.text:10002EF0						       arg_0	       = dword ptr  4
.text:10002EF0
.text:10002EF0 8B 44 24	04						       mov     eax, [esp+arg_0]
.text:10002EF4 68 D0 07	00 00						       push    7D0h	       ; dwMilliseconds
.text:10002EF9 C7 40 34	01 00 00 00					       mov     dword ptr [eax+34h], 1
.text:10002F00 8B 40 28							       mov     eax, [eax+28h]
.text:10002F03 50							       push    eax	       ; hHandle
.text:10002F04 FF 15 5C	50 00 10					       call    ds:WaitForSingleObject
.text:10002F0A 33 C0							       xor     eax, eax
.text:10002F0C C3							       retn
.text:10002F0C						       ?GSCRStopLogging@@YAJPAX@Z endp
.text:10002F0C
.text:10002F0C						       ; ---------------------------------------------------------------------------
.text:10002F0D 90 90 90							       align 10h
.text:10002F10						       ; Exported entry	 19. ?GSCRSetLogFilename@@YAJPAXPBDH@Z
.text:10002F10
.text:10002F10						       ; =============== S U B R O U T I N E =======================================
.text:10002F10
.text:10002F10
.text:10002F10						       ; __int32 __cdecl GSCRSetLogFilename(void *, const char *, int)
.text:10002F10								       public ?GSCRSetLogFilename@@YAJPAXPBDH@Z
.text:10002F10						       ?GSCRSetLogFilename@@YAJPAXPBDH@Z proc near
.text:10002F10											       ; DATA XREF: .rdata:off_10005C68o
.text:10002F10
.text:10002F10						       var_10	       = dword ptr -10h
.text:10002F10						       var_C	       = dword ptr -0Ch
.text:10002F10						       var_4	       = dword ptr -4
.text:10002F10						       arg_0	       = dword ptr  4
.text:10002F10						       arg_4	       = dword ptr  8
.text:10002F10						       arg_8	       = dword ptr  0Ch
.text:10002F10
.text:10002F10 6A FF							       push    0FFFFFFFFh
.text:10002F12 68 4A 41	00 10						       push    offset ?GSCRSetLogFilename@@YAJPAXPBDH@Z_SEH
.text:10002F17 64 A1 00	00 00 00					       mov     eax, large fs:0
.text:10002F1D 50							       push    eax
.text:10002F1E 64 89 25	00 00 00 00					       mov     large fs:0, esp
.text:10002F25 51							       push    ecx
.text:10002F26 53							       push    ebx
.text:10002F27 56							       push    esi
.text:10002F28 57							       push    edi
.text:10002F29 6A 14							       push    14h	       ; unsigned int
.text:10002F2B E8 92 0A	00 00						       call    ??2@YAPAXI@Z    ; operator new(uint)
.text:10002F30 83 C4 04							       add     esp, 4
.text:10002F33 89 44 24	0C						       mov     [esp+1Ch+var_10], eax
.text:10002F37 8B 5C 24	28						       mov     ebx, [esp+1Ch+arg_8]
.text:10002F3B 33 F6							       xor     esi, esi
.text:10002F3D 3B C6							       cmp     eax, esi
.text:10002F3F 89 74 24	18						       mov     [esp+1Ch+var_4],	esi
.text:10002F43 74 0F							       jz      short loc_10002F54
.text:10002F45 8B 4C 24	24						       mov     ecx, [esp+1Ch+arg_4]
.text:10002F49 53							       push    ebx
.text:10002F4A 51							       push    ecx
.text:10002F4B 8B C8							       mov     ecx, eax
.text:10002F4D E8 4E EE	FF FF						       call    sub_10001DA0
.text:10002F52 8B F0							       mov     esi, eax
.text:10002F54
.text:10002F54						       loc_10002F54:			       ; CODE XREF: GSCRSetLogFilename(void *,char const *,int)+33j
.text:10002F54 8B 7C 24	20						       mov     edi, [esp+1Ch+arg_0]
.text:10002F58 56							       push    esi	       ; struct	CObject	*
.text:10002F59 C7 44 24	1C FF FF FF FF					       mov     [esp+20h+var_4],	0FFFFFFFFh
.text:10002F61 8D 4F 08							       lea     ecx, [edi+8]    ; this
.text:10002F64 E8 89 0A	00 00						       call    ?AddTail@CObList@@QAEPAU__POSITION@@PAVCObject@@@Z ; CObList::AddTail(CObject *)
.text:10002F69 F6 C3 04							       test    bl, 4
.text:10002F6C 74 03							       jz      short loc_10002F71
.text:10002F6E 89 77 4C							       mov     [edi+4Ch], esi
.text:10002F71
.text:10002F71						       loc_10002F71:			       ; CODE XREF: GSCRSetLogFilename(void *,char const *,int)+5Cj
.text:10002F71 8B 4C 24	10						       mov     ecx, [esp+1Ch+var_C]
.text:10002F75 5F							       pop     edi
.text:10002F76 5E							       pop     esi
.text:10002F77 33 C0							       xor     eax, eax
.text:10002F79 5B							       pop     ebx
.text:10002F7A 64 89 0D	00 00 00 00					       mov     large fs:0, ecx
.text:10002F81 83 C4 10							       add     esp, 10h
.text:10002F84 C3							       retn
.text:10002F84						       ?GSCRSetLogFilename@@YAJPAXPBDH@Z endp
.text:10002F84
.text:10002F84						       ; ---------------------------------------------------------------------------
.text:10002F85 90 90 90	90 90 90 90 90 90 90 90				       align 10h
.text:10002F90
.text:10002F90						       ; =============== S U B R O U T I N E =======================================
.text:10002F90
.text:10002F90
.text:10002F90						       ; int __cdecl sub_10002F90(void *)
.text:10002F90						       sub_10002F90    proc near	       ; DATA XREF: GSCRStartLogging(void *,ulong (*)(ulong,long,long))+Do
.text:10002F90
.text:10002F90						       String1	       = byte ptr -3Ch
.text:10002F90						       arg_0	       = dword ptr  4
.text:10002F90
.text:10002F90 83 EC 3C							       sub     esp, 3Ch
.text:10002F93 56							       push    esi
.text:10002F94 8B 74 24	44						       mov     esi, [esp+40h+arg_0]
.text:10002F98 56							       push    esi
.text:10002F99 E8 92 00	00 00						       call    sub_10003030
.text:10002F9E 8B 46 34							       mov     eax, [esi+34h]
.text:10002FA1 83 C4 04							       add     esp, 4
.text:10002FA4 85 C0							       test    eax, eax
.text:10002FA6 75 5F							       jnz     short loc_10003007
.text:10002FA8 53							       push    ebx
.text:10002FA9 8B 1D 4C	50 00 10					       mov     ebx, ds:lstrcpyA
.text:10002FAF 57							       push    edi
.text:10002FB0 8B 3D 50	50 00 10					       mov     edi, ds:lstrlenA
.text:10002FB6
.text:10002FB6						       loc_10002FB6:			       ; CODE XREF: sub_10002F90+73j
.text:10002FB6 8D 44 24	0C						       lea     eax, [esp+48h+String1]
.text:10002FBA 68 A4 60	00 10						       push    offset aAt@lbc? ; "AT@LBC?\r"
.text:10002FBF 50							       push    eax	       ; lpString1
.text:10002FC0 FF D3							       call    ebx ; lstrcpyA
.text:10002FC2 8D 4C 24	0C						       lea     ecx, [esp+48h+String1]
.text:10002FC6 51							       push    ecx	       ; lpString
.text:10002FC7 FF D7							       call    edi ; lstrlenA
.text:10002FC9 8B 4E 24							       mov     ecx, [esi+24h]
.text:10002FCC 8D 54 24	0C						       lea     edx, [esp+48h+String1]
.text:10002FD0 50							       push    eax
.text:10002FD1 52							       push    edx
.text:10002FD2 E8 59 06	00 00						       call    sub_10003630
.text:10002FD7 8D 44 24	0C						       lea     eax, [esp+48h+String1]
.text:10002FDB 50							       push    eax	       ; lpString
.text:10002FDC FF D7							       call    edi ; lstrlenA
.text:10002FDE 8B 4E 24							       mov     ecx, [esi+24h]
.text:10002FE1 50							       push    eax
.text:10002FE2 E8 F9 05	00 00						       call    sub_100035E0
.text:10002FE7 8B 46 58							       mov     eax, [esi+58h]
.text:10002FEA 33 C9							       xor     ecx, ecx
.text:10002FEC 85 C0							       test    eax, eax
.text:10002FEE 7E 0E							       jle     short loc_10002FFE
.text:10002FF0 8B 56 34							       mov     edx, [esi+34h]
.text:10002FF3
.text:10002FF3						       loc_10002FF3:			       ; CODE XREF: sub_10002F90+6Cj
.text:10002FF3 85 D2							       test    edx, edx
.text:10002FF5 75 07							       jnz     short loc_10002FFE
.text:10002FF7 83 C1 64							       add     ecx, 64h
.text:10002FFA 3B C8							       cmp     ecx, eax
.text:10002FFC 7C F5							       jl      short loc_10002FF3
.text:10002FFE
.text:10002FFE						       loc_10002FFE:			       ; CODE XREF: sub_10002F90+5Ej
.text:10002FFE											       ; sub_10002F90+65j
.text:10002FFE 8B 46 34							       mov     eax, [esi+34h]
.text:10003001 85 C0							       test    eax, eax
.text:10003003 74 B1							       jz      short loc_10002FB6
.text:10003005 5F							       pop     edi
.text:10003006 5B							       pop     ebx
.text:10003007
.text:10003007						       loc_10003007:			       ; CODE XREF: sub_10002F90+16j
.text:10003007 56							       push    esi
.text:10003008 E8 53 01	00 00						       call    sub_10003160
.text:1000300D 8B 4E 28							       mov     ecx, [esi+28h]
.text:10003010 83 C4 04							       add     esp, 4
.text:10003013 51							       push    ecx	       ; hEvent
.text:10003014 FF 15 54	50 00 10					       call    ds:SetEvent
.text:1000301A 33 C0							       xor     eax, eax
.text:1000301C 5E							       pop     esi
.text:1000301D 83 C4 3C							       add     esp, 3Ch
.text:10003020 C3							       retn
.text:10003020						       sub_10002F90    endp
.text:10003020
.text:10003020						       ; ---------------------------------------------------------------------------
.text:10003021 90 90 90	90 90 90 90 90 90 90 90	90 90 90 90		       align 10h
.text:10003030
.text:10003030						       ; =============== S U B R O U T I N E =======================================
.text:10003030
.text:10003030
.text:10003030						       sub_10003030    proc near	       ; CODE XREF: sub_10002F90+9p
.text:10003030
.text:10003030						       var_4C	       = dword ptr -4Ch
.text:10003030						       String1	       = byte ptr -48h
.text:10003030						       var_C	       = dword ptr -0Ch
.text:10003030						       var_4	       = dword ptr -4
.text:10003030						       arg_0	       = dword ptr  4
.text:10003030
.text:10003030 6A FF							       push    0FFFFFFFFh
.text:10003032 68 73 41	00 10						       push    offset SEH_10003030
.text:10003037 64 A1 00	00 00 00					       mov     eax, large fs:0
.text:1000303D 50							       push    eax
.text:1000303E 64 89 25	00 00 00 00					       mov     large fs:0, esp
.text:10003045 83 EC 40							       sub     esp, 40h
.text:10003048 56							       push    esi
.text:10003049 8B 74 24	54						       mov     esi, [esp+50h+arg_0]
.text:1000304D 57							       push    edi
.text:1000304E 8B CE							       mov     ecx, esi
.text:10003050 E8 6B F0	FF FF						       call    sub_100020C0
.text:10003055 33 FF							       xor     edi, edi
.text:10003057 68 A0 02	00 00						       push    2A0h	       ; unsigned int
.text:1000305C 89 7E 3C							       mov     [esi+3Ch], edi
.text:1000305F E8 5E 09	00 00						       call    ??2@YAPAXI@Z    ; operator new(uint)
.text:10003064 83 C4 04							       add     esp, 4
.text:10003067 89 44 24	08						       mov     [esp+54h+var_4C], eax
.text:1000306B 3B C7							       cmp     eax, edi
.text:1000306D 89 7C 24	50						       mov     [esp+54h+var_4],	edi
.text:10003071 74 09							       jz      short loc_1000307C
.text:10003073 8B C8							       mov     ecx, eax
.text:10003075 E8 06 02	00 00						       call    sub_10003280
.text:1000307A EB 02							       jmp     short loc_1000307E
.text:1000307C						       ; ---------------------------------------------------------------------------
.text:1000307C
.text:1000307C						       loc_1000307C:			       ; CODE XREF: sub_10003030+41j
.text:1000307C 33 C0							       xor     eax, eax
.text:1000307E
.text:1000307E						       loc_1000307E:			       ; CODE XREF: sub_10003030+4Aj
.text:1000307E 3B C7							       cmp     eax, edi
.text:10003080 C7 44 24	50 FF FF FF FF					       mov     [esp+54h+var_4],	0FFFFFFFFh
.text:10003088 89 46 24							       mov     [esi+24h], eax
.text:1000308B 75 16							       jnz     short loc_100030A3
.text:1000308D 5F							       pop     edi
.text:1000308E B8 05 40	00 80						       mov     eax, 80004005h
.text:10003093 5E							       pop     esi
.text:10003094 8B 4C 24	40						       mov     ecx, [esp+4Ch+var_C]
.text:10003098 64 89 0D	00 00 00 00					       mov     large fs:0, ecx
.text:1000309F 83 C4 4C							       add     esp, 4Ch
.text:100030A2 C3							       retn
.text:100030A3						       ; ---------------------------------------------------------------------------
.text:100030A3
.text:100030A3						       loc_100030A3:			       ; CODE XREF: sub_10003030+5Bj
.text:100030A3 68 D0 2B	00 10						       push    offset loc_10002BD0
.text:100030A8 8B C8							       mov     ecx, eax
.text:100030AA E8 21 05	00 00						       call    sub_100035D0
.text:100030AF 8D 4C 24	58						       lea     ecx, [esp+54h+arg_0] ; this
.text:100030B3 E8 CE 08	00 00						       call    ??0CString@@QAE@XZ ; CString::CString(void)
.text:100030B8 8D 44 24	58						       lea     eax, [esp+54h+arg_0]
.text:100030BC 68 BC 60	00 10						       push    offset aCom1d   ; "COM%1d"
.text:100030C1 50							       push    eax	       ; this
.text:100030C2 C7 44 24	58 01 00 00 00					       mov     [esp+5Ch+var_4],	1
.text:100030CA E8 47 09	00 00						       call    ?Format@CString@@QAAXPBDZZ ; CString::Format(char const *,...)
.text:100030CF 8B 4C 24	60						       mov     ecx, [esp+5Ch+arg_0]
.text:100030D3 83 C4 08							       add     esp, 8
.text:100030D6 6A 01							       push    1
.text:100030D8 6A 08							       push    8
.text:100030DA 57							       push    edi
.text:100030DB 68 00 C2	01 00						       push    1C200h
.text:100030E0 51							       push    ecx
.text:100030E1 8B 4E 24							       mov     ecx, [esi+24h]
.text:100030E4 E8 B7 02	00 00						       call    sub_100033A0
.text:100030E9 3B C7							       cmp     eax, edi
.text:100030EB 75 44							       jnz     short loc_10003131
.text:100030ED 8D 54 24	0C						       lea     edx, [esp+54h+String1]
.text:100030F1 68 B0 60	00 10						       push    offset aAt@lbc1 ; "AT@LBC1\r"
.text:100030F6 52							       push    edx	       ; lpString1
.text:100030F7 FF 15 4C	50 00 10					       call    ds:lstrcpyA
.text:100030FD 8B 3D 50	50 00 10					       mov     edi, ds:lstrlenA
.text:10003103 8D 44 24	0C						       lea     eax, [esp+54h+String1]
.text:10003107 50							       push    eax	       ; lpString
.text:10003108 FF D7							       call    edi ; lstrlenA
.text:1000310A 8D 4C 24	0C						       lea     ecx, [esp+54h+String1]
.text:1000310E 50							       push    eax
.text:1000310F 51							       push    ecx
.text:10003110 8B 4E 24							       mov     ecx, [esi+24h]
.text:10003113 E8 18 05	00 00						       call    sub_10003630
.text:10003118 8D 54 24	0C						       lea     edx, [esp+54h+String1]
.text:1000311C 52							       push    edx	       ; lpString
.text:1000311D FF D7							       call    edi ; lstrlenA
.text:1000311F 8B 4E 24							       mov     ecx, [esi+24h]
.text:10003122 50							       push    eax
.text:10003123 E8 B8 04	00 00						       call    sub_100035E0
.text:10003128 8B 4E 24							       mov     ecx, [esi+24h]
.text:1000312B 56							       push    esi
.text:1000312C E8 2F 08	00 00						       call    sub_10003960
.text:10003131
.text:10003131						       loc_10003131:			       ; CODE XREF: sub_10003030+BBj
.text:10003131 8D 4C 24	58						       lea     ecx, [esp+54h+arg_0] ; this
.text:10003135 C7 44 24	50 FF FF FF FF					       mov     [esp+54h+var_4],	0FFFFFFFFh
.text:1000313D E8 4A 08	00 00						       call    ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10003142 8B 4C 24	48						       mov     ecx, [esp+54h+var_C]
.text:10003146 5F							       pop     edi
.text:10003147 33 C0							       xor     eax, eax
.text:10003149 5E							       pop     esi
.text:1000314A 64 89 0D	00 00 00 00					       mov     large fs:0, ecx
.text:10003151 83 C4 4C							       add     esp, 4Ch
.text:10003154 C3							       retn
.text:10003154						       sub_10003030    endp
.text:10003154
.text:10003154						       ; ---------------------------------------------------------------------------
.text:10003155 90 90 90	90 90 90 90 90 90 90 90				       align 10h
.text:10003160
.text:10003160						       ; =============== S U B R O U T I N E =======================================
.text:10003160
.text:10003160
.text:10003160						       sub_10003160    proc near	       ; CODE XREF: sub_10002F90+78p
.text:10003160
.text:10003160						       String1	       = byte ptr -3Ch
.text:10003160						       arg_0	       = dword ptr  4
.text:10003160
.text:10003160 83 EC 3C							       sub     esp, 3Ch
.text:10003163 56							       push    esi
.text:10003164 8B 74 24	44						       mov     esi, [esp+40h+arg_0]
.text:10003168 8B 46 24							       mov     eax, [esi+24h]
.text:1000316B 85 C0							       test    eax, eax
.text:1000316D 75 0A							       jnz     short loc_10003179
.text:1000316F B8 05 40	00 80						       mov     eax, 80004005h
.text:10003174 5E							       pop     esi
.text:10003175 83 C4 3C							       add     esp, 3Ch
.text:10003178 C3							       retn
.text:10003179						       ; ---------------------------------------------------------------------------
.text:10003179
.text:10003179						       loc_10003179:			       ; CODE XREF: sub_10003160+Dj
.text:10003179 53							       push    ebx
.text:1000317A 57							       push    edi
.text:1000317B 8D 44 24	0C						       lea     eax, [esp+48h+String1]
.text:1000317F 68 C4 60	00 10						       push    offset aAt@lbc2 ; "AT@LBC2\r"
.text:10003184 50							       push    eax	       ; lpString1
.text:10003185 FF 15 4C	50 00 10					       call    ds:lstrcpyA
.text:1000318B 8B 3D 60	50 00 10					       mov     edi, ds:CreateEventA
.text:10003191 6A 00							       push    0	       ; lpName
.text:10003193 6A 00							       push    0	       ; bInitialState
.text:10003195 6A 01							       push    1	       ; bManualReset
.text:10003197 6A 00							       push    0	       ; lpEventAttributes
.text:10003199 FF D7							       call    edi ; CreateEventA
.text:1000319B 6A 00							       push    0	       ; lpName
.text:1000319D 6A 00							       push    0	       ; bInitialState
.text:1000319F 6A 01							       push    1	       ; bManualReset
.text:100031A1 6A 00							       push    0	       ; lpEventAttributes
.text:100031A3 89 46 2C							       mov     [esi+2Ch], eax
.text:100031A6 FF D7							       call    edi ; CreateEventA
.text:100031A8 8B 3D 50	50 00 10					       mov     edi, ds:lstrlenA
.text:100031AE 8D 4C 24	0C						       lea     ecx, [esp+48h+String1]
.text:100031B2 51							       push    ecx	       ; lpString
.text:100031B3 89 46 30							       mov     [esi+30h], eax
.text:100031B6 FF D7							       call    edi ; lstrlenA
.text:100031B8 8B 4E 24							       mov     ecx, [esi+24h]
.text:100031BB 8D 54 24	0C						       lea     edx, [esp+48h+String1]
.text:100031BF 50							       push    eax
.text:100031C0 52							       push    edx
.text:100031C1 E8 6A 04	00 00						       call    sub_10003630
.text:100031C6 8D 44 24	0C						       lea     eax, [esp+48h+String1]
.text:100031CA 50							       push    eax	       ; lpString
.text:100031CB FF D7							       call    edi ; lstrlenA
.text:100031CD 8B 4E 24							       mov     ecx, [esi+24h]
.text:100031D0 50							       push    eax
.text:100031D1 E8 0A 04	00 00						       call    sub_100035E0
.text:100031D6 8B 46 2C							       mov     eax, [esi+2Ch]
.text:100031D9 8B 3D 5C	50 00 10					       mov     edi, ds:WaitForSingleObject
.text:100031DF 8B 1D 64	50 00 10					       mov     ebx, ds:CloseHandle
.text:100031E5 85 C0							       test    eax, eax
.text:100031E7 74 15							       jz      short loc_100031FE
.text:100031E9 68 B8 0B	00 00						       push    0BB8h	       ; dwMilliseconds
.text:100031EE 50							       push    eax	       ; hHandle
.text:100031EF FF D7							       call    edi ; WaitForSingleObject
.text:100031F1 8B 4E 2C							       mov     ecx, [esi+2Ch]
.text:100031F4 51							       push    ecx	       ; hObject
.text:100031F5 FF D3							       call    ebx ; CloseHandle
.text:100031F7 C7 46 2C	00 00 00 00					       mov     dword ptr [esi+2Ch], 0
.text:100031FE
.text:100031FE						       loc_100031FE:			       ; CODE XREF: sub_10003160+87j
.text:100031FE 8B 4E 24							       mov     ecx, [esi+24h]
.text:10003201 E8 6A 01	00 00						       call    sub_10003370
.text:10003206 8B 46 30							       mov     eax, [esi+30h]
.text:10003209 85 C0							       test    eax, eax
.text:1000320B 74 15							       jz      short loc_10003222
.text:1000320D 68 B8 0B	00 00						       push    0BB8h	       ; dwMilliseconds
.text:10003212 50							       push    eax	       ; hHandle
.text:10003213 FF D7							       call    edi ; WaitForSingleObject
.text:10003215 8B 56 30							       mov     edx, [esi+30h]
.text:10003218 52							       push    edx	       ; hObject
.text:10003219 FF D3							       call    ebx ; CloseHandle
.text:1000321B C7 46 2C	00 00 00 00					       mov     dword ptr [esi+2Ch], 0
.text:10003222
.text:10003222						       loc_10003222:			       ; CODE XREF: sub_10003160+ABj
.text:10003222 8B 7E 24							       mov     edi, [esi+24h]
.text:10003225 85 FF							       test    edi, edi
.text:10003227 74 10							       jz      short loc_10003239
.text:10003229 8B CF							       mov     ecx, edi
.text:1000322B E8 E0 00	00 00						       call    sub_10003310
.text:10003230 57							       push    edi	       ; void *
.text:10003231 E8 5C 07	00 00						       call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:10003236 83 C4 04							       add     esp, 4
.text:10003239
.text:10003239						       loc_10003239:			       ; CODE XREF: sub_10003160+C7j
.text:10003239 8B 46 3C							       mov     eax, [esi+3Ch]
.text:1000323C 5F							       pop     edi
.text:1000323D 85 C0							       test    eax, eax
.text:1000323F C7 46 24	00 00 00 00					       mov     dword ptr [esi+24h], 0
.text:10003246 5B							       pop     ebx
.text:10003247 74 07							       jz      short loc_10003250
.text:10003249 8B 06							       mov     eax, [esi]
.text:1000324B 8B CE							       mov     ecx, esi
.text:1000324D FF 50 14							       call    dword ptr [eax+14h]
.text:10003250
.text:10003250						       loc_10003250:			       ; CODE XREF: sub_10003160+E7j
.text:10003250 8B CE							       mov     ecx, esi
.text:10003252 E8 39 F0	FF FF						       call    sub_10002290
.text:10003257 8B CE							       mov     ecx, esi
.text:10003259 E8 52 EF	FF FF						       call    sub_100021B0
.text:1000325E 33 C0							       xor     eax, eax
.text:10003260 5E							       pop     esi
.text:10003261 83 C4 3C							       add     esp, 3Ch
.text:10003264 C3							       retn
.text:10003264						       sub_10003160    endp
.text:10003264
.text:10003264						       ; ---------------------------------------------------------------------------
.text:10003265 90 90 90	90 90 90 90 90 90 90 90				       align 10h
.text:10003270
.text:10003270						       loc_10003270:			       ; DATA XREF: sub_100033A0+212o
.text:10003270 8B 4C 24	04						       mov     ecx, [esp+4]
.text:10003274 85 C9							       test    ecx, ecx
.text:10003276 74 05							       jz      short locret_1000327D
.text:10003278 E9 83 04	00 00						       jmp     loc_10003700
.text:1000327D						       ; ---------------------------------------------------------------------------
.text:1000327D
.text:1000327D						       locret_1000327D:			       ; CODE XREF: .text:10003276j
.text:1000327D C3							       retn
.text:1000327D						       ; ---------------------------------------------------------------------------
.text:1000327E 90 90							       align 10h
.text:10003280
.text:10003280						       ; =============== S U B R O U T I N E =======================================
.text:10003280
.text:10003280
.text:10003280						       sub_10003280    proc near	       ; CODE XREF: GSCREnumDevices(void)+92p
.text:10003280											       ; sub_10003030+45p
.text:10003280 53							       push    ebx
.text:10003281 55							       push    ebp
.text:10003282 56							       push    esi
.text:10003283 8B F1							       mov     esi, ecx
.text:10003285 33 DB							       xor     ebx, ebx
.text:10003287 57							       push    edi
.text:10003288 89 1E							       mov     [esi], ebx
.text:1000328A 89 5E 18							       mov     [esi+18h], ebx
.text:1000328D 88 5E 08							       mov     [esi+8],	bl
.text:10003290 89 5E 14							       mov     [esi+14h], ebx
.text:10003293 89 5E 38							       mov     [esi+38h], ebx
.text:10003296 C7 46 3C	FF FF FF FF					       mov     dword ptr [esi+3Ch], 0FFFFFFFFh
.text:1000329D 89 5E 40							       mov     [esi+40h], ebx
.text:100032A0 89 9E 9C	02 00 00					       mov     [esi+29Ch], ebx
.text:100032A6 88 9E 80	00 00 00					       mov     [esi+80h], bl
.text:100032AC 88 9E 81	00 00 00					       mov     [esi+81h], bl
.text:100032B2 C7 86 84	01 00 00 01 00 00 00				       mov     dword ptr [esi+184h], 1
.text:100032BC 89 9E 8C	02 00 00					       mov     [esi+28Ch], ebx
.text:100032C2 89 9E 88	01 00 00					       mov     [esi+188h], ebx
.text:100032C8 89 5E 04							       mov     [esi+4],	ebx
.text:100032CB 89 9E 94	02 00 00					       mov     [esi+294h], ebx
.text:100032D1 33 FF							       xor     edi, edi
.text:100032D3 8D 6E 1C							       lea     ebp, [esi+1Ch]
.text:100032D6
.text:100032D6						       loc_100032D6:			       ; CODE XREF: sub_10003280+7Fj
.text:100032D6 83 FF 01							       cmp     edi, 1
.text:100032D9 74 0F							       jz      short loc_100032EA
.text:100032DB 83 FF 03							       cmp     edi, 3
.text:100032DE 74 0A							       jz      short loc_100032EA
.text:100032E0 83 FF 05							       cmp     edi, 5
.text:100032E3 74 05							       jz      short loc_100032EA
.text:100032E5 53							       push    ebx
.text:100032E6 53							       push    ebx
.text:100032E7 53							       push    ebx
.text:100032E8 EB 04							       jmp     short loc_100032EE
.text:100032EA						       ; ---------------------------------------------------------------------------
.text:100032EA
.text:100032EA						       loc_100032EA:			       ; CODE XREF: sub_10003280+59j
.text:100032EA											       ; sub_10003280+5Ej ...
.text:100032EA 53							       push    ebx	       ; lpName
.text:100032EB 53							       push    ebx	       ; bInitialState
.text:100032EC 6A 01							       push    1	       ; bManualReset
.text:100032EE
.text:100032EE						       loc_100032EE:			       ; CODE XREF: sub_10003280+68j
.text:100032EE 53							       push    ebx	       ; lpEventAttributes
.text:100032EF FF 15 60	50 00 10					       call    ds:CreateEventA
.text:100032F5 89 45 00							       mov     [ebp+0],	eax
.text:100032F8 47							       inc     edi
.text:100032F9 83 C5 04							       add     ebp, 4
.text:100032FC 83 FF 07							       cmp     edi, 7
.text:100032FF 7C D5							       jl      short loc_100032D6
.text:10003301 8B C6							       mov     eax, esi
.text:10003303 5F							       pop     edi
.text:10003304 5E							       pop     esi
.text:10003305 5D							       pop     ebp
.text:10003306 5B							       pop     ebx
.text:10003307 C3							       retn
.text:10003307						       sub_10003280    endp
.text:10003307
.text:10003307						       ; ---------------------------------------------------------------------------
.text:10003308 90 90 90	90 90 90 90 90					       align 10h
.text:10003310
.text:10003310						       ; =============== S U B R O U T I N E =======================================
.text:10003310
.text:10003310
.text:10003310						       sub_10003310    proc near	       ; CODE XREF: GSCREnumDevices(void)+1AEp
.text:10003310											       ; sub_10003160+CBp
.text:10003310 57							       push    edi
.text:10003311 8B F9							       mov     edi, ecx
.text:10003313 8B 47 40							       mov     eax, [edi+40h]
.text:10003316 85 C0							       test    eax, eax
.text:10003318 74 0C							       jz      short loc_10003326
.text:1000331A 68 D0 07	00 00						       push    7D0h	       ; dwMilliseconds
.text:1000331F 50							       push    eax	       ; hHandle
.text:10003320 FF 15 5C	50 00 10					       call    ds:WaitForSingleObject
.text:10003326
.text:10003326						       loc_10003326:			       ; CODE XREF: sub_10003310+8j
.text:10003326 53							       push    ebx
.text:10003327 56							       push    esi
.text:10003328 C7 47 40	00 00 00 00					       mov     dword ptr [edi+40h], 0
.text:1000332F 8D 77 1C							       lea     esi, [edi+1Ch]
.text:10003332 BB 07 00	00 00						       mov     ebx, 7
.text:10003337
.text:10003337						       loc_10003337:			       ; CODE XREF: sub_10003310+3Fj
.text:10003337 8B 06							       mov     eax, [esi]
.text:10003339 83 F8 FF							       cmp     eax, 0FFFFFFFFh
.text:1000333C 74 07							       jz      short loc_10003345
.text:1000333E 50							       push    eax	       ; hObject
.text:1000333F FF 15 64	50 00 10					       call    ds:CloseHandle
.text:10003345
.text:10003345						       loc_10003345:			       ; CODE XREF: sub_10003310+2Cj
.text:10003345 C7 06 FF	FF FF FF					       mov     dword ptr [esi],	0FFFFFFFFh
.text:1000334B 83 C6 04							       add     esi, 4
.text:1000334E 4B							       dec     ebx
.text:1000334F 75 E6							       jnz     short loc_10003337
.text:10003351 8B 47 3C							       mov     eax, [edi+3Ch]
.text:10003354 5E							       pop     esi
.text:10003355 83 F8 FF							       cmp     eax, 0FFFFFFFFh
.text:10003358 5B							       pop     ebx
.text:10003359 74 07							       jz      short loc_10003362
.text:1000335B 50							       push    eax	       ; hObject
.text:1000335C FF 15 64	50 00 10					       call    ds:CloseHandle
.text:10003362
.text:10003362						       loc_10003362:			       ; CODE XREF: sub_10003310+49j
.text:10003362 C7 47 3C	FF FF FF FF					       mov     dword ptr [edi+3Ch], 0FFFFFFFFh
.text:10003369 5F							       pop     edi
.text:1000336A C3							       retn
.text:1000336A						       sub_10003310    endp
.text:1000336A
.text:1000336A						       ; ---------------------------------------------------------------------------
.text:1000336B 90 90 90	90 90						       align 10h
.text:10003370
.text:10003370						       ; =============== S U B R O U T I N E =======================================
.text:10003370
.text:10003370
.text:10003370						       sub_10003370    proc near	       ; CODE XREF: GSCREnumDevices(void)+1A7p
.text:10003370											       ; sub_10003160+A1p
.text:10003370 56							       push    esi
.text:10003371 8B F1							       mov     esi, ecx
.text:10003373 8B 46 1C							       mov     eax, [esi+1Ch]
.text:10003376 C7 06 00	00 00 00					       mov     dword ptr [esi],	0
.text:1000337C 50							       push    eax	       ; hEvent
.text:1000337D FF 15 54	50 00 10					       call    ds:SetEvent
.text:10003383 8B 46 40							       mov     eax, [esi+40h]
.text:10003386 85 C0							       test    eax, eax
.text:10003388 74 0C							       jz      short loc_10003396
.text:1000338A 68 D0 07	00 00						       push    7D0h	       ; dwMilliseconds
.text:1000338F 50							       push    eax	       ; hHandle
.text:10003390 FF 15 5C	50 00 10					       call    ds:WaitForSingleObject
.text:10003396
.text:10003396						       loc_10003396:			       ; CODE XREF: sub_10003370+18j
.text:10003396 C7 46 40	00 00 00 00					       mov     dword ptr [esi+40h], 0
.text:1000339D 5E							       pop     esi
.text:1000339E C3							       retn
.text:1000339E						       sub_10003370    endp
.text:1000339E
.text:1000339E						       ; ---------------------------------------------------------------------------
.text:1000339F 90							       align 10h
.text:100033A0
.text:100033A0						       ; =============== S U B R O U T I N E =======================================
.text:100033A0
.text:100033A0
.text:100033A0						       sub_100033A0    proc near	       ; CODE XREF: GSCREnumDevices(void)+DEp
.text:100033A0											       ; sub_10003030+B4p
.text:100033A0
.text:100033A0						       dwSize	       = dword ptr -30h
.text:100033A0						       var_2C	       = dword ptr -2Ch
.text:100033A0						       var_28	       = dword ptr -28h
.text:100033A0						       var_24	       = dword ptr -24h
.text:100033A0						       var_20	       = dword ptr -20h
.text:100033A0						       var_1C	       = dword ptr -1Ch
.text:100033A0						       var_18	       = dword ptr -18h
.text:100033A0						       var_14	       = dword ptr -14h
.text:100033A0						       var_10	       = word ptr -10h
.text:100033A0						       var_E	       = word ptr -0Eh
.text:100033A0						       var_C	       = word ptr -0Ch
.text:100033A0						       var_A	       = byte ptr -0Ah
.text:100033A0						       var_9	       = byte ptr -9
.text:100033A0						       var_8	       = byte ptr -8
.text:100033A0						       var_7	       = byte ptr -7
.text:100033A0						       var_6	       = byte ptr -6
.text:100033A0						       var_3	       = byte ptr -3
.text:100033A0						       Source	       = dword ptr  4
.text:100033A0						       arg_4	       = dword ptr  8
.text:100033A0						       arg_8	       = dword ptr  0Ch
.text:100033A0						       arg_C	       = byte ptr  10h
.text:100033A0						       arg_10	       = dword ptr  14h
.text:100033A0
.text:100033A0 83 EC 30							       sub     esp, 30h
.text:100033A3 53							       push    ebx
.text:100033A4 56							       push    esi	       ; flProtect
.text:100033A5 8B F1							       mov     esi, ecx
.text:100033A7 57							       push    edi	       ; flAllocationType
.text:100033A8 33 FF							       xor     edi, edi
.text:100033AA 8B 46 3C							       mov     eax, [esi+3Ch]
.text:100033AD 89 7C 24	0C						       mov     [esp+3Ch+dwSize], edi
.text:100033B1 83 F8 FF							       cmp     eax, 0FFFFFFFFh
.text:100033B4 89 7C 24	10						       mov     [esp+3Ch+var_2C], edi
.text:100033B8 89 7C 24	14						       mov     [esp+3Ch+var_28], edi
.text:100033BC 89 7C 24	18						       mov     [esp+3Ch+var_24], edi
.text:100033C0 89 7C 24	1C						       mov     [esp+3Ch+var_20], edi
.text:100033C4 74 07							       jz      short loc_100033CD
.text:100033C6 50							       push    eax	       ; hObject
.text:100033C7 FF 15 64	50 00 10					       call    ds:CloseHandle
.text:100033CD
.text:100033CD						       loc_100033CD:			       ; CODE XREF: sub_100033A0+24j
.text:100033CD 8B 44 24	40						       mov     eax, [esp+3Ch+Source]
.text:100033D1 C7 46 3C	FF FF FF FF					       mov     dword ptr [esi+3Ch], 0FFFFFFFFh
.text:100033D8 3B C7							       cmp     eax, edi
.text:100033DA 0F 84 C5	01 00 00					       jz      loc_100035A5
.text:100033E0 55							       push    ebp
.text:100033E1 8D 6E 08							       lea     ebp, [esi+8]
.text:100033E4 6A 0A							       push    0Ah	       ; Count
.text:100033E6 50							       push    eax	       ; Source
.text:100033E7 55							       push    ebp	       ; Dest
.text:100033E8 FF 15 30	51 00 10					       call    ds:strncpy
.text:100033EE 8B 4C 24	58						       mov     ecx, [esp+4Ch+arg_8]
.text:100033F2 8B 44 24	54						       mov     eax, [esp+4Ch+arg_4]
.text:100033F6 8B 54 24	60						       mov     edx, [esp+4Ch+arg_10]
.text:100033FA 89 4E 18							       mov     [esi+18h], ecx
.text:100033FD 89 46 14							       mov     [esi+14h], eax
.text:10003400 8D 4E 44							       lea     ecx, [esi+44h]
.text:10003403 33 C0							       xor     eax, eax
.text:10003405 89 56 04							       mov     [esi+4],	edx
.text:10003408 89 01							       mov     [ecx], eax
.text:1000340A 33 D2							       xor     edx, edx
.text:1000340C 8D 7C 24	30						       lea     edi, [esp+4Ch+var_1C]
.text:10003410 33 DB							       xor     ebx, ebx
.text:10003412 89 41 04							       mov     [ecx+4],	eax
.text:10003415 83 C4 0C							       add     esp, 0Ch
.text:10003418 89 41 08							       mov     [ecx+8],	eax
.text:1000341B 89 41 0C							       mov     [ecx+0Ch], eax
.text:1000341E 89 41 10							       mov     [ecx+10h], eax
.text:10003421 8D 46 58							       lea     eax, [esi+58h]
.text:10003424 33 C9							       xor     ecx, ecx
.text:10003426 89 10							       mov     [eax], edx
.text:10003428 89 50 04							       mov     [eax+4],	edx
.text:1000342B 89 50 08							       mov     [eax+8],	edx
.text:1000342E 89 50 0C							       mov     [eax+0Ch], edx
.text:10003431 89 50 10							       mov     [eax+10h], edx
.text:10003434 8D 56 6C							       lea     edx, [esi+6Ch]
.text:10003437 33 C0							       xor     eax, eax
.text:10003439 89 0A							       mov     [edx], ecx
.text:1000343B 89 4A 04							       mov     [edx+4],	ecx
.text:1000343E 89 4A 08							       mov     [edx+8],	ecx
.text:10003441 89 4A 0C							       mov     [edx+0Ch], ecx
.text:10003444 89 4A 10							       mov     [edx+10h], ecx
.text:10003447 B9 07 00	00 00						       mov     ecx, 7
.text:1000344C F3 AB							       rep stosd
.text:1000344E 8B 46 14							       mov     eax, [esi+14h]
.text:10003451 C7 44 24	24 1C 00 00 00					       mov     [esp+40h+var_1C], 1Ch
.text:10003459 89 44 24	28						       mov     [esp+40h+var_18], eax
.text:1000345D 8B 46 18							       mov     eax, [esi+18h]
.text:10003460 2B C3							       sub     eax, ebx
.text:10003462 74 20							       jz      short loc_10003484
.text:10003464 48							       dec     eax
.text:10003465 74 10							       jz      short loc_10003477
.text:10003467 48							       dec     eax
.text:10003468 75 27							       jnz     short loc_10003491
.text:1000346A 8B 44 24	2C						       mov     eax, [esp+40h+var_14]
.text:1000346E C6 44 24	37 02						       mov     [esp+40h+var_9],	2
.text:10003473 0C 02							       or      al, 2
.text:10003475 EB 1E							       jmp     short loc_10003495
.text:10003477						       ; ---------------------------------------------------------------------------
.text:10003477
.text:10003477						       loc_10003477:			       ; CODE XREF: sub_100033A0+C5j
.text:10003477 8B 44 24	2C						       mov     eax, [esp+40h+var_14]
.text:1000347B C6 44 24	37 01						       mov     [esp+40h+var_9],	1
.text:10003480 0C 02							       or      al, 2
.text:10003482 EB 11							       jmp     short loc_10003495
.text:10003484						       ; ---------------------------------------------------------------------------
.text:10003484
.text:10003484						       loc_10003484:			       ; CODE XREF: sub_100033A0+C2j
.text:10003484 8B 44 24	2C						       mov     eax, [esp+40h+var_14]
.text:10003488 C6 44 24	37 00						       mov     [esp+40h+var_9],	0
.text:1000348D 24 FD							       and     al, 0FDh
.text:1000348F EB 04							       jmp     short loc_10003495
.text:10003491						       ; ---------------------------------------------------------------------------
.text:10003491
.text:10003491						       loc_10003491:			       ; CODE XREF: sub_100033A0+C8j
.text:10003491 8B 44 24	2C						       mov     eax, [esp+40h+var_14]
.text:10003495
.text:10003495						       loc_10003495:			       ; CODE XREF: sub_100033A0+D5j
.text:10003495											       ; sub_100033A0+E2j ...
.text:10003495 8A 4C 24	50						       mov     cl, [esp+40h+arg_C]
.text:10003499 6A 00							       push    0	       ; hTemplateFile
.text:1000349B 68 00 00	00 40						       push    40000000h       ; dwFlagsAndAttributes
.text:100034A0 6A 03							       push    3	       ; dwCreationDisposition
.text:100034A2 25 83 80	FF FF						       and     eax, 0FFFF8083h
.text:100034A7 6A 00							       push    0	       ; lpSecurityAttributes
.text:100034A9 6A 00							       push    0	       ; dwShareMode
.text:100034AB 0C 01							       or      al, 1
.text:100034AD 68 00 00	00 C0						       push    0C0000000h      ; dwDesiredAccess
.text:100034B2 55							       push    ebp	       ; lpFileName
.text:100034B3 C6 44 24	54 00						       mov     [esp+5Ch+var_8],	0
.text:100034B8 88 4C 24	52						       mov     [esp+5Ch+var_A],	cl
.text:100034BC 89 44 24	48						       mov     [esp+5Ch+var_14], eax
.text:100034C0 66 C7 44	24 4C 00 00					       mov     [esp+5Ch+var_10], 0
.text:100034C7 66 C7 44	24 4E 02 00					       mov     [esp+5Ch+var_E],	2
.text:100034CE 66 C7 44	24 50 04 00					       mov     [esp+5Ch+var_C],	4
.text:100034D5 C6 44 24	55 13						       mov     [esp+5Ch+var_7],	13h
.text:100034DA C6 44 24	56 19						       mov     [esp+5Ch+var_6],	19h
.text:100034DF C6 44 24	59 00						       mov     [esp+5Ch+var_3],	0
.text:100034E4 FF 15 28	50 00 10					       call    ds:CreateFileA
.text:100034EA 8B 56 20							       mov     edx, [esi+20h]
.text:100034ED 8B 4E 28							       mov     ecx, [esi+28h]
.text:100034F0 89 56 54							       mov     [esi+54h], edx
.text:100034F3 8B 56 30							       mov     edx, [esi+30h]
.text:100034F6 83 F8 FF							       cmp     eax, 0FFFFFFFFh
.text:100034F9 89 46 3C							       mov     [esi+3Ch], eax
.text:100034FC 89 4E 68							       mov     [esi+68h], ecx
.text:100034FF 89 56 7C							       mov     [esi+7Ch], edx
.text:10003502 5D							       pop     ebp
.text:10003503 0F 84 95	00 00 00					       jz      loc_1000359E
.text:10003509 8B 4E 04							       mov     ecx, [esi+4]
.text:1000350C 85 C9							       test    ecx, ecx
.text:1000350E 74 12							       jz      short loc_10003522
.text:10003510 68 20 01	00 00						       push    120h	       ; dwEvtMask
.text:10003515 50							       push    eax	       ; hFile
.text:10003516 FF 15 24	50 00 10					       call    ds:SetCommMask
.text:1000351C 85 C0							       test    eax, eax
.text:1000351E 75 14							       jnz     short loc_10003534
.text:10003520 EB 0D							       jmp     short loc_1000352F
.text:10003522						       ; ---------------------------------------------------------------------------
.text:10003522
.text:10003522						       loc_10003522:			       ; CODE XREF: sub_100033A0+16Ej
.text:10003522 6A 00							       push    0	       ; dwEvtMask
.text:10003524 50							       push    eax	       ; hFile
.text:10003525 FF 15 24	50 00 10					       call    ds:SetCommMask
.text:1000352B 85 C0							       test    eax, eax
.text:1000352D 75 05							       jnz     short loc_10003534
.text:1000352F
.text:1000352F						       loc_1000352F:			       ; CODE XREF: sub_100033A0+180j
.text:1000352F BB 01 00	00 00						       mov     ebx, 1
.text:10003534
.text:10003534						       loc_10003534:			       ; CODE XREF: sub_100033A0+17Ej
.text:10003534											       ; sub_100033A0+18Dj
.text:10003534 8B 4E 3C							       mov     ecx, [esi+3Ch]
.text:10003537 8D 44 24	0C						       lea     eax, [esp+3Ch+dwSize]
.text:1000353B 50							       push    eax	       ; dwSize
.text:1000353C 51							       push    ecx	       ; lpAddress
.text:1000353D FF 15 34	50 00 10					       call    ds:VirtualAlloc
.text:10003543 85 C0							       test    eax, eax
.text:10003545 75 05							       jnz     short loc_1000354C
.text:10003547 BB 02 00	00 00						       mov     ebx, 2
.text:1000354C
.text:1000354C						       loc_1000354C:			       ; CODE XREF: sub_100033A0+1A5j
.text:1000354C 8B 46 3C							       mov     eax, [esi+3Ch]
.text:1000354F 8D 54 24	20						       lea     edx, [esp+34h+var_14]
.text:10003553 52							       push    edx	       ; lpDCB
.text:10003554 50							       push    eax	       ; hFile
.text:10003555 FF 15 6C	50 00 10					       call    ds:SetCommState
.text:1000355B 85 C0							       test    eax, eax
.text:1000355D 75 05							       jnz     short loc_10003564
.text:1000355F BB 04 00	00 00						       mov     ebx, 4
.text:10003564
.text:10003564						       loc_10003564:			       ; CODE XREF: sub_100033A0+1BDj
.text:10003564											       ; sub_100033A0+203j
.text:10003564 33 FF							       xor     edi, edi
.text:10003566
.text:10003566						       loc_10003566:			       ; CODE XREF: sub_100033A0+20Aj
.text:10003566 8D 46 1C							       lea     eax, [esi+1Ch]
.text:10003569 B9 07 00	00 00						       mov     ecx, 7
.text:1000356E
.text:1000356E						       loc_1000356E:			       ; CODE XREF: sub_100033A0+1DCj
.text:1000356E 83 38 FF							       cmp     dword ptr [eax],	0FFFFFFFFh
.text:10003571 75 05							       jnz     short loc_10003578
.text:10003573 BB 20 00	00 00						       mov     ebx, 20h
.text:10003578
.text:10003578						       loc_10003578:			       ; CODE XREF: sub_100033A0+1D1j
.text:10003578 83 C0 04							       add     eax, 4
.text:1000357B 49							       dec     ecx
.text:1000357C 75 F0							       jnz     short loc_1000356E
.text:1000357E 3B DF							       cmp     ebx, edi
.text:10003580 74 2A							       jz      short loc_100035AC
.text:10003582 8B 4E 3C							       mov     ecx, [esi+3Ch]
.text:10003585 51							       push    ecx	       ; hObject
.text:10003586 FF 15 64	50 00 10					       call    ds:CloseHandle
.text:1000358C C7 46 3C	FF FF FF FF					       mov     dword ptr [esi+3Ch], 0FFFFFFFFh
.text:10003593 5F							       pop     edi
.text:10003594 8B C3							       mov     eax, ebx
.text:10003596 5E							       pop     esi
.text:10003597 5B							       pop     ebx
.text:10003598 83 C4 30							       add     esp, 30h
.text:1000359B C2 14 00							       retn    14h
.text:1000359E						       ; ---------------------------------------------------------------------------
.text:1000359E
.text:1000359E						       loc_1000359E:			       ; CODE XREF: sub_100033A0+163j
.text:1000359E BB 08 00	00 00						       mov     ebx, 8
.text:100035A3 EB BF							       jmp     short loc_10003564
.text:100035A5						       ; ---------------------------------------------------------------------------
.text:100035A5
.text:100035A5						       loc_100035A5:			       ; CODE XREF: sub_100033A0+3Aj
.text:100035A5 BB 10 00	00 00						       mov     ebx, 10h
.text:100035AA EB BA							       jmp     short loc_10003566
.text:100035AC						       ; ---------------------------------------------------------------------------
.text:100035AC
.text:100035AC						       loc_100035AC:			       ; CODE XREF: sub_100033A0+1E0j
.text:100035AC 8D 56 38							       lea     edx, [esi+38h]
.text:100035AF 52							       push    edx
.text:100035B0 57							       push    edi
.text:100035B1 56							       push    esi
.text:100035B2 68 70 32	00 10						       push    offset loc_10003270
.text:100035B7 57							       push    edi
.text:100035B8 57							       push    edi
.text:100035B9 FF 15 34	51 00 10					       call    ds:_beginthreadex
.text:100035BF 83 C4 18							       add     esp, 18h
.text:100035C2 89 46 40							       mov     [esi+40h], eax
.text:100035C5 8B C3							       mov     eax, ebx
.text:100035C7 5F							       pop     edi
.text:100035C8 5E							       pop     esi
.text:100035C9 5B							       pop     ebx
.text:100035CA 83 C4 30							       add     esp, 30h
.text:100035CD C2 14 00							       retn    14h
.text:100035CD						       sub_100033A0    endp ; sp-analysis failed
.text:100035CD
.text:100035D0
.text:100035D0						       ; =============== S U B R O U T I N E =======================================
.text:100035D0
.text:100035D0
.text:100035D0						       sub_100035D0    proc near	       ; CODE XREF: GSCREnumDevices(void)+B4p
.text:100035D0											       ; sub_10003030+7Ap
.text:100035D0
.text:100035D0						       arg_0	       = dword ptr  4
.text:100035D0
.text:100035D0 8B 44 24	04						       mov     eax, [esp+arg_0]
.text:100035D4 89 81 94	02 00 00					       mov     [ecx+294h], eax
.text:100035DA C2 04 00							       retn    4
.text:100035DA						       sub_100035D0    endp
.text:100035DA
.text:100035DA						       ; ---------------------------------------------------------------------------
.text:100035DD 90 90 90							       align 10h
.text:100035E0
.text:100035E0						       ; =============== S U B R O U T I N E =======================================
.text:100035E0
.text:100035E0
.text:100035E0						       sub_100035E0    proc near	       ; CODE XREF: GSCREnumDevices(void)+12Ep
.text:100035E0											       ; sub_10002F90+52p ...
.text:100035E0
.text:100035E0						       arg_0	       = dword ptr  4
.text:100035E0
.text:100035E0 8B 44 24	04						       mov     eax, [esp+arg_0]
.text:100035E4 3D 00 01	00 00						       cmp     eax, 100h
.text:100035E9 89 81 84	01 00 00					       mov     [ecx+184h], eax
.text:100035EF 7E 0A							       jle     short locret_100035FB
.text:100035F1 C7 81 84	01 00 00 00 01 00 00				       mov     dword ptr [ecx+184h], 100h
.text:100035FB
.text:100035FB						       locret_100035FB:			       ; CODE XREF: sub_100035E0+Fj
.text:100035FB C2 04 00							       retn    4
.text:100035FB						       sub_100035E0    endp
.text:100035FB
.text:100035FB						       ; ---------------------------------------------------------------------------
.text:100035FE 90 90							       align 10h
.text:10003600
.text:10003600						       ; =============== S U B R O U T I N E =======================================
.text:10003600
.text:10003600
.text:10003600						       sub_10003600    proc near	       ; CODE XREF: sub_10002AE0+74p
.text:10003600											       ; .text:10002C0Ap
.text:10003600 8D 81 83	00 00 00					       lea     eax, [ecx+83h]
.text:10003606 C3							       retn
.text:10003606						       sub_10003600    endp
.text:10003606
.text:10003606						       ; ---------------------------------------------------------------------------
.text:10003607 90 90 90	90 90 90 90 90 90				       align 10h
.text:10003610
.text:10003610						       ; =============== S U B R O U T I N E =======================================
.text:10003610
.text:10003610
.text:10003610						       sub_10003610    proc near	       ; CODE XREF: sub_10002AE0+6Bp
.text:10003610											       ; .text:10002C01p
.text:10003610 8B 81 88	01 00 00					       mov     eax, [ecx+188h]
.text:10003616 C3							       retn
.text:10003616						       sub_10003610    endp
.text:10003616
.text:10003616						       ; ---------------------------------------------------------------------------
.text:10003617 90 90 90	90 90 90 90 90 90				       align 10h
.text:10003620
.text:10003620						       ; =============== S U B R O U T I N E =======================================
.text:10003620
.text:10003620
.text:10003620						       sub_10003620    proc near	       ; CODE XREF: sub_10002AE0+C6p
.text:10003620											       ; .text:10002C2Dp
.text:10003620 8B 41 24							       mov     eax, [ecx+24h]
.text:10003623 50							       push    eax	       ; hEvent
.text:10003624 FF 15 54	50 00 10					       call    ds:SetEvent
.text:1000362A C3							       retn
.text:1000362A						       sub_10003620    endp
.text:1000362A
.text:1000362A						       ; ---------------------------------------------------------------------------
.text:1000362B 90 90 90	90 90						       align 10h
.text:10003630
.text:10003630						       ; =============== S U B R O U T I N E =======================================
.text:10003630
.text:10003630
.text:10003630						       sub_10003630    proc near	       ; CODE XREF: GSCREnumDevices(void)+11Fp
.text:10003630											       ; sub_10002F90+42p ...
.text:10003630
.text:10003630						       arg_0	       = dword ptr  4
.text:10003630						       arg_4	       = dword ptr  8
.text:10003630
.text:10003630 8B C1							       mov     eax, ecx
.text:10003632 56							       push    esi
.text:10003633 8A 88 80	00 00 00					       mov     cl, [eax+80h]
.text:10003639 84 C9							       test    cl, cl
.text:1000363B 75 45							       jnz     short loc_10003682
.text:1000363D 8B 54 24	0C						       mov     edx, [esp+4+arg_4]
.text:10003641 81 FA 00	01 00 00					       cmp     edx, 100h
.text:10003647 7D 39							       jge     short loc_10003682
.text:10003649 8B 74 24	08						       mov     esi, [esp+4+arg_0]
.text:1000364D 85 F6							       test    esi, esi
.text:1000364F 74 31							       jz      short loc_10003682
.text:10003651 8B CA							       mov     ecx, edx
.text:10003653 53							       push    ebx
.text:10003654 8B D9							       mov     ebx, ecx
.text:10003656 57							       push    edi
.text:10003657 8D B8 8C	01 00 00					       lea     edi, [eax+18Ch]
.text:1000365D C6 80 80	00 00 00 01					       mov     byte ptr	[eax+80h], 1
.text:10003664 C1 E9 02							       shr     ecx, 2
.text:10003667 F3 A5							       rep movsd
.text:10003669 8B CB							       mov     ecx, ebx
.text:1000366B 83 E1 03							       and     ecx, 3
.text:1000366E F3 A4							       rep movsb
.text:10003670 89 90 8C	02 00 00					       mov     [eax+28Ch], edx
.text:10003676 8B 40 2C							       mov     eax, [eax+2Ch]
.text:10003679 50							       push    eax	       ; hEvent
.text:1000367A FF 15 54	50 00 10					       call    ds:SetEvent
.text:10003680 5F							       pop     edi
.text:10003681 5B							       pop     ebx
.text:10003682
.text:10003682						       loc_10003682:			       ; CODE XREF: sub_10003630+Bj
.text:10003682											       ; sub_10003630+17j ...
.text:10003682 5E							       pop     esi
.text:10003683 C2 08 00							       retn    8
.text:10003683						       sub_10003630    endp
.text:10003683
.text:10003683						       ; ---------------------------------------------------------------------------
.text:10003686 90 90 90	90 90 90 90 90 90 90				       align 10h
.text:10003690
.text:10003690						       ; =============== S U B R O U T I N E =======================================
.text:10003690
.text:10003690
.text:10003690						       sub_10003690    proc near	       ; CODE XREF: .text:100038E5p
.text:10003690
.text:10003690						       ProcName	       = byte ptr -4
.text:10003690						       arg_0	       = dword ptr  4
.text:10003690
.text:10003690 51							       push    ecx
.text:10003691 53							       push    ebx
.text:10003692 56							       push    esi
.text:10003693 8B F1							       mov     esi, ecx
.text:10003695 8D 44 24	08						       lea     eax, [esp+0Ch+ProcName]
.text:10003699 50							       push    eax	       ; lpProcName
.text:1000369A 8B 4E 3C							       mov     ecx, [esi+3Ch]
.text:1000369D 51							       push    ecx	       ; hModule
.text:1000369E FF 15 2C	50 00 10					       call    ds:GetProcAddress
.text:100036A4 8B 5C 24	10						       mov     ebx, [esp+0Ch+arg_0]
.text:100036A8 F6 C7 01							       test    bh, 1
.text:100036AB 74 19							       jz      short loc_100036C6
.text:100036AD F6 44 24	08 40						       test    [esp+0Ch+ProcName], 40h
.text:100036B2 74 12							       jz      short loc_100036C6
.text:100036B4 8B 86 94	02 00 00					       mov     eax, [esi+294h]
.text:100036BA 85 C0							       test    eax, eax
.text:100036BC 74 08							       jz      short loc_100036C6
.text:100036BE 6A 04							       push    4
.text:100036C0 56							       push    esi
.text:100036C1 FF D0							       call    eax
.text:100036C3 83 C4 08							       add     esp, 8
.text:100036C6
.text:100036C6						       loc_100036C6:			       ; CODE XREF: sub_10003690+1Bj
.text:100036C6											       ; sub_10003690+22j ...
.text:100036C6 F6 C3 20							       test    bl, 20h
.text:100036C9 74 2B							       jz      short loc_100036F6
.text:100036CB F6 44 24	08 80						       test    [esp+0Ch+ProcName], 80h
.text:100036D0 8B 86 94	02 00 00					       mov     eax, [esi+294h]
.text:100036D6 74 12							       jz      short loc_100036EA
.text:100036D8 85 C0							       test    eax, eax
.text:100036DA 74 1A							       jz      short loc_100036F6
.text:100036DC 6A 05							       push    5
.text:100036DE 56							       push    esi
.text:100036DF FF D0							       call    eax
.text:100036E1 83 C4 08							       add     esp, 8
.text:100036E4 5E							       pop     esi
.text:100036E5 5B							       pop     ebx
.text:100036E6 59							       pop     ecx
.text:100036E7 C2 04 00							       retn    4
.text:100036EA						       ; ---------------------------------------------------------------------------
.text:100036EA
.text:100036EA						       loc_100036EA:			       ; CODE XREF: sub_10003690+46j
.text:100036EA 85 C0							       test    eax, eax
.text:100036EC 74 08							       jz      short loc_100036F6
.text:100036EE 6A 06							       push    6
.text:100036F0 56							       push    esi
.text:100036F1 FF D0							       call    eax
.text:100036F3 83 C4 08							       add     esp, 8
.text:100036F6
.text:100036F6						       loc_100036F6:			       ; CODE XREF: sub_10003690+39j
.text:100036F6											       ; sub_10003690+4Aj ...
.text:100036F6 5E							       pop     esi
.text:100036F7 5B							       pop     ebx
.text:100036F8 59							       pop     ecx
.text:100036F9 C2 04 00							       retn    4
.text:100036F9						       sub_10003690    endp
.text:100036F9
.text:100036F9						       ; ---------------------------------------------------------------------------
.text:100036FC 90 90 90	90						       align 10h
.text:10003700
.text:10003700						       loc_10003700:			       ; CODE XREF: .text:10003278j
.text:10003700 83 EC 08							       sub     esp, 8
.text:10003703 53							       push    ebx
.text:10003704 56							       push    esi
.text:10003705 8B F1							       mov     esi, ecx
.text:10003707 33 DB							       xor     ebx, ebx
.text:10003709 8B 86 94	02 00 00					       mov     eax, [esi+294h]
.text:1000370F C7 06 01	00 00 00					       mov     dword ptr [esi],	1
.text:10003715 3B C3							       cmp     eax, ebx
.text:10003717 88 9E 80	00 00 00					       mov     [esi+80h], bl
.text:1000371D 88 9E 81	00 00 00					       mov     [esi+81h], bl
.text:10003723 88 9E 82	00 00 00					       mov     [esi+82h], bl
.text:10003729 74 07							       jz      short loc_10003732
.text:1000372B 53							       push    ebx
.text:1000372C 56							       push    esi
.text:1000372D FF D0							       call    eax
.text:1000372F 83 C4 08							       add     esp, 8
.text:10003732
.text:10003732						       loc_10003732:			       ; CODE XREF: .text:10003729j
.text:10003732 55							       push    ebp
.text:10003733 8B 2D 48	50 00 10					       mov     ebp, ds:GetLastError
.text:10003739 57							       push    edi
.text:1000373A FF D5							       call    ebp ; GetLastError
.text:1000373C 8B 46 24							       mov     eax, [esi+24h]
.text:1000373F 8B 3D 54	50 00 10					       mov     edi, ds:SetEvent
.text:10003745 50							       push    eax
.text:10003746 FF D7							       call    edi ; SetEvent
.text:10003748 39 5E 04							       cmp     [esi+4],	ebx
.text:1000374B 74 06							       jz      short loc_10003753
.text:1000374D 8B 4E 34							       mov     ecx, [esi+34h]
.text:10003750 51							       push    ecx
.text:10003751 FF D7							       call    edi ; SetEvent
.text:10003753
.text:10003753						       loc_10003753:			       ; CODE XREF: .text:1000374Bj
.text:10003753 8B 3D 44	50 00 10					       mov     edi, ds:ResetEvent
.text:10003759
.text:10003759						       loc_10003759:			       ; CODE XREF: .text:1000377Cj
.text:10003759											       ; .text:1000378Bj ...
.text:10003759 6A FF							       push    0FFFFFFFFh      ; jumptable 1000377E default case
.text:1000375B 8D 46 1C							       lea     eax, [esi+1Ch]
.text:1000375E 53							       push    ebx
.text:1000375F 50							       push    eax
.text:10003760 6A 07							       push    7
.text:10003762 FF 15 40	50 00 10					       call    ds:WaitForMultipleObjects
.text:10003768 3B C3							       cmp     eax, ebx
.text:1000376A 0F 8C 96	01 00 00					       jl      loc_10003906    ; jumptable 1000377E case 0
.text:10003770 83 F8 07							       cmp     eax, 7
.text:10003773 0F 8D 8D	01 00 00					       jge     loc_10003906    ; jumptable 1000377E case 0
.text:10003779 83 F8 06							       cmp     eax, 6	       ; switch	7 cases
.text:1000377C 77 DB							       ja      short loc_10003759 ; jumptable 1000377E default case
.text:1000377E FF 24 85	38 39 00 10					       jmp     ds:off_10003938[eax*4] ;	switch jump
.text:10003785						       ; ---------------------------------------------------------------------------
.text:10003785
.text:10003785						       loc_10003785:			       ; CODE XREF: .text:1000377Ej
.text:10003785											       ; DATA XREF: .text:off_10003938o
.text:10003785 38 9E 81	00 00 00					       cmp     [esi+81h], bl   ; jumptable 1000377E case 2
.text:1000378B 75 CC							       jnz     short loc_10003759 ; jumptable 1000377E default case
.text:1000378D 8B 8E 84	01 00 00					       mov     ecx, [esi+184h]
.text:10003793 8D 56 44							       lea     edx, [esi+44h]
.text:10003796 8D 44 24	14						       lea     eax, [esp+14h]
.text:1000379A 52							       push    edx
.text:1000379B 50							       push    eax
.text:1000379C 8B 46 3C							       mov     eax, [esi+3Ch]
.text:1000379F 8D 96 83	00 00 00					       lea     edx, [esi+83h]
.text:100037A5 51							       push    ecx
.text:100037A6 52							       push    edx
.text:100037A7 50							       push    eax
.text:100037A8 C6 86 81	00 00 00 01					       mov     byte ptr	[esi+81h], 1
.text:100037AF FF 15 3C	50 00 10					       call    ds:ReadFile
.text:100037B5
.text:100037B5						       loc_100037B5:			       ; CODE XREF: .text:1000383Aj
.text:100037B5											       ; .text:100038B3j
.text:100037B5 84 C0							       test    al, al
.text:100037B7 75 A0							       jnz     short loc_10003759 ; jumptable 1000377E default case
.text:100037B9
.text:100037B9						       loc_100037B9:			       ; CODE XREF: .text:100037DEj
.text:100037B9											       ; .text:10003855j
.text:100037B9 FF D5							       call    ebp ; GetLastError
.text:100037BB 3D E5 03	00 00						       cmp     eax, 3E5h
.text:100037C0 0F 85 40	01 00 00					       jnz     loc_10003906    ; jumptable 1000377E case 0
.text:100037C6 EB 91							       jmp     short loc_10003759 ; jumptable 1000377E default case
.text:100037C8						       ; ---------------------------------------------------------------------------
.text:100037C8
.text:100037C8						       loc_100037C8:			       ; CODE XREF: .text:1000377Ej
.text:100037C8											       ; DATA XREF: .text:off_10003938o
.text:100037C8 8B 46 3C							       mov     eax, [esi+3Ch]  ; jumptable 1000377E case 1
.text:100037CB 8D 4C 24	10						       lea     ecx, [esp+10h]
.text:100037CF 53							       push    ebx
.text:100037D0 8D 56 44							       lea     edx, [esi+44h]
.text:100037D3 51							       push    ecx
.text:100037D4 52							       push    edx
.text:100037D5 50							       push    eax
.text:100037D6 FF 15 38	50 00 10					       call    ds:GetOverlappedResult
.text:100037DC 85 C0							       test    eax, eax
.text:100037DE 74 D9							       jz      short loc_100037B9
.text:100037E0 8B 4E 20							       mov     ecx, [esi+20h]
.text:100037E3 51							       push    ecx
.text:100037E4 FF D7							       call    edi ; ResetEvent
.text:100037E6 8B 44 24	10						       mov     eax, [esp+10h]
.text:100037EA 88 9E 81	00 00 00					       mov     [esi+81h], bl
.text:100037F0 3B C3							       cmp     eax, ebx
.text:100037F2 89 86 88	01 00 00					       mov     [esi+188h], eax
.text:100037F8 0F 84 5B	FF FF FF					       jz      loc_10003759    ; jumptable 1000377E default case
.text:100037FE 8B 86 94	02 00 00					       mov     eax, [esi+294h]
.text:10003804 3B C3							       cmp     eax, ebx
.text:10003806 0F 84 4D	FF FF FF					       jz      loc_10003759    ; jumptable 1000377E default case
.text:1000380C 6A 03							       push    3
.text:1000380E 56							       push    esi
.text:1000380F FF D0							       call    eax
.text:10003811 83 C4 08							       add     esp, 8
.text:10003814 E9 40 FF	FF FF						       jmp     loc_10003759    ; jumptable 1000377E default case
.text:10003819						       ; ---------------------------------------------------------------------------
.text:10003819
.text:10003819						       loc_10003819:			       ; CODE XREF: .text:1000377Ej
.text:10003819											       ; DATA XREF: .text:off_10003938o
.text:10003819 8B 8E 8C	02 00 00					       mov     ecx, [esi+28Ch] ; jumptable 1000377E case 4
.text:1000381F 8D 56 58							       lea     edx, [esi+58h]
.text:10003822 8D 44 24	10						       lea     eax, [esp+10h]
.text:10003826 52							       push    edx
.text:10003827 50							       push    eax
.text:10003828 8B 46 3C							       mov     eax, [esi+3Ch]
.text:1000382B 8D 96 8C	01 00 00					       lea     edx, [esi+18Ch]
.text:10003831 51							       push    ecx
.text:10003832 52							       push    edx
.text:10003833 50							       push    eax
.text:10003834 FF 15 68	50 00 10					       call    ds:WriteFile
.text:1000383A E9 76 FF	FF FF						       jmp     loc_100037B5
.text:1000383F						       ; ---------------------------------------------------------------------------
.text:1000383F
.text:1000383F						       loc_1000383F:			       ; CODE XREF: .text:1000377Ej
.text:1000383F											       ; DATA XREF: .text:off_10003938o
.text:1000383F 8B 46 3C							       mov     eax, [esi+3Ch]  ; jumptable 1000377E case 3
.text:10003842 8D 4C 24	10						       lea     ecx, [esp+10h]
.text:10003846 53							       push    ebx
.text:10003847 8D 56 58							       lea     edx, [esi+58h]
.text:1000384A 51							       push    ecx
.text:1000384B 52							       push    edx
.text:1000384C 50							       push    eax
.text:1000384D FF 15 38	50 00 10					       call    ds:GetOverlappedResult
.text:10003853 85 C0							       test    eax, eax
.text:10003855 0F 84 5E	FF FF FF					       jz      loc_100037B9
.text:1000385B 8B 4E 28							       mov     ecx, [esi+28h]
.text:1000385E 51							       push    ecx
.text:1000385F FF D7							       call    edi ; ResetEvent
.text:10003861 8B 86 94	02 00 00					       mov     eax, [esi+294h]
.text:10003867 88 9E 80	00 00 00					       mov     [esi+80h], bl
.text:1000386D 3B C3							       cmp     eax, ebx
.text:1000386F 0F 84 E4	FE FF FF					       jz      loc_10003759    ; jumptable 1000377E default case
.text:10003875 6A 02							       push    2
.text:10003877 56							       push    esi
.text:10003878 FF D0							       call    eax
.text:1000387A 83 C4 08							       add     esp, 8
.text:1000387D E9 D7 FE	FF FF						       jmp     loc_10003759    ; jumptable 1000377E default case
.text:10003882						       ; ---------------------------------------------------------------------------
.text:10003882
.text:10003882						       loc_10003882:			       ; CODE XREF: .text:1000377Ej
.text:10003882											       ; DATA XREF: .text:off_10003938o
.text:10003882 38 9E 82	00 00 00					       cmp     [esi+82h], bl   ; jumptable 1000377E case 6
.text:10003888 0F 85 CB	FE FF FF					       jnz     loc_10003759    ; jumptable 1000377E default case
.text:1000388E 39 5E 04							       cmp     [esi+4],	ebx
.text:10003891 0F 84 C2	FE FF FF					       jz      loc_10003759    ; jumptable 1000377E default case
.text:10003897 8B 4E 3C							       mov     ecx, [esi+3Ch]
.text:1000389A 8D 56 6C							       lea     edx, [esi+6Ch]
.text:1000389D 8D 86 90	02 00 00					       lea     eax, [esi+290h]
.text:100038A3 52							       push    edx
.text:100038A4 50							       push    eax
.text:100038A5 51							       push    ecx
.text:100038A6 C6 86 82	00 00 00 01					       mov     byte ptr	[esi+82h], 1
.text:100038AD FF 15 30	50 00 10					       call    ds:LoadLibraryA
.text:100038B3 E9 FD FE	FF FF						       jmp     loc_100037B5
.text:100038B8						       ; ---------------------------------------------------------------------------
.text:100038B8
.text:100038B8						       loc_100038B8:			       ; CODE XREF: .text:1000377Ej
.text:100038B8											       ; DATA XREF: .text:off_10003938o
.text:100038B8 8B 4E 3C							       mov     ecx, [esi+3Ch]  ; jumptable 1000377E case 5
.text:100038BB 8D 54 24	10						       lea     edx, [esp+10h]
.text:100038BF 53							       push    ebx
.text:100038C0 8D 46 6C							       lea     eax, [esi+6Ch]
.text:100038C3 52							       push    edx
.text:100038C4 50							       push    eax
.text:100038C5 51							       push    ecx
.text:100038C6 FF 15 38	50 00 10					       call    ds:GetOverlappedResult
.text:100038CC 85 C0							       test    eax, eax
.text:100038CE 74 29							       jz      short loc_100038F9
.text:100038D0 8B 56 30							       mov     edx, [esi+30h]
.text:100038D3 52							       push    edx
.text:100038D4 FF D7							       call    edi ; ResetEvent
.text:100038D6 8B 86 90	02 00 00					       mov     eax, [esi+290h]
.text:100038DC 8B CE							       mov     ecx, esi
.text:100038DE 50							       push    eax
.text:100038DF 88 9E 82	00 00 00					       mov     [esi+82h], bl
.text:100038E5 E8 A6 FD	FF FF						       call    sub_10003690
.text:100038EA 8B 4E 34							       mov     ecx, [esi+34h]
.text:100038ED 51							       push    ecx
.text:100038EE FF 15 54	50 00 10					       call    ds:SetEvent
.text:100038F4 E9 60 FE	FF FF						       jmp     loc_10003759    ; jumptable 1000377E default case
.text:100038F9						       ; ---------------------------------------------------------------------------
.text:100038F9
.text:100038F9						       loc_100038F9:			       ; CODE XREF: .text:100038CEj
.text:100038F9 FF D5							       call    ebp ; GetLastError
.text:100038FB 3D E5 03	00 00						       cmp     eax, 3E5h
.text:10003900 0F 84 53	FE FF FF					       jz      loc_10003759    ; jumptable 1000377E default case
.text:10003906
.text:10003906						       loc_10003906:			       ; CODE XREF: .text:1000376Aj
.text:10003906											       ; .text:10003773j ...
.text:10003906 8B 46 3C							       mov     eax, [esi+3Ch]  ; jumptable 1000377E case 0
.text:10003909 5F							       pop     edi
.text:1000390A 83 F8 FF							       cmp     eax, 0FFFFFFFFh
.text:1000390D 89 1E							       mov     [esi], ebx
.text:1000390F 5D							       pop     ebp
.text:10003910 74 07							       jz      short loc_10003919
.text:10003912 50							       push    eax
.text:10003913 FF 15 64	50 00 10					       call    ds:CloseHandle
.text:10003919
.text:10003919						       loc_10003919:			       ; CODE XREF: .text:10003910j
.text:10003919 8B 86 94	02 00 00					       mov     eax, [esi+294h]
.text:1000391F C7 46 3C	FF FF FF FF					       mov     dword ptr [esi+3Ch], 0FFFFFFFFh
.text:10003926 3B C3							       cmp     eax, ebx
.text:10003928 74 08							       jz      short loc_10003932
.text:1000392A 6A 01							       push    1
.text:1000392C 56							       push    esi
.text:1000392D FF D0							       call    eax
.text:1000392F 83 C4 08							       add     esp, 8
.text:10003932
.text:10003932						       loc_10003932:			       ; CODE XREF: .text:10003928j
.text:10003932 5E							       pop     esi
.text:10003933 5B							       pop     ebx
.text:10003934 83 C4 08							       add     esp, 8
.text:10003937 C3							       retn
.text:10003937						       ; ---------------------------------------------------------------------------
.text:10003938 06 39 00	10 C8 37 00 10 85 37 00	10 3F 38 00 10+off_10003938    dd offset loc_10003906  ; DATA XREF: .text:1000377Er
.text:10003938 19 38 00	10 B8 38 00 10 82 38 00	10			       dd offset loc_100037C8  ; jump table for	switch statement
.text:10003938								       dd offset loc_10003785
.text:10003938								       dd offset loc_1000383F
.text:10003938								       dd offset loc_10003819
.text:10003938								       dd offset loc_100038B8
.text:10003938								       dd offset loc_10003882
.text:10003954 90 90 90	90 90 90 90 90 90 90 90	90			       align 10h
.text:10003960
.text:10003960						       ; =============== S U B R O U T I N E =======================================
.text:10003960
.text:10003960
.text:10003960						       sub_10003960    proc near	       ; CODE XREF: GSCREnumDevices(void)+10Bp
.text:10003960											       ; sub_10003030+FCp
.text:10003960
.text:10003960						       arg_0	       = dword ptr  4
.text:10003960
.text:10003960 8B 44 24	04						       mov     eax, [esp+arg_0]
.text:10003964 89 81 98	02 00 00					       mov     [ecx+298h], eax
.text:1000396A C2 04 00							       retn    4
.text:1000396A						       sub_10003960    endp
.text:1000396A
.text:1000396A						       ; ---------------------------------------------------------------------------
.text:1000396D 90 90 90							       align 10h
.text:10003970
.text:10003970						       ; =============== S U B R O U T I N E =======================================
.text:10003970
.text:10003970
.text:10003970						       sub_10003970    proc near	       ; CODE XREF: sub_10002AE0+B8p
.text:10003970											       ; .text:10002BDCp
.text:10003970 8B 81 98	02 00 00					       mov     eax, [ecx+298h]
.text:10003976 C3							       retn
.text:10003976						       sub_10003970    endp
.text:10003976
.text:10003976						       ; ---------------------------------------------------------------------------
.text:10003977 90 90 90	90 90 90 90 90 90				       align 10h
.text:10003980						       ; [00000006 BYTES: COLLAPSED FUNCTION CObject::GetRuntimeClass(void). PRESS KEYPAD CTRL-"+" TO EXPAND]
.text:10003986						       ; [00000006 BYTES: COLLAPSED FUNCTION CString::CString(void). PRESS KEYPAD CTRL-"+" TO EXPAND]
.text:1000398C						       ; [00000006 BYTES: COLLAPSED FUNCTION CString::~CString(void). PRESS KEYPAD CTRL-"+" TO EXPAND]
.text:10003992						       ; [00000006 BYTES: COLLAPSED FUNCTION operator delete(void *). PRESS KEYPAD CTRL-"+" TO EXPAND]
.text:10003998						       ; [00000006 BYTES: COLLAPSED FUNCTION CImageList::~CImageList(void). PRESS KEYPAD CTRL-"+" TO EXPAND]
.text:1000399E						       ; [00000006 BYTES: COLLAPSED FUNCTION CObList::CObList(int). PRESS KEYPAD CTRL-"+" TO EXPAND]
.text:100039A4						       ; [00000006 BYTES: COLLAPSED FUNCTION CImageList::CImageList(void). PRESS KEYPAD	CTRL-"+" TO EXPAND]
.text:100039AA						       ; [00000006 BYTES: COLLAPSED FUNCTION CObList::~CObList(void). PRESS KEYPAD CTRL-"+" TO EXPAND]
.text:100039B0						       ; [00000006 BYTES: COLLAPSED FUNCTION AfxGetModuleState(void). PRESS KEYPAD CTRL-"+" TO EXPAND]
.text:100039B6						       ; [00000006 BYTES: COLLAPSED FUNCTION AfxTermExtensionModule(AFX_EXTENSION_MODULE &,int). PRESS KEYPAD CTRL-"+" TO EXPAND]
.text:100039BC						       ; [00000006 BYTES: COLLAPSED FUNCTION CDynLinkLibrary::CDynLinkLibrary(AFX_EXTENSION_MODULE &,int). PRESS KEYPAD	CTRL-"+" TO EXPAND]
.text:100039C2						       ; [00000006 BYTES: COLLAPSED FUNCTION operator new(uint). PRESS KEYPAD CTRL-"+" TO EXPAND]
.text:100039C8						       ; [00000006 BYTES: COLLAPSED FUNCTION AfxInitExtensionModule(AFX_EXTENSION_MODULE &,HINSTANCE__ *). PRESS KEYPAD	CTRL-"+" TO EXPAND]
.text:100039CE						       ; [00000006 BYTES: COLLAPSED FUNCTION CFile::~CFile(void). PRESS	KEYPAD CTRL-"+"	TO EXPAND]
.text:100039D4						       ; [00000006 BYTES: COLLAPSED FUNCTION CFile::Close(void). PRESS KEYPAD CTRL-"+" TO EXPAND]
.text:100039DA						       ; [00000006 BYTES: COLLAPSED FUNCTION CString::CString(char const *). PRESS KEYPAD CTRL-"+" TO EXPAND]
.text:100039E0						       ; [00000006 BYTES: COLLAPSED FUNCTION CFile::Open(char const *,uint,CFileException *). PRESS KEYPAD CTRL-"+" TO EXPAND]
.text:100039E6						       ; [00000006 BYTES: COLLAPSED FUNCTION CFile::CFile(void). PRESS KEYPAD CTRL-"+" TO EXPAND]
.text:100039EC						       ; [00000006 BYTES: COLLAPSED FUNCTION CString::CString(CString const &).	PRESS KEYPAD CTRL-"+" TO EXPAND]
.text:100039F2						       ; [00000006 BYTES: COLLAPSED FUNCTION CObList::AddTail(CObject *). PRESS	KEYPAD CTRL-"+"	TO EXPAND]
.text:100039F8						       ; [00000006 BYTES: COLLAPSED FUNCTION CTime::CTime(int,int,int,int,int,int,int).	PRESS KEYPAD CTRL-"+" TO EXPAND]
.text:100039FE						       ; [00000006 BYTES: COLLAPSED FUNCTION CString::operator=(char const *). PRESS KEYPAD CTRL-"+" TO	EXPAND]
.text:10003A04						       ; [00000006 BYTES: COLLAPSED FUNCTION operator+(CString const &,char const *). PRESS KEYPAD CTRL-"+" TO EXPAND]
.text:10003A0A						       ; [00000006 BYTES: COLLAPSED FUNCTION CString::operator=(CString	const &). PRESS	KEYPAD CTRL-"+"	TO EXPAND]
.text:10003A10						       ; [00000006 BYTES: COLLAPSED FUNCTION CException::Delete(void). PRESS KEYPAD CTRL-"+" TO	EXPAND]
.text:10003A16						       ; [00000006 BYTES: COLLAPSED FUNCTION CString::Format(char const	*,...).	PRESS KEYPAD CTRL-"+" TO EXPAND]
.text:10003A1C						       ; [00000006 BYTES: COLLAPSED FUNCTION CTime::GetTickCount(void).	PRESS KEYPAD CTRL-"+" TO EXPAND]
.text:10003A22						       ; [00000006 BYTES: COLLAPSED FUNCTION CString::Right(int). PRESS	KEYPAD CTRL-"+"	TO EXPAND]
.text:10003A28						       ; [00000006 BYTES: COLLAPSED FUNCTION CString::Left(int). PRESS KEYPAD CTRL-"+" TO EXPAND]
.text:10003A2E						       ; [00000006 BYTES: COLLAPSED FUNCTION CString::Mid(int,int). PRESS KEYPAD CTRL-"+" TO EXPAND]
.text:10003A34						       ; [00000006 BYTES: COLLAPSED FUNCTION CString::Find(char,int). PRESS KEYPAD CTRL-"+" TO EXPAND]
.text:10003A3A						       ; [00000006 BYTES: COLLAPSED FUNCTION CString::operator+=(char const *).	PRESS KEYPAD CTRL-"+" TO EXPAND]
.text:10003A40						       ; [00000006 BYTES: COLLAPSED FUNCTION CString::Find(char	const *). PRESS	KEYPAD CTRL-"+"	TO EXPAND]
.text:10003A46						       ; [00000006 BYTES: COLLAPSED FUNCTION CPtrList::AddTail(void *).	PRESS KEYPAD CTRL-"+" TO EXPAND]
.text:10003A4C						       ; [00000006 BYTES: COLLAPSED FUNCTION CPtrList::CPtrList(int). PRESS KEYPAD CTRL-"+" TO EXPAND]
.text:10003A52						       ; [00000006 BYTES: COLLAPSED FUNCTION CPtrList::FindIndex(int). PRESS KEYPAD CTRL-"+" TO	EXPAND]
.text:10003A58						       ; [00000006 BYTES: COLLAPSED FUNCTION AfxBeginThread(uint (*)(void *),void *,int,uint,ulong,_SECURITY_ATTRIBUTES	*). PRESS KEYPAD CTRL-"+" TO EXPAND]
.text:10003A5E
.text:10003A5E						       ; =============== S U B R O U T I N E =======================================
.text:10003A5E
.text:10003A5E						       ; Attributes: bp-based frame
.text:10003A5E
.text:10003A5E						       sub_10003A5E    proc near	       ; CODE XREF: CLocationInfo::CLocationInfo(void)+3Ep
.text:10003A5E											       ; CPhotoInfo::CPhotoInfo(void)+4Ap ...
.text:10003A5E
.text:10003A5E						       var_20	       = dword ptr -20h
.text:10003A5E						       var_1C	       = dword ptr -1Ch
.text:10003A5E						       ms_exc	       = CPPEH_RECORD ptr -18h
.text:10003A5E						       arg_0	       = dword ptr  8
.text:10003A5E						       arg_4	       = dword ptr  0Ch
.text:10003A5E						       arg_8	       = dword ptr  10h
.text:10003A5E						       arg_C	       = dword ptr  14h
.text:10003A5E						       arg_10	       = dword ptr  18h
.text:10003A5E
.text:10003A5E 55							       push    ebp
.text:10003A5F 8B EC							       mov     ebp, esp
.text:10003A61 6A FF							       push    0FFFFFFFFh
.text:10003A63 68 00 52	00 10						       push    offset stru_10005200
.text:10003A68 68 8C 3D	00 10						       push    offset _except_handler3
.text:10003A6D 64 A1 00	00 00 00					       mov     eax, large fs:0
.text:10003A73 50							       push    eax
.text:10003A74 64 89 25	00 00 00 00					       mov     large fs:0, esp
.text:10003A7B 83 EC 10							       sub     esp, 10h
.text:10003A7E 53							       push    ebx
.text:10003A7F 56							       push    esi
.text:10003A80 57							       push    edi
.text:10003A81 33 C0							       xor     eax, eax
.text:10003A83 89 45 E0							       mov     [ebp+var_20], eax
.text:10003A86 89 45 FC							       mov     [ebp+ms_exc.registration.TryLevel], eax
.text:10003A89 89 45 E4							       mov     [ebp+var_1C], eax
.text:10003A8C
.text:10003A8C						       loc_10003A8C:			       ; CODE XREF: sub_10003A5E+47j
.text:10003A8C 8B 45 E4							       mov     eax, [ebp+var_1C]
.text:10003A8F 3B 45 10							       cmp     eax, [ebp+arg_8]
.text:10003A92 7D 13							       jge     short loc_10003AA7
.text:10003A94 8B 75 08							       mov     esi, [ebp+arg_0]
.text:10003A97 8B CE							       mov     ecx, esi
.text:10003A99 FF 55 14							       call    [ebp+arg_C]
.text:10003A9C 03 75 0C							       add     esi, [ebp+arg_4]
.text:10003A9F 89 75 08							       mov     [ebp+arg_0], esi
.text:10003AA2 FF 45 E4							       inc     [ebp+var_1C]
.text:10003AA5 EB E5							       jmp     short loc_10003A8C
.text:10003AA7						       ; ---------------------------------------------------------------------------
.text:10003AA7
.text:10003AA7						       loc_10003AA7:			       ; CODE XREF: sub_10003A5E+34j
.text:10003AA7 C7 45 E0	01 00 00 00					       mov     [ebp+var_20], 1
.text:10003AAE 83 4D FC	FF						       or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh
.text:10003AB2 E8 11 00	00 00						       call    loc_10003AC8    ; Finally handler 0 for function	10003A5E
.text:10003AB7						       ; ---------------------------------------------------------------------------
.text:10003AB7
.text:10003AB7						       loc_10003AB7:			       ; CODE XREF: sub_10003A5E:loc_10003ADFj
.text:10003AB7 8B 4D F0							       mov     ecx, [ebp+ms_exc.registration.Next]
.text:10003ABA 64 89 0D	00 00 00 00					       mov     large fs:0, ecx
.text:10003AC1 5F							       pop     edi
.text:10003AC2 5E							       pop     esi
.text:10003AC3 5B							       pop     ebx
.text:10003AC4 C9							       leave
.text:10003AC5 C2 14 00							       retn    14h
.text:10003AC8						       ; ---------------------------------------------------------------------------
.text:10003AC8
.text:10003AC8						       loc_10003AC8:			       ; CODE XREF: sub_10003A5E+54j
.text:10003AC8											       ; DATA XREF: .rdata:stru_10005200o
.text:10003AC8 83 7D E0	00						       cmp     [ebp+var_20], 0 ; Finally handler 0 for function	10003A5E
.text:10003ACC 75 11							       jnz     short loc_10003ADF
.text:10003ACE FF 75 18							       push    [ebp+arg_10]
.text:10003AD1 FF 75 E4							       push    [ebp+var_1C]
.text:10003AD4 FF 75 0C							       push    [ebp+arg_4]
.text:10003AD7 FF 75 08							       push    [ebp+arg_0]
.text:10003ADA E8 91 00	00 00						       call    sub_10003B70
.text:10003ADF
.text:10003ADF						       loc_10003ADF:			       ; CODE XREF: sub_10003A5E+6Ej
.text:10003ADF C3							       retn
.text:10003ADF						       sub_10003A5E    endp
.text:10003ADF
.text:10003AE0						       ; [00000006 BYTES: COLLAPSED FUNCTION __CxxFrameHandler.	PRESS KEYPAD CTRL-"+" TO EXPAND]
.text:10003AE6 CC CC CC	CC CC CC CC CC CC CC				       align 10h
.text:10003AF0
.text:10003AF0						       ; =============== S U B R O U T I N E =======================================
.text:10003AF0
.text:10003AF0						       ; Attributes: bp-based frame
.text:10003AF0
.text:10003AF0						       sub_10003AF0    proc near	       ; CODE XREF: CLocationInfo::~CLocationInfo(void)+38p
.text:10003AF0											       ; sub_10001120+1Dp ...
.text:10003AF0
.text:10003AF0						       var_1C	       = dword ptr -1Ch
.text:10003AF0						       ms_exc	       = CPPEH_RECORD ptr -18h
.text:10003AF0						       arg_0	       = dword ptr  8
.text:10003AF0						       arg_4	       = dword ptr  0Ch
.text:10003AF0						       arg_8	       = dword ptr  10h
.text:10003AF0						       arg_C	       = dword ptr  14h
.text:10003AF0
.text:10003AF0 55							       push    ebp
.text:10003AF1 8B EC							       mov     ebp, esp
.text:10003AF3 6A FF							       push    0FFFFFFFFh
.text:10003AF5 68 10 52	00 10						       push    offset stru_10005210
.text:10003AFA 68 8C 3D	00 10						       push    offset _except_handler3
.text:10003AFF 64 A1 00	00 00 00					       mov     eax, large fs:0
.text:10003B05 50							       push    eax
.text:10003B06 64 89 25	00 00 00 00					       mov     large fs:0, esp
.text:10003B0D 83 EC 0C							       sub     esp, 0Ch
.text:10003B10 53							       push    ebx
.text:10003B11 56							       push    esi
.text:10003B12 57							       push    edi
.text:10003B13 83 65 E4	00						       and     [ebp+var_1C], 0
.text:10003B17 8B 75 0C							       mov     esi, [ebp+arg_4]
.text:10003B1A 8B C6							       mov     eax, esi
.text:10003B1C 0F AF 45	10						       imul    eax, [ebp+arg_8]
.text:10003B20 01 45 08							       add     [ebp+arg_0], eax
.text:10003B23 83 65 FC	00						       and     [ebp+ms_exc.registration.TryLevel], 0
.text:10003B27
.text:10003B27						       loc_10003B27:			       ; CODE XREF: sub_10003AF0+45j
.text:10003B27 FF 4D 10							       dec     [ebp+arg_8]
.text:10003B2A 78 0B							       js      short loc_10003B37
.text:10003B2C 29 75 08							       sub     [ebp+arg_0], esi
.text:10003B2F 8B 4D 08							       mov     ecx, [ebp+arg_0]
.text:10003B32 FF 55 14							       call    [ebp+arg_C]
.text:10003B35 EB F0							       jmp     short loc_10003B27
.text:10003B37						       ; ---------------------------------------------------------------------------
.text:10003B37
.text:10003B37						       loc_10003B37:			       ; CODE XREF: sub_10003AF0+3Aj
.text:10003B37 C7 45 E4	01 00 00 00					       mov     [ebp+var_1C], 1
.text:10003B3E 83 4D FC	FF						       or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh
.text:10003B42 E8 11 00	00 00						       call    loc_10003B58    ; Finally handler 0 for function	10003AF0
.text:10003B47						       ; ---------------------------------------------------------------------------
.text:10003B47
.text:10003B47						       loc_10003B47:			       ; CODE XREF: sub_10003AF0:loc_10003B6Fj
.text:10003B47 8B 4D F0							       mov     ecx, [ebp+ms_exc.registration.Next]
.text:10003B4A 64 89 0D	00 00 00 00					       mov     large fs:0, ecx
.text:10003B51 5F							       pop     edi
.text:10003B52 5E							       pop     esi
.text:10003B53 5B							       pop     ebx
.text:10003B54 C9							       leave
.text:10003B55 C2 10 00							       retn    10h
.text:10003B58						       ; ---------------------------------------------------------------------------
.text:10003B58
.text:10003B58						       loc_10003B58:			       ; CODE XREF: sub_10003AF0+52j
.text:10003B58											       ; DATA XREF: .rdata:stru_10005210o
.text:10003B58 83 7D E4	00						       cmp     [ebp+var_1C], 0 ; Finally handler 0 for function	10003AF0
.text:10003B5C 75 11							       jnz     short loc_10003B6F
.text:10003B5E FF 75 14							       push    [ebp+arg_C]
.text:10003B61 FF 75 10							       push    [ebp+arg_8]
.text:10003B64 FF 75 0C							       push    [ebp+arg_4]
.text:10003B67 FF 75 08							       push    [ebp+arg_0]
.text:10003B6A E8 01 00	00 00						       call    sub_10003B70
.text:10003B6F
.text:10003B6F						       loc_10003B6F:			       ; CODE XREF: sub_10003AF0+6Cj
.text:10003B6F C3							       retn
.text:10003B6F						       sub_10003AF0    endp
.text:10003B6F
.text:10003B70
.text:10003B70						       ; =============== S U B R O U T I N E =======================================
.text:10003B70
.text:10003B70						       ; Attributes: bp-based frame
.text:10003B70
.text:10003B70						       sub_10003B70    proc near	       ; CODE XREF: sub_10003A5E+7Cp
.text:10003B70											       ; sub_10003AF0+7Ap
.text:10003B70
.text:10003B70						       ms_exc	       = CPPEH_RECORD ptr -18h
.text:10003B70						       arg_0	       = dword ptr  8
.text:10003B70						       arg_4	       = dword ptr  0Ch
.text:10003B70						       arg_8	       = dword ptr  10h
.text:10003B70						       arg_C	       = dword ptr  14h
.text:10003B70
.text:10003B70 55							       push    ebp
.text:10003B71 8B EC							       mov     ebp, esp
.text:10003B73 6A FF							       push    0FFFFFFFFh
.text:10003B75 68 20 52	00 10						       push    offset stru_10005220
.text:10003B7A 68 8C 3D	00 10						       push    offset _except_handler3
.text:10003B7F 64 A1 00	00 00 00					       mov     eax, large fs:0
.text:10003B85 50							       push    eax
.text:10003B86 64 89 25	00 00 00 00					       mov     large fs:0, esp
.text:10003B8D 51							       push    ecx
.text:10003B8E 51							       push    ecx
.text:10003B8F 53							       push    ebx
.text:10003B90 56							       push    esi
.text:10003B91 57							       push    edi
.text:10003B92 89 65 E8							       mov     [ebp+ms_exc.old_esp], esp
.text:10003B95 83 65 FC	00						       and     [ebp+ms_exc.registration.TryLevel], 0
.text:10003B99
.text:10003B99						       loc_10003B99:			       ; CODE XREF: sub_10003B70+3Aj
.text:10003B99 FF 4D 10							       dec     [ebp+arg_8]
.text:10003B9C 78 1B							       js      short loc_10003BB9
.text:10003B9E 8B 4D 08							       mov     ecx, [ebp+arg_0]
.text:10003BA1 2B 4D 0C							       sub     ecx, [ebp+arg_4]
.text:10003BA4 89 4D 08							       mov     [ebp+arg_0], ecx
.text:10003BA7 FF 55 14							       call    [ebp+arg_C]
.text:10003BAA EB ED							       jmp     short loc_10003B99
.text:10003BAC						       ; ---------------------------------------------------------------------------
.text:10003BAC
.text:10003BAC						       loc_10003BAC:			       ; DATA XREF: .rdata:stru_10005220o
.text:10003BAC FF 75 EC							       push    [ebp+ms_exc.exc_ptr] ; Exception	filter 0 for function 10003B70
.text:10003BAF E8 1A 00	00 00						       call    sub_10003BCE
.text:10003BB4 59							       pop     ecx
.text:10003BB5 C3							       retn
.text:10003BB6						       ; ---------------------------------------------------------------------------
.text:10003BB6
.text:10003BB6						       loc_10003BB6:			       ; DATA XREF: .rdata:stru_10005220o
.text:10003BB6 8B 65 E8							       mov     esp, [ebp+ms_exc.old_esp] ; Exception handler 0 for function 10003B70
.text:10003BB9
.text:10003BB9						       loc_10003BB9:			       ; CODE XREF: sub_10003B70+2Cj
.text:10003BB9 83 4D FC	FF						       or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh
.text:10003BBD 8B 4D F0							       mov     ecx, [ebp+ms_exc.registration.Next]
.text:10003BC0 64 89 0D	00 00 00 00					       mov     large fs:0, ecx
.text:10003BC7 5F							       pop     edi
.text:10003BC8 5E							       pop     esi
.text:10003BC9 5B							       pop     ebx
.text:10003BCA C9							       leave
.text:10003BCB C2 10 00							       retn    10h
.text:10003BCB						       sub_10003B70    endp
.text:10003BCB
.text:10003BCE
.text:10003BCE						       ; =============== S U B R O U T I N E =======================================
.text:10003BCE
.text:10003BCE
.text:10003BCE						       sub_10003BCE    proc near	       ; CODE XREF: sub_10003B70+3Fp
.text:10003BCE
.text:10003BCE						       arg_0	       = dword ptr  4
.text:10003BCE
.text:10003BCE 8B 44 24	04						       mov     eax, [esp+arg_0]
.text:10003BD2 8B 00							       mov     eax, [eax]
.text:10003BD4 81 38 63	73 6D E0					       cmp     dword ptr [eax],	0E06D7363h
.text:10003BDA 74 03							       jz      short loc_10003BDF
.text:10003BDC 33 C0							       xor     eax, eax
.text:10003BDE C3							       retn
.text:10003BDF						       ; ---------------------------------------------------------------------------
.text:10003BDF
.text:10003BDF						       loc_10003BDF:			       ; CODE XREF: sub_10003BCE+Cj
.text:10003BDF E9 AE 01	00 00						       jmp     ?terminate@@YAXXZ ; terminate(void)
.text:10003BDF						       sub_10003BCE    endp
.text:10003BDF
.text:10003BE4						       ; [00000006 BYTES: COLLAPSED FUNCTION _ftol. PRESS KEYPAD CTRL-"+" TO EXPAND]
.text:10003BEA
.text:10003BEA						       ; =============== S U B R O U T I N E =======================================
.text:10003BEA
.text:10003BEA
.text:10003BEA						       ; int __thiscall	sub_10003BEA(void *, char)
.text:10003BEA						       sub_10003BEA    proc near	       ; DATA XREF: .rdata:off_10005230o
.text:10003BEA
.text:10003BEA						       arg_0	       = byte ptr  4
.text:10003BEA
.text:10003BEA 56							       push    esi
.text:10003BEB 8B F1							       mov     esi, ecx
.text:10003BED E8 A6 01	00 00						       call    ??1type_info@@UAE@XZ ; type_info::~type_info(void)
.text:10003BF2 F6 44 24	08 01						       test    [esp+4+arg_0], 1
.text:10003BF7 74 07							       jz      short loc_10003C00
.text:10003BF9 56							       push    esi	       ; void *
.text:10003BFA E8 93 FD	FF FF						       call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:10003BFF 59							       pop     ecx
.text:10003C00
.text:10003C00						       loc_10003C00:			       ; CODE XREF: sub_10003BEA+Dj
.text:10003C00 8B C6							       mov     eax, esi
.text:10003C02 5E							       pop     esi
.text:10003C03 C2 04 00							       retn    4
.text:10003C03						       sub_10003BEA    endp
.text:10003C03
.text:10003C06
.text:10003C06						       ; =============== S U B R O U T I N E =======================================
.text:10003C06
.text:10003C06
.text:10003C06						       ; int __cdecl sub_10003C06(_onexit_t Func)
.text:10003C06						       sub_10003C06    proc near	       ; CODE XREF: sub_10003C32+4p
.text:10003C06
.text:10003C06						       Func	       = dword ptr  4
.text:10003C06
.text:10003C06 83 3D 24	61 00 10 FF					       cmp     Memory, 0FFFFFFFFh
.text:10003C0D 75 0C							       jnz     short loc_10003C1B
.text:10003C0F FF 74 24	04						       push    [esp+Func]      ; Func
.text:10003C13 FF 15 1C	51 00 10					       call    ds:_onexit
.text:10003C19 59							       pop     ecx
.text:10003C1A C3							       retn
.text:10003C1B						       ; ---------------------------------------------------------------------------
.text:10003C1B
.text:10003C1B						       loc_10003C1B:			       ; CODE XREF: sub_10003C06+7j
.text:10003C1B 68 20 61	00 10						       push    offset dword_10006120
.text:10003C20 68 24 61	00 10						       push    offset Memory
.text:10003C25 FF 74 24	0C						       push    [esp+8+Func]
.text:10003C29 E8 70 01	00 00						       call    __dllonexit
.text:10003C2E 83 C4 0C							       add     esp, 0Ch
.text:10003C31 C3							       retn
.text:10003C31						       sub_10003C06    endp
.text:10003C31
.text:10003C32
.text:10003C32						       ; =============== S U B R O U T I N E =======================================
.text:10003C32
.text:10003C32
.text:10003C32						       ; int __cdecl sub_10003C32(_onexit_t Func)
.text:10003C32						       sub_10003C32    proc near	       ; CODE XREF: sub_10002AE0+25p
.text:10003C32
.text:10003C32						       Func	       = dword ptr  4
.text:10003C32
.text:10003C32 FF 74 24	04						       push    [esp+Func]      ; Func
.text:10003C36 E8 CB FF	FF FF						       call    sub_10003C06
.text:10003C3B F7 D8							       neg     eax
.text:10003C3D 1B C0							       sbb     eax, eax
.text:10003C3F 59							       pop     ecx
.text:10003C40 F7 D8							       neg     eax
.text:10003C42 48							       dec     eax
.text:10003C43 C3							       retn
.text:10003C43						       sub_10003C32    endp
.text:10003C43
.text:10003C44
.text:10003C44						       ; =============== S U B R O U T I N E =======================================
.text:10003C44
.text:10003C44
.text:10003C44						       sub_10003C44    proc near	       ; CODE XREF: DllEntryPoint+70p
.text:10003C44
.text:10003C44						       arg_4	       = dword ptr  8
.text:10003C44
.text:10003C44 8B 44 24	08						       mov     eax, [esp+arg_4]
.text:10003C48 85 C0							       test    eax, eax
.text:10003C4A 75 0E							       jnz     short loc_10003C5A
.text:10003C4C 39 05 18	61 00 10					       cmp     dword_10006118, eax
.text:10003C52 7E 2E							       jle     short loc_10003C82
.text:10003C54 FF 0D 18	61 00 10					       dec     dword_10006118
.text:10003C5A
.text:10003C5A						       loc_10003C5A:			       ; CODE XREF: sub_10003C44+6j
.text:10003C5A 8B 0D 0C	51 00 10					       mov     ecx, ds:_adjust_fdiv
.text:10003C60 83 F8 01							       cmp     eax, 1
.text:10003C63 8B 09							       mov     ecx, [ecx]
.text:10003C65 89 0D 1C	61 00 10					       mov     dword_1000611C, ecx
.text:10003C6B 75 3F							       jnz     short loc_10003CAC
.text:10003C6D 68 80 00	00 00						       push    80h	       ; Size
.text:10003C72 FF 15 10	51 00 10					       call    ds:malloc
.text:10003C78 85 C0							       test    eax, eax
.text:10003C7A 59							       pop     ecx
.text:10003C7B A3 24 61	00 10						       mov     Memory, eax
.text:10003C80 75 04							       jnz     short loc_10003C86
.text:10003C82
.text:10003C82						       loc_10003C82:			       ; CODE XREF: sub_10003C44+Ej
.text:10003C82 33 C0							       xor     eax, eax
.text:10003C84 EB 66							       jmp     short locret_10003CEC
.text:10003C86						       ; ---------------------------------------------------------------------------
.text:10003C86
.text:10003C86						       loc_10003C86:			       ; CODE XREF: sub_10003C44+3Cj
.text:10003C86 83 20 00							       and     dword ptr [eax],	0
.text:10003C89 A1 24 61	00 10						       mov     eax, Memory
.text:10003C8E 68 04 60	00 10						       push    offset unk_10006004
.text:10003C93 68 00 60	00 10						       push    offset unk_10006000
.text:10003C98 A3 20 61	00 10						       mov     dword_10006120, eax
.text:10003C9D E8 02 01	00 00						       call    _initterm
.text:10003CA2 FF 05 18	61 00 10					       inc     dword_10006118
.text:10003CA8 59							       pop     ecx
.text:10003CA9 59							       pop     ecx
.text:10003CAA EB 3D							       jmp     short loc_10003CE9
.text:10003CAC						       ; ---------------------------------------------------------------------------
.text:10003CAC
.text:10003CAC						       loc_10003CAC:			       ; CODE XREF: sub_10003C44+27j
.text:10003CAC 85 C0							       test    eax, eax
.text:10003CAE 75 39							       jnz     short loc_10003CE9
.text:10003CB0 A1 24 61	00 10						       mov     eax, Memory
.text:10003CB5 85 C0							       test    eax, eax
.text:10003CB7 74 30							       jz      short loc_10003CE9
.text:10003CB9 8B 0D 20	61 00 10					       mov     ecx, dword_10006120
.text:10003CBF 56							       push    esi
.text:10003CC0 8D 71 FC							       lea     esi, [ecx-4]
.text:10003CC3
.text:10003CC3						       loc_10003CC3:			       ; CODE XREF: sub_10003C44+93j
.text:10003CC3 3B F0							       cmp     esi, eax
.text:10003CC5 72 12							       jb      short loc_10003CD9
.text:10003CC7 8B 0E							       mov     ecx, [esi]
.text:10003CC9 85 C9							       test    ecx, ecx
.text:10003CCB 74 07							       jz      short loc_10003CD4
.text:10003CCD FF D1							       call    ecx
.text:10003CCF A1 24 61	00 10						       mov     eax, Memory
.text:10003CD4
.text:10003CD4						       loc_10003CD4:			       ; CODE XREF: sub_10003C44+87j
.text:10003CD4 83 EE 04							       sub     esi, 4
.text:10003CD7 EB EA							       jmp     short loc_10003CC3
.text:10003CD9						       ; ---------------------------------------------------------------------------
.text:10003CD9
.text:10003CD9						       loc_10003CD9:			       ; CODE XREF: sub_10003C44+81j
.text:10003CD9 50							       push    eax	       ; Memory
.text:10003CDA FF 15 18	51 00 10					       call    ds:free
.text:10003CE0 83 25 24	61 00 10 00					       and     Memory, 0
.text:10003CE7 59							       pop     ecx
.text:10003CE8 5E							       pop     esi
.text:10003CE9
.text:10003CE9						       loc_10003CE9:			       ; CODE XREF: sub_10003C44+66j
.text:10003CE9											       ; sub_10003C44+6Aj ...
.text:10003CE9 6A 01							       push    1
.text:10003CEB 58							       pop     eax
.text:10003CEC
.text:10003CEC						       locret_10003CEC:			       ; CODE XREF: sub_10003C44+40j
.text:10003CEC C2 0C 00							       retn    0Ch
.text:10003CEC						       sub_10003C44    endp
.text:10003CEC
.text:10003CEF
.text:10003CEF						       ; =============== S U B R O U T I N E =======================================
.text:10003CEF
.text:10003CEF
.text:10003CEF						       ; BOOL __stdcall	DllEntryPoint(HINSTANCE	hinstDLL, DWORD	fdwReason, LPVOID lpReserved)
.text:10003CEF								       public DllEntryPoint
.text:10003CEF						       DllEntryPoint   proc near
.text:10003CEF
.text:10003CEF						       hinstDLL	       = dword ptr  4
.text:10003CEF						       fdwReason       = dword ptr  8
.text:10003CEF						       lpReserved      = dword ptr  0Ch
.text:10003CEF
.text:10003CEF 83 EC 04							       sub     esp, 4
.text:10003CF2 60							       pusha
.text:10003CF3 BE 10 00	00 00						       mov     esi, 10h
.text:10003CF8 8D 54 76	10						       lea     edx, [esi+esi*2+10h]
.text:10003CFC 52							       push    edx	       ; flProtect
.text:10003CFD BE 00 03	00 00						       mov     esi, 300h
.text:10003D02 8D 0C B5	00 04 00 00					       lea     ecx, ds:400h[esi*4]
.text:10003D09 51							       push    ecx	       ; flAllocationType
.text:10003D0A BE 01 00	00 00						       mov     esi, 1
.text:10003D0F C1 E6 0B							       shl     esi, 0Bh
.text:10003D12 56							       push    esi	       ; dwSize
.text:10003D13 31 F6							       xor     esi, esi
.text:10003D15 56							       push    esi	       ; lpAddress
.text:10003D16 FF 15 34	50 00 10					       call    ds:VirtualAlloc
.text:10003D1C 50							       push    eax
.text:10003D1D 5B							       pop     ebx
.text:10003D1E BF 00 00	00 00						       mov     edi, 0
.text:10003D23 81 F7 CC	70 00 10					       xor     edi, offset unk_100070CC
.text:10003D29 31 D2							       xor     edx, edx
.text:10003D2B 31 FA							       xor     edx, edi
.text:10003D2D B9 CC 70	00 10						       mov     ecx, offset unk_100070CC
.text:10003D32 29 CA							       sub     edx, ecx
.text:10003D34 52							       push    edx
.text:10003D35 53							       push    ebx
.text:10003D36 31 C9							       xor     ecx, ecx
.text:10003D38 01 F9							       add     ecx, edi
.text:10003D3A 8B 01							       mov     eax, [ecx]
.text:10003D3C 83 C7 25							       add     edi, 25h
.text:10003D3F 83 EF 21							       sub     edi, 21h
.text:10003D42
.text:10003D42						       loc_10003D42:			       ; CODE XREF: DllEntryPoint+63j
.text:10003D42 8D 4C 07	FF						       lea     ecx, [edi+eax-1]
.text:10003D46 0F B6 11							       movzx   edx, byte ptr [ecx]
.text:10003D49 8D 74 03	FF						       lea     esi, [ebx+eax-1]
.text:10003D4D 88 16							       mov     [esi], dl
.text:10003D4F 48							       dec     eax
.text:10003D50 09 C0							       or      eax, eax
.text:10003D52 75 EE							       jnz     short loc_10003D42
.text:10003D54 5E							       pop     esi
.text:10003D55 89 76 01							       mov     [esi+1],	esi
.text:10003D58 FF D6							       call    esi
.text:10003D5A 75 26							       jnz     short loc_10003D82
.text:10003D5C 57							       push    edi
.text:10003D5D 56							       push    esi
.text:10003D5E 53							       push    ebx
.text:10003D5F E8 E0 FE	FF FF						       call    sub_10003C44
.text:10003D64 85 C0							       test    eax, eax
.text:10003D66 75 03							       jnz     short loc_10003D6B
.text:10003D68 21 45 0C							       and     [ebp+0Ch], eax
.text:10003D6B
.text:10003D6B						       loc_10003D6B:			       ; CODE XREF: DllEntryPoint+77j
.text:10003D6B 83 7D 0C	00						       cmp     dword ptr [ebp+0Ch], 0
.text:10003D6F 74 11							       jz      short loc_10003D82
.text:10003D71 A1 10 60	00 10						       mov     eax, off_10006010
.text:10003D76 85 C0							       test    eax, eax
.text:10003D78 74 08							       jz      short loc_10003D82
.text:10003D7A 57							       push    edi
.text:10003D7B 56							       push    esi
.text:10003D7C 53							       push    ebx
.text:10003D7D FF D0							       call    eax ; sub_10001420
.text:10003D7F 89 45 0C							       mov     [ebp+0Ch], eax
.text:10003D82
.text:10003D82						       loc_10003D82:			       ; CODE XREF: DllEntryPoint+6Bj
.text:10003D82											       ; DllEntryPoint+80j ...
.text:10003D82 8B 45 0C							       mov     eax, [ebp+0Ch]
.text:10003D85 5F							       pop     edi
.text:10003D86 5E							       pop     esi
.text:10003D87 5B							       pop     ebx
.text:10003D88 5D							       pop     ebp
.text:10003D89 C2 0C 00							       retn    0Ch
.text:10003D89						       DllEntryPoint   endp
.text:10003D89
.text:10003D8C						       ; [00000006 BYTES: COLLAPSED FUNCTION _except_handler3. PRESS KEYPAD CTRL-"+" TO	EXPAND]
.text:10003D92						       ; [00000006 BYTES: COLLAPSED FUNCTION terminate(void). PRESS KEYPAD CTRL-"+" TO EXPAND]
.text:10003D98						       ; [00000006 BYTES: COLLAPSED FUNCTION type_info::~type_info(void). PRESS	KEYPAD CTRL-"+"	TO EXPAND]
.text:10003D9E						       ; [00000006 BYTES: COLLAPSED FUNCTION __dllonexit. PRESS	KEYPAD CTRL-"+"	TO EXPAND]
.text:10003DA4						       ; [00000006 BYTES: COLLAPSED FUNCTION _initterm.	PRESS KEYPAD CTRL-"+" TO EXPAND]
.text:10003DAA CC CC CC	CC CC CC					       align 10h
.text:10003DB0
.text:10003DB0						       ; =============== S U B R O U T I N E =======================================
.text:10003DB0
.text:10003DB0
.text:10003DB0						       sub_10003DB0    proc near	       ; DATA XREF: .rdata:stru_10005280o
.text:10003DB0
.text:10003DB0						       ; FUNCTION CHUNK	AT .text:10001090 SIZE 00000007	BYTES
.text:10003DB0
.text:10003DB0 8B 4D F0							       mov     ecx, [ebp-10h]
.text:10003DB3 E9 D8 D2	FF FF						       jmp     loc_10001090
.text:10003DB3						       sub_10003DB0    endp
.text:10003DB3
.text:10003DB8
.text:10003DB8						       ; =============== S U B R O U T I N E =======================================
.text:10003DB8
.text:10003DB8
.text:10003DB8						       ??0CLocationInfo@@QAE@XZ_SEH proc near  ; DATA XREF: CLocationInfo::CLocationInfo(void)+2o
.text:10003DB8 B8 80 52	00 10						       mov     eax, offset stru_10005280
.text:10003DBD E9 1E FD	FF FF						       jmp     __CxxFrameHandler
.text:10003DBD						       ??0CLocationInfo@@QAE@XZ_SEH endp
.text:10003DBD
.text:10003DBD						       ; ---------------------------------------------------------------------------
.text:10003DC2 CC CC CC	CC CC CC CC CC CC CC CC	CC CC CC		       align 10h
.text:10003DD0
.text:10003DD0						       ; =============== S U B R O U T I N E =======================================
.text:10003DD0
.text:10003DD0
.text:10003DD0						       sub_10003DD0    proc near	       ; DATA XREF: .rdata:stru_100052A8o
.text:10003DD0 8B 4D F0							       mov     ecx, [ebp-10h]
.text:10003DD3 E9 B8 D2	FF FF						       jmp     loc_10001090
.text:10003DD3						       sub_10003DD0    endp
.text:10003DD3
.text:10003DD8
.text:10003DD8						       ; =============== S U B R O U T I N E =======================================
.text:10003DD8
.text:10003DD8
.text:10003DD8						       ??1CLocationInfo@@UAE@XZ_SEH proc near  ; DATA XREF: CLocationInfo::~CLocationInfo(void)+2o
.text:10003DD8 B8 A8 52	00 10						       mov     eax, offset stru_100052A8
.text:10003DDD E9 FE FC	FF FF						       jmp     __CxxFrameHandler
.text:10003DDD						       ??1CLocationInfo@@UAE@XZ_SEH endp
.text:10003DDD
.text:10003DDD						       ; ---------------------------------------------------------------------------
.text:10003DE2 CC CC CC	CC CC CC CC CC CC CC CC	CC CC CC		       align 10h
.text:10003DF0
.text:10003DF0						       ; =============== S U B R O U T I N E =======================================
.text:10003DF0
.text:10003DF0
.text:10003DF0						       sub_10003DF0    proc near	       ; DATA XREF: .rdata:stru_100052D0o
.text:10003DF0 8B 4D F0							       mov     ecx, [ebp-10h]
.text:10003DF3 E9 98 D2	FF FF						       jmp     loc_10001090
.text:10003DF3						       sub_10003DF0    endp
.text:10003DF3
.text:10003DF8
.text:10003DF8						       ; =============== S U B R O U T I N E =======================================
.text:10003DF8
.text:10003DF8
.text:10003DF8						       sub_10003DF8    proc near	       ; DATA XREF: .rdata:stru_100052D0o
.text:10003DF8 8B 4D F0							       mov     ecx, [ebp-10h]
.text:10003DFB 83 C1 08							       add     ecx, 8	       ; this
.text:10003DFE E9 89 FB	FF FF						       jmp     ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10003DFE						       sub_10003DF8    endp
.text:10003DFE
.text:10003E03
.text:10003E03						       ; =============== S U B R O U T I N E =======================================
.text:10003E03
.text:10003E03
.text:10003E03						       ??0CPhotoInfo@@QAE@XZ_SEH proc near     ; DATA XREF: CPhotoInfo::CPhotoInfo(void)+2o
.text:10003E03 B8 D0 52	00 10						       mov     eax, offset stru_100052D0
.text:10003E08 E9 D3 FC	FF FF						       jmp     __CxxFrameHandler
.text:10003E08						       ??0CPhotoInfo@@QAE@XZ_SEH endp
.text:10003E08
.text:10003E08						       ; ---------------------------------------------------------------------------
.text:10003E0D CC CC CC							       align 10h
.text:10003E10
.text:10003E10						       ; =============== S U B R O U T I N E =======================================
.text:10003E10
.text:10003E10
.text:10003E10						       sub_10003E10    proc near	       ; DATA XREF: .rdata:stru_10005300o
.text:10003E10 8B 4D F0							       mov     ecx, [ebp-10h]
.text:10003E13 E9 78 D2	FF FF						       jmp     loc_10001090
.text:10003E13						       sub_10003E10    endp
.text:10003E13
.text:10003E18
.text:10003E18						       ; =============== S U B R O U T I N E =======================================
.text:10003E18
.text:10003E18
.text:10003E18						       sub_10003E18    proc near	       ; DATA XREF: .rdata:stru_10005300o
.text:10003E18 8B 4D F0							       mov     ecx, [ebp-10h]
.text:10003E1B 83 C1 08							       add     ecx, 8	       ; this
.text:10003E1E E9 69 FB	FF FF						       jmp     ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10003E1E						       sub_10003E18    endp
.text:10003E1E
.text:10003E23
.text:10003E23						       ; =============== S U B R O U T I N E =======================================
.text:10003E23
.text:10003E23
.text:10003E23						       ??1CPhotoInfo@@UAE@XZ_SEH proc near     ; DATA XREF: CPhotoInfo::~CPhotoInfo(void)+2o
.text:10003E23 B8 00 53	00 10						       mov     eax, offset stru_10005300
.text:10003E28 E9 B3 FC	FF FF						       jmp     __CxxFrameHandler
.text:10003E28						       ??1CPhotoInfo@@UAE@XZ_SEH endp
.text:10003E28
.text:10003E28						       ; ---------------------------------------------------------------------------
.text:10003E2D CC CC CC							       align 10h
.text:10003E30
.text:10003E30						       ; =============== S U B R O U T I N E =======================================
.text:10003E30
.text:10003E30
.text:10003E30						       sub_10003E30    proc near	       ; DATA XREF: .rdata:stru_10005330o
.text:10003E30 8B 4D F0							       mov     ecx, [ebp-10h]
.text:10003E33 E9 58 D2	FF FF						       jmp     loc_10001090
.text:10003E33						       sub_10003E30    endp
.text:10003E33
.text:10003E38
.text:10003E38						       ; =============== S U B R O U T I N E =======================================
.text:10003E38
.text:10003E38
.text:10003E38						       sub_10003E38    proc near	       ; DATA XREF: .rdata:stru_10005330o
.text:10003E38 8B 4D F0							       mov     ecx, [ebp-10h]
.text:10003E3B 83 C1 04							       add     ecx, 4	       ; this
.text:10003E3E E9 55 FB	FF FF						       jmp     ??1CImageList@@UAE@XZ ; CImageList::~CImageList(void)
.text:10003E3E						       sub_10003E38    endp
.text:10003E3E
.text:10003E43
.text:10003E43						       ; =============== S U B R O U T I N E =======================================
.text:10003E43
.text:10003E43
.text:10003E43						       sub_10003E43    proc near	       ; DATA XREF: .rdata:stru_10005330o
.text:10003E43 8B 4D F0							       mov     ecx, [ebp-10h]
.text:10003E46 83 C1 0C							       add     ecx, 0Ch
.text:10003E49 FF 25 0C	50 00 10					       jmp     ds:??1CSortableObList@@UAE@XZ ; CSortableObList::~CSortableObList(void)
.text:10003E49						       sub_10003E43    endp
.text:10003E49
.text:10003E4F
.text:10003E4F						       ; =============== S U B R O U T I N E =======================================
.text:10003E4F
.text:10003E4F
.text:10003E4F						       ??0CListInfo@@QAE@XZ_SEH	proc near      ; DATA XREF: CListInfo::CListInfo(void)+2o
.text:10003E4F B8 30 53	00 10						       mov     eax, offset stru_10005330
.text:10003E54 E9 87 FC	FF FF						       jmp     __CxxFrameHandler
.text:10003E54						       ??0CListInfo@@QAE@XZ_SEH	endp
.text:10003E54
.text:10003E54						       ; ---------------------------------------------------------------------------
.text:10003E59 CC CC CC	CC CC CC CC					       align 10h
.text:10003E60
.text:10003E60						       ; =============== S U B R O U T I N E =======================================
.text:10003E60
.text:10003E60
.text:10003E60						       sub_10003E60    proc near	       ; DATA XREF: .rdata:stru_10005368o
.text:10003E60 8B 4D F0							       mov     ecx, [ebp-10h]
.text:10003E63 E9 28 D2	FF FF						       jmp     loc_10001090
.text:10003E63						       sub_10003E60    endp
.text:10003E63
.text:10003E68
.text:10003E68						       ; =============== S U B R O U T I N E =======================================
.text:10003E68
.text:10003E68
.text:10003E68						       sub_10003E68    proc near	       ; DATA XREF: .rdata:stru_10005368o
.text:10003E68 8B 4D F0							       mov     ecx, [ebp-10h]
.text:10003E6B 83 C1 04							       add     ecx, 4	       ; this
.text:10003E6E E9 25 FB	FF FF						       jmp     ??1CImageList@@UAE@XZ ; CImageList::~CImageList(void)
.text:10003E6E						       sub_10003E68    endp
.text:10003E6E
.text:10003E73
.text:10003E73						       ; =============== S U B R O U T I N E =======================================
.text:10003E73
.text:10003E73
.text:10003E73						       sub_10003E73    proc near	       ; DATA XREF: .rdata:stru_10005368o
.text:10003E73 8B 4D F0							       mov     ecx, [ebp-10h]
.text:10003E76 83 C1 0C							       add     ecx, 0Ch
.text:10003E79 FF 25 0C	50 00 10					       jmp     ds:??1CSortableObList@@UAE@XZ ; CSortableObList::~CSortableObList(void)
.text:10003E79						       sub_10003E73    endp
.text:10003E79
.text:10003E7F
.text:10003E7F						       ; =============== S U B R O U T I N E =======================================
.text:10003E7F
.text:10003E7F
.text:10003E7F						       ??1CListInfo@@UAE@XZ_SEH	proc near      ; DATA XREF: CListInfo::~CListInfo(void)+2o
.text:10003E7F B8 68 53	00 10						       mov     eax, offset stru_10005368
.text:10003E84 E9 57 FC	FF FF						       jmp     __CxxFrameHandler
.text:10003E84						       ??1CListInfo@@UAE@XZ_SEH	endp
.text:10003E84
.text:10003E84						       ; ---------------------------------------------------------------------------
.text:10003E89 CC CC CC	CC CC CC CC					       align 10h
.text:10003E90
.text:10003E90						       ; =============== S U B R O U T I N E =======================================
.text:10003E90
.text:10003E90
.text:10003E90						       sub_10003E90    proc near	       ; DATA XREF: .rdata:stru_100053A0o
.text:10003E90 8D 4D DC							       lea     ecx, [ebp-24h]  ; this
.text:10003E93 E9 F4 FA	FF FF						       jmp     ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10003E93						       sub_10003E90    endp
.text:10003E93
.text:10003E98
.text:10003E98						       ; =============== S U B R O U T I N E =======================================
.text:10003E98
.text:10003E98
.text:10003E98						       sub_10003E98    proc near	       ; DATA XREF: .rdata:stru_100053A0o
.text:10003E98 8B 45 E0							       mov     eax, [ebp-20h]
.text:10003E9B 83 E0 01							       and     eax, 1
.text:10003E9E 85 C0							       test    eax, eax
.text:10003EA0 0F 84 08	00 00 00					       jz      locret_10003EAE
.text:10003EA6 8B 4D 04							       mov     ecx, [ebp+4]    ; this
.text:10003EA9 E9 DE FA	FF FF						       jmp     ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10003EAE						       ; ---------------------------------------------------------------------------
.text:10003EAE
.text:10003EAE						       locret_10003EAE:			       ; CODE XREF: sub_10003E98+8j
.text:10003EAE C3							       retn
.text:10003EAE						       sub_10003E98    endp
.text:10003EAE
.text:10003EAF
.text:10003EAF						       ; =============== S U B R O U T I N E =======================================
.text:10003EAF
.text:10003EAF
.text:10003EAF						       sub_10003EAF    proc near	       ; DATA XREF: .rdata:stru_100053A0o
.text:10003EAF 8D 4D E4							       lea     ecx, [ebp-1Ch]  ; this
.text:10003EB2 E9 17 FB	FF FF						       jmp     ??1CFile@@UAE@XZ	; CFile::~CFile(void)
.text:10003EB2						       sub_10003EAF    endp
.text:10003EB2
.text:10003EB7
.text:10003EB7						       ; =============== S U B R O U T I N E =======================================
.text:10003EB7
.text:10003EB7
.text:10003EB7						       ?GSCRSearchGPSInfo@@YA?AVCString@@XZ_SEH	proc near
.text:10003EB7											       ; DATA XREF: GSCRSearchGPSInfo(void)+2o
.text:10003EB7 B8 A0 53	00 10						       mov     eax, offset stru_100053A0
.text:10003EBC E9 1F FC	FF FF						       jmp     __CxxFrameHandler
.text:10003EBC						       ?GSCRSearchGPSInfo@@YA?AVCString@@XZ_SEH	endp
.text:10003EBC
.text:10003EBC						       ; ---------------------------------------------------------------------------
.text:10003EC1 CC CC CC	CC CC CC CC CC CC CC CC	CC CC CC CC		       align 10h
.text:10003ED0
.text:10003ED0						       ; =============== S U B R O U T I N E =======================================
.text:10003ED0
.text:10003ED0
.text:10003ED0						       sub_10003ED0    proc near	       ; DATA XREF: .rdata:stru_100053D8o
.text:10003ED0 68 8C 39	00 10						       push    offset ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10003ED5 6A 06							       push    6
.text:10003ED7 6A 04							       push    4
.text:10003ED9 8D 85 54	FF FF FF					       lea     eax, [ebp-0ACh]
.text:10003EDF 50							       push    eax
.text:10003EE0 E8 0B FC	FF FF						       call    sub_10003AF0
.text:10003EE5 C3							       retn
.text:10003EE5						       sub_10003ED0    endp
.text:10003EE5
.text:10003EE6
.text:10003EE6						       ; =============== S U B R O U T I N E =======================================
.text:10003EE6
.text:10003EE6
.text:10003EE6						       sub_10003EE6    proc near	       ; DATA XREF: .rdata:stru_100053D8o
.text:10003EE6 8B 85 6C	FF FF FF					       mov     eax, [ebp-94h]
.text:10003EEC 50							       push    eax	       ; void *
.text:10003EED E8 6E DA	FF FF						       call    sub_10001960
.text:10003EF2 C3							       retn
.text:10003EF2						       sub_10003EE6    endp
.text:10003EF2
.text:10003EF3
.text:10003EF3						       ; =============== S U B R O U T I N E =======================================
.text:10003EF3
.text:10003EF3
.text:10003EF3						       sub_10003EF3    proc near	       ; DATA XREF: .rdata:stru_100053D8o
.text:10003EF3 8B 8D 6C	FF FF FF					       mov     ecx, [ebp-94h]
.text:10003EF9 E9 92 D1	FF FF						       jmp     loc_10001090
.text:10003EF9						       sub_10003EF3    endp
.text:10003EF9
.text:10003EFE
.text:10003EFE						       ; =============== S U B R O U T I N E =======================================
.text:10003EFE
.text:10003EFE
.text:10003EFE						       ?GSCRCreateLocationList@@YAJPBDPAVCListInfo@@@Z_SEH proc	near
.text:10003EFE											       ; DATA XREF: GSCRCreateLocationList(char	const *,CListInfo *)+2o
.text:10003EFE B8 D8 53	00 10						       mov     eax, offset stru_100053D8
.text:10003F03 E9 D8 FB	FF FF						       jmp     __CxxFrameHandler
.text:10003F03						       ?GSCRCreateLocationList@@YAJPBDPAVCListInfo@@@Z_SEH endp
.text:10003F03
.text:10003F03						       ; ---------------------------------------------------------------------------
.text:10003F08 CC CC CC	CC CC CC CC CC					       align 10h
.text:10003F10
.text:10003F10						       ; =============== S U B R O U T I N E =======================================
.text:10003F10
.text:10003F10
.text:10003F10						       sub_10003F10    proc near	       ; DATA XREF: .rdata:stru_10005410o
.text:10003F10 8D 8D EC	FC FF FF					       lea     ecx, [ebp-314h] ; this
.text:10003F16 E9 71 FA	FF FF						       jmp     ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10003F16						       sub_10003F10    endp
.text:10003F16
.text:10003F1B
.text:10003F1B						       ; =============== S U B R O U T I N E =======================================
.text:10003F1B
.text:10003F1B
.text:10003F1B						       sub_10003F1B    proc near	       ; DATA XREF: .rdata:stru_10005410o
.text:10003F1B 8D 8D E8	FC FF FF					       lea     ecx, [ebp-318h] ; this
.text:10003F21 E9 66 FA	FF FF						       jmp     ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10003F21						       sub_10003F1B    endp
.text:10003F21
.text:10003F26
.text:10003F26						       ; =============== S U B R O U T I N E =======================================
.text:10003F26
.text:10003F26
.text:10003F26						       ?GSCRAddLocationNameFromZipcode@@YAJPAVCListInfo@@@Z_SEH	proc near
.text:10003F26											       ; DATA XREF: GSCRAddLocationNameFromZipcode(CListInfo *)+2o
.text:10003F26 B8 10 54	00 10						       mov     eax, offset stru_10005410
.text:10003F2B E9 B0 FB	FF FF						       jmp     __CxxFrameHandler
.text:10003F2B						       ?GSCRAddLocationNameFromZipcode@@YAJPAVCListInfo@@@Z_SEH	endp
.text:10003F2B
.text:10003F30
.text:10003F30						       ; =============== S U B R O U T I N E =======================================
.text:10003F30
.text:10003F30
.text:10003F30						       sub_10003F30    proc near	       ; DATA XREF: .rdata:stru_10005440o
.text:10003F30 8B 4D F0							       mov     ecx, [ebp-10h]
.text:10003F33 E9 58 D1	FF FF						       jmp     loc_10001090
.text:10003F33						       sub_10003F30    endp
.text:10003F33
.text:10003F38
.text:10003F38						       ; =============== S U B R O U T I N E =======================================
.text:10003F38
.text:10003F38
.text:10003F38						       sub_10003F38    proc near	       ; DATA XREF: .rdata:stru_10005440o
.text:10003F38 8B 4D F0							       mov     ecx, [ebp-10h]
.text:10003F3B 83 C1 08							       add     ecx, 8	       ; this
.text:10003F3E E9 49 FA	FF FF						       jmp     ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10003F3E						       sub_10003F38    endp
.text:10003F3E
.text:10003F43
.text:10003F43						       ; =============== S U B R O U T I N E =======================================
.text:10003F43
.text:10003F43
.text:10003F43						       SEH_10001DA0    proc near	       ; DATA XREF: sub_10001DA0+2o
.text:10003F43 B8 40 54	00 10						       mov     eax, offset stru_10005440
.text:10003F48 E9 93 FB	FF FF						       jmp     __CxxFrameHandler
.text:10003F48						       SEH_10001DA0    endp
.text:10003F48
.text:10003F48						       ; ---------------------------------------------------------------------------
.text:10003F4D CC CC CC							       align 10h
.text:10003F50
.text:10003F50						       ; =============== S U B R O U T I N E =======================================
.text:10003F50
.text:10003F50
.text:10003F50						       sub_10003F50    proc near	       ; DATA XREF: .rdata:stru_10005470o
.text:10003F50 8D 4D 10							       lea     ecx, [ebp+10h]  ; this
.text:10003F53 E9 34 FA	FF FF						       jmp     ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10003F53						       sub_10003F50    endp
.text:10003F53
.text:10003F58
.text:10003F58						       ; =============== S U B R O U T I N E =======================================
.text:10003F58
.text:10003F58
.text:10003F58						       sub_10003F58    proc near	       ; DATA XREF: .rdata:stru_10005470o
.text:10003F58 8D 4D 0C							       lea     ecx, [ebp+0Ch]  ; this
.text:10003F5B E9 2C FA	FF FF						       jmp     ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10003F5B						       sub_10003F58    endp
.text:10003F5B
.text:10003F60
.text:10003F60						       ; =============== S U B R O U T I N E =======================================
.text:10003F60
.text:10003F60
.text:10003F60						       SEH_10001E20    proc near	       ; DATA XREF: sub_10001E20+8o
.text:10003F60 B8 70 54	00 10						       mov     eax, offset stru_10005470
.text:10003F65 E9 76 FB	FF FF						       jmp     __CxxFrameHandler
.text:10003F65						       SEH_10001E20    endp
.text:10003F65
.text:10003F65						       ; ---------------------------------------------------------------------------
.text:10003F6A CC CC CC	CC CC CC					       align 10h
.text:10003F70
.text:10003F70						       ; =============== S U B R O U T I N E =======================================
.text:10003F70
.text:10003F70
.text:10003F70						       sub_10003F70    proc near	       ; DATA XREF: .rdata:stru_100054A0o
.text:10003F70 8B 4D F0							       mov     ecx, [ebp-10h]
.text:10003F73 E9 18 D1	FF FF						       jmp     loc_10001090
.text:10003F73						       sub_10003F70    endp
.text:10003F73
.text:10003F78
.text:10003F78						       ; =============== S U B R O U T I N E =======================================
.text:10003F78
.text:10003F78
.text:10003F78						       sub_10003F78    proc near	       ; DATA XREF: .rdata:stru_100054A0o
.text:10003F78 8B 4D F0							       mov     ecx, [ebp-10h]
.text:10003F7B 83 C1 08							       add     ecx, 8	       ; this
.text:10003F7E E9 09 FA	FF FF						       jmp     ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10003F7E						       sub_10003F78    endp
.text:10003F7E
.text:10003F83
.text:10003F83						       ; =============== S U B R O U T I N E =======================================
.text:10003F83
.text:10003F83
.text:10003F83						       sub_10003F83    proc near	       ; DATA XREF: .rdata:stru_100054A0o
.text:10003F83 8B 4D F0							       mov     ecx, [ebp-10h]
.text:10003F86 83 C1 10							       add     ecx, 10h	       ; this
.text:10003F89 E9 FE F9	FF FF						       jmp     ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10003F89						       sub_10003F83    endp
.text:10003F89
.text:10003F8E
.text:10003F8E						       ; =============== S U B R O U T I N E =======================================
.text:10003F8E
.text:10003F8E
.text:10003F8E						       SEH_10001EB0    proc near	       ; DATA XREF: sub_10001EB0+2o
.text:10003F8E B8 A0 54	00 10						       mov     eax, offset stru_100054A0
.text:10003F93 E9 48 FB	FF FF						       jmp     __CxxFrameHandler
.text:10003F93						       SEH_10001EB0    endp
.text:10003F93
.text:10003F93						       ; ---------------------------------------------------------------------------
.text:10003F98 CC CC CC	CC CC CC CC CC					       align 10h
.text:10003FA0
.text:10003FA0						       ; =============== S U B R O U T I N E =======================================
.text:10003FA0
.text:10003FA0
.text:10003FA0						       SEH_10001F20    proc near	       ; DATA XREF: sub_10001F20+5o
.text:10003FA0 B8 D8 54	00 10						       mov     eax, offset stru_100054D8
.text:10003FA5 E9 36 FB	FF FF						       jmp     __CxxFrameHandler
.text:10003FA5						       SEH_10001F20    endp
.text:10003FA5
.text:10003FA5						       ; ---------------------------------------------------------------------------
.text:10003FAA CC CC CC	CC CC CC					       align 10h
.text:10003FB0
.text:10003FB0						       ; =============== S U B R O U T I N E =======================================
.text:10003FB0
.text:10003FB0
.text:10003FB0						       sub_10003FB0    proc near	       ; DATA XREF: .rdata:stru_10005530o
.text:10003FB0 8B 4D F0							       mov     ecx, [ebp-10h]
.text:10003FB3 E9 D8 D0	FF FF						       jmp     loc_10001090
.text:10003FB3						       sub_10003FB0    endp
.text:10003FB3
.text:10003FB8
.text:10003FB8						       ; =============== S U B R O U T I N E =======================================
.text:10003FB8
.text:10003FB8
.text:10003FB8						       sub_10003FB8    proc near	       ; DATA XREF: .rdata:stru_10005530o
.text:10003FB8 8B 4D F0							       mov     ecx, [ebp-10h]
.text:10003FBB 83 C1 08							       add     ecx, 8	       ; this
.text:10003FBE E9 E7 F9	FF FF						       jmp     ??1CObList@@UAE@XZ ; CObList::~CObList(void)
.text:10003FBE						       sub_10003FB8    endp
.text:10003FBE
.text:10003FC3
.text:10003FC3						       ; =============== S U B R O U T I N E =======================================
.text:10003FC3
.text:10003FC3
.text:10003FC3						       sub_10003FC3    proc near	       ; DATA XREF: .rdata:stru_10005530o
.text:10003FC3 68 8C 39	00 10						       push    offset ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10003FC8 6A 03							       push    3
.text:10003FCA 6A 04							       push    4
.text:10003FCC 8B 45 F0							       mov     eax, [ebp-10h]
.text:10003FCF 83 C0 40							       add     eax, 40h
.text:10003FD2 50							       push    eax
.text:10003FD3 E8 18 FB	FF FF						       call    sub_10003AF0
.text:10003FD8 C3							       retn
.text:10003FD8						       sub_10003FC3    endp
.text:10003FD8
.text:10003FD9
.text:10003FD9						       ; =============== S U B R O U T I N E =======================================
.text:10003FD9
.text:10003FD9
.text:10003FD9						       SEH_10001F90    proc near	       ; DATA XREF: sub_10001F90+2o
.text:10003FD9 B8 30 55	00 10						       mov     eax, offset stru_10005530
.text:10003FDE E9 FD FA	FF FF						       jmp     __CxxFrameHandler
.text:10003FDE						       SEH_10001F90    endp
.text:10003FDE
.text:10003FDE						       ; ---------------------------------------------------------------------------
.text:10003FE3 CC CC CC	CC CC CC CC CC CC CC CC	CC CC			       align 10h
.text:10003FF0
.text:10003FF0						       ; =============== S U B R O U T I N E =======================================
.text:10003FF0
.text:10003FF0
.text:10003FF0						       sub_10003FF0    proc near	       ; DATA XREF: .rdata:stru_10005568o
.text:10003FF0 8B 4D F0							       mov     ecx, [ebp-10h]
.text:10003FF3 E9 98 D0	FF FF						       jmp     loc_10001090
.text:10003FF3						       sub_10003FF0    endp
.text:10003FF3
.text:10003FF8
.text:10003FF8						       ; =============== S U B R O U T I N E =======================================
.text:10003FF8
.text:10003FF8
.text:10003FF8						       sub_10003FF8    proc near	       ; DATA XREF: .rdata:stru_10005568o
.text:10003FF8 8B 4D F0							       mov     ecx, [ebp-10h]
.text:10003FFB 83 C1 08							       add     ecx, 8	       ; this
.text:10003FFE E9 A7 F9	FF FF						       jmp     ??1CObList@@UAE@XZ ; CObList::~CObList(void)
.text:10003FFE						       sub_10003FF8    endp
.text:10003FFE
.text:10004003
.text:10004003						       ; =============== S U B R O U T I N E =======================================
.text:10004003
.text:10004003
.text:10004003						       sub_10004003    proc near	       ; DATA XREF: .rdata:stru_10005568o
.text:10004003 68 8C 39	00 10						       push    offset ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10004008 6A 03							       push    3
.text:1000400A 6A 04							       push    4
.text:1000400C 8B 45 F0							       mov     eax, [ebp-10h]
.text:1000400F 83 C0 40							       add     eax, 40h
.text:10004012 50							       push    eax
.text:10004013 E8 D8 FA	FF FF						       call    sub_10003AF0
.text:10004018 C3							       retn
.text:10004018						       sub_10004003    endp
.text:10004018
.text:10004019
.text:10004019						       ; =============== S U B R O U T I N E =======================================
.text:10004019
.text:10004019
.text:10004019						       SEH_10002050    proc near	       ; DATA XREF: sub_10002050+2o
.text:10004019 B8 68 55	00 10						       mov     eax, offset stru_10005568
.text:1000401E E9 BD FA	FF FF						       jmp     __CxxFrameHandler
.text:1000401E						       SEH_10002050    endp
.text:1000401E
.text:1000401E						       ; ---------------------------------------------------------------------------
.text:10004023 CC CC CC	CC CC CC CC CC CC CC CC	CC CC			       align 10h
.text:10004030
.text:10004030						       ; =============== S U B R O U T I N E =======================================
.text:10004030
.text:10004030
.text:10004030						       sub_10004030    proc near	       ; DATA XREF: .rdata:stru_100055A0o
.text:10004030 8B 45 F0							       mov     eax, [ebp-10h]
.text:10004033 50							       push    eax	       ; void *
.text:10004034 E8 27 D9	FF FF						       call    sub_10001960
.text:10004039 C3							       retn
.text:10004039						       sub_10004030    endp
.text:10004039
.text:1000403A
.text:1000403A						       ; =============== S U B R O U T I N E =======================================
.text:1000403A
.text:1000403A
.text:1000403A						       SEH_100020C0    proc near	       ; DATA XREF: sub_100020C0+2o
.text:1000403A B8 A0 55	00 10						       mov     eax, offset stru_100055A0
.text:1000403F E9 9C FA	FF FF						       jmp     __CxxFrameHandler
.text:1000403F						       SEH_100020C0    endp
.text:1000403F
.text:1000403F						       ; ---------------------------------------------------------------------------
.text:10004044 CC CC CC	CC CC CC CC CC CC CC CC	CC			       align 10h
.text:10004050
.text:10004050						       ; =============== S U B R O U T I N E =======================================
.text:10004050
.text:10004050
.text:10004050						       sub_10004050    proc near	       ; DATA XREF: .rdata:stru_100055C8o
.text:10004050 8D 4D 08							       lea     ecx, [ebp+8]    ; this
.text:10004053 E9 34 F9	FF FF						       jmp     ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10004053						       sub_10004050    endp
.text:10004053
.text:10004058
.text:10004058						       ; =============== S U B R O U T I N E =======================================
.text:10004058
.text:10004058
.text:10004058						       sub_10004058    proc near	       ; DATA XREF: .rdata:stru_100055C8o
.text:10004058 68 8C 39	00 10						       push    offset ??1CString@@QAE@XZ ; CString::~CString(void)
.text:1000405D 6A 03							       push    3
.text:1000405F 6A 04							       push    4
.text:10004061 8D 45 E8							       lea     eax, [ebp-18h]
.text:10004064 50							       push    eax
.text:10004065 E8 86 FA	FF FF						       call    sub_10003AF0
.text:1000406A C3							       retn
.text:1000406A						       sub_10004058    endp
.text:1000406A
.text:1000406B
.text:1000406B						       ; =============== S U B R O U T I N E =======================================
.text:1000406B
.text:1000406B
.text:1000406B						       sub_1000406B    proc near	       ; DATA XREF: .rdata:stru_100055C8o
.text:1000406B 8D 4D AC							       lea     ecx, [ebp-54h]  ; this
.text:1000406E E9 19 F9	FF FF						       jmp     ??1CString@@QAE@XZ ; CString::~CString(void)
.text:1000406E						       sub_1000406B    endp
.text:1000406E
.text:10004073
.text:10004073						       ; =============== S U B R O U T I N E =======================================
.text:10004073
.text:10004073
.text:10004073						       sub_10004073    proc near	       ; DATA XREF: .rdata:stru_100055C8o
.text:10004073 8D 4D B4							       lea     ecx, [ebp-4Ch]  ; this
.text:10004076 E9 11 F9	FF FF						       jmp     ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10004076						       sub_10004073    endp
.text:10004076
.text:1000407B
.text:1000407B						       ; =============== S U B R O U T I N E =======================================
.text:1000407B
.text:1000407B
.text:1000407B						       sub_1000407B    proc near	       ; DATA XREF: .rdata:stru_100055C8o
.text:1000407B 8D 4D B8							       lea     ecx, [ebp-48h]  ; this
.text:1000407E E9 09 F9	FF FF						       jmp     ??1CString@@QAE@XZ ; CString::~CString(void)
.text:1000407E						       sub_1000407B    endp
.text:1000407E
.text:10004083
.text:10004083						       ; =============== S U B R O U T I N E =======================================
.text:10004083
.text:10004083
.text:10004083						       sub_10004083    proc near	       ; DATA XREF: .rdata:stru_100055C8o
.text:10004083 8B 4D D0							       mov     ecx, [ebp-30h]  ; this
.text:10004086 E9 01 F9	FF FF						       jmp     ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10004086						       sub_10004083    endp
.text:10004086
.text:1000408B
.text:1000408B						       ; =============== S U B R O U T I N E =======================================
.text:1000408B
.text:1000408B
.text:1000408B						       sub_1000408B    proc near	       ; DATA XREF: .rdata:stru_100055C8o
.text:1000408B 8B 4D D4							       mov     ecx, [ebp-2Ch]  ; this
.text:1000408E E9 F9 F8	FF FF						       jmp     ??1CString@@QAE@XZ ; CString::~CString(void)
.text:1000408E						       sub_1000408B    endp
.text:1000408E
.text:10004093
.text:10004093						       ; =============== S U B R O U T I N E =======================================
.text:10004093
.text:10004093
.text:10004093						       sub_10004093    proc near	       ; DATA XREF: .rdata:stru_100055C8o
.text:10004093 8B 4D D8							       mov     ecx, [ebp-28h]  ; this
.text:10004096 E9 F1 F8	FF FF						       jmp     ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10004096						       sub_10004093    endp
.text:10004096
.text:1000409B
.text:1000409B						       ; =============== S U B R O U T I N E =======================================
.text:1000409B
.text:1000409B
.text:1000409B						       sub_1000409B    proc near	       ; DATA XREF: .rdata:stru_100055C8o
.text:1000409B 8B 4D D8							       mov     ecx, [ebp-28h]  ; this
.text:1000409E E9 E9 F8	FF FF						       jmp     ??1CString@@QAE@XZ ; CString::~CString(void)
.text:1000409E						       sub_1000409B    endp
.text:1000409E
.text:100040A3
.text:100040A3						       ; =============== S U B R O U T I N E =======================================
.text:100040A3
.text:100040A3
.text:100040A3						       sub_100040A3    proc near	       ; DATA XREF: .rdata:stru_100055C8o
.text:100040A3 8B 4D D4							       mov     ecx, [ebp-2Ch]  ; this
.text:100040A6 E9 E1 F8	FF FF						       jmp     ??1CString@@QAE@XZ ; CString::~CString(void)
.text:100040A6						       sub_100040A3    endp
.text:100040A6
.text:100040AB
.text:100040AB						       ; =============== S U B R O U T I N E =======================================
.text:100040AB
.text:100040AB
.text:100040AB						       sub_100040AB    proc near	       ; DATA XREF: .rdata:stru_100055C8o
.text:100040AB 8B 4D D0							       mov     ecx, [ebp-30h]  ; this
.text:100040AE E9 D9 F8	FF FF						       jmp     ??1CString@@QAE@XZ ; CString::~CString(void)
.text:100040AE						       sub_100040AB    endp
.text:100040AE
.text:100040B3
.text:100040B3						       ; =============== S U B R O U T I N E =======================================
.text:100040B3
.text:100040B3
.text:100040B3						       sub_100040B3    proc near	       ; DATA XREF: .rdata:stru_100055C8o
.text:100040B3 8B 4D D8							       mov     ecx, [ebp-28h]  ; this
.text:100040B6 E9 D1 F8	FF FF						       jmp     ??1CString@@QAE@XZ ; CString::~CString(void)
.text:100040B6						       sub_100040B3    endp
.text:100040B6
.text:100040BB
.text:100040BB						       ; =============== S U B R O U T I N E =======================================
.text:100040BB
.text:100040BB
.text:100040BB						       sub_100040BB    proc near	       ; DATA XREF: .rdata:stru_100055C8o
.text:100040BB 8B 4D D4							       mov     ecx, [ebp-2Ch]  ; this
.text:100040BE E9 C9 F8	FF FF						       jmp     ??1CString@@QAE@XZ ; CString::~CString(void)
.text:100040BE						       sub_100040BB    endp
.text:100040BE
.text:100040C3
.text:100040C3						       ; =============== S U B R O U T I N E =======================================
.text:100040C3
.text:100040C3
.text:100040C3						       sub_100040C3    proc near	       ; DATA XREF: .rdata:stru_100055C8o
.text:100040C3 8B 4D D0							       mov     ecx, [ebp-30h]  ; this
.text:100040C6 E9 C1 F8	FF FF						       jmp     ??1CString@@QAE@XZ ; CString::~CString(void)
.text:100040C6						       sub_100040C3    endp
.text:100040C6
.text:100040CB
.text:100040CB						       ; =============== S U B R O U T I N E =======================================
.text:100040CB
.text:100040CB
.text:100040CB						       sub_100040CB    proc near	       ; DATA XREF: .rdata:stru_100055C8o
.text:100040CB 8D 4D 04							       lea     ecx, [ebp+4]    ; this
.text:100040CE E9 B9 F8	FF FF						       jmp     ??1CString@@QAE@XZ ; CString::~CString(void)
.text:100040CE						       sub_100040CB    endp
.text:100040CE
.text:100040D3
.text:100040D3						       ; =============== S U B R O U T I N E =======================================
.text:100040D3
.text:100040D3
.text:100040D3						       sub_100040D3    proc near	       ; DATA XREF: .rdata:stru_100055C8o
.text:100040D3 8D 4D 04							       lea     ecx, [ebp+4]    ; this
.text:100040D6 E9 B1 F8	FF FF						       jmp     ??1CString@@QAE@XZ ; CString::~CString(void)
.text:100040D6						       sub_100040D3    endp
.text:100040D6
.text:100040DB
.text:100040DB						       ; =============== S U B R O U T I N E =======================================
.text:100040DB
.text:100040DB
.text:100040DB						       sub_100040DB    proc near	       ; DATA XREF: .rdata:stru_100055C8o
.text:100040DB 8D 4D 04							       lea     ecx, [ebp+4]    ; this
.text:100040DE E9 A9 F8	FF FF						       jmp     ??1CString@@QAE@XZ ; CString::~CString(void)
.text:100040DE						       sub_100040DB    endp
.text:100040DE
.text:100040E3
.text:100040E3						       ; =============== S U B R O U T I N E =======================================
.text:100040E3
.text:100040E3
.text:100040E3						       sub_100040E3    proc near	       ; DATA XREF: .rdata:stru_100055C8o
.text:100040E3 8D 4D 04							       lea     ecx, [ebp+4]    ; this
.text:100040E6 E9 A1 F8	FF FF						       jmp     ??1CString@@QAE@XZ ; CString::~CString(void)
.text:100040E6						       sub_100040E3    endp
.text:100040E6
.text:100040EB
.text:100040EB						       ; =============== S U B R O U T I N E =======================================
.text:100040EB
.text:100040EB
.text:100040EB						       SEH_100022C0    proc near	       ; DATA XREF: sub_100022C0+2o
.text:100040EB B8 C8 55	00 10						       mov     eax, offset stru_100055C8
.text:100040F0 E9 EB F9	FF FF						       jmp     __CxxFrameHandler
.text:100040F0						       SEH_100022C0    endp
.text:100040F0
.text:100040F0						       ; ---------------------------------------------------------------------------
.text:100040F5 CC CC CC	CC CC CC CC CC CC CC CC				       align 10h
.text:10004100
.text:10004100						       ; =============== S U B R O U T I N E =======================================
.text:10004100
.text:10004100
.text:10004100						       sub_10004100    proc near	       ; DATA XREF: .rdata:stru_10005678o
.text:10004100 8B 85 E8	FE FF FF					       mov     eax, [ebp-118h]
.text:10004106 50							       push    eax	       ; void *
.text:10004107 E8 54 D8	FF FF						       call    sub_10001960
.text:1000410C C3							       retn
.text:1000410C						       sub_10004100    endp
.text:1000410C
.text:1000410D
.text:1000410D						       ; =============== S U B R O U T I N E =======================================
.text:1000410D
.text:1000410D
.text:1000410D						       sub_1000410D    proc near	       ; DATA XREF: .rdata:stru_10005678o
.text:1000410D 8D 8D EC	FE FF FF					       lea     ecx, [ebp-114h] ; this
.text:10004113 E9 74 F8	FF FF						       jmp     ??1CString@@QAE@XZ ; CString::~CString(void)
.text:10004113						       sub_1000410D    endp
.text:10004113
.text:10004118
.text:10004118						       ; =============== S U B R O U T I N E =======================================
.text:10004118
.text:10004118
.text:10004118						       sub_10004118    proc near	       ; DATA XREF: .rdata:stru_10005678o
.text:10004118 8B 85 F0	FE FF FF					       mov     eax, [ebp-110h]
.text:1000411E 50							       push    eax	       ; void *
.text:1000411F E8 6E F8	FF FF						       call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:10004124 59							       pop     ecx
.text:10004125 C3							       retn
.text:10004125						       sub_10004118    endp
.text:10004125
.text:10004126
.text:10004126						       ; =============== S U B R O U T I N E =======================================
.text:10004126
.text:10004126
.text:10004126						       sub_10004126    proc near	       ; DATA XREF: .rdata:stru_10005678o
.text:10004126 8B 85 F0	FE FF FF					       mov     eax, [ebp-110h]
.text:1000412C 50							       push    eax	       ; void *
.text:1000412D E8 2E D8	FF FF						       call    sub_10001960
.text:10004132 C3							       retn
.text:10004132						       sub_10004126    endp
.text:10004132
.text:10004133
.text:10004133						       ; =============== S U B R O U T I N E =======================================
.text:10004133
.text:10004133
.text:10004133						       ?GSCREnumDevices@@YAPAXXZ_SEH proc near ; DATA XREF: GSCREnumDevices(void)+2o
.text:10004133 B8 78 56	00 10						       mov     eax, offset stru_10005678
.text:10004138 E9 A3 F9	FF FF						       jmp     __CxxFrameHandler
.text:10004138						       ?GSCREnumDevices@@YAPAXXZ_SEH endp
.text:10004138
.text:10004138						       ; ---------------------------------------------------------------------------
.text:1000413D CC CC CC							       align 10h
.text:10004140
.text:10004140						       ; =============== S U B R O U T I N E =======================================
.text:10004140
.text:10004140
.text:10004140						       sub_10004140    proc near	       ; DATA XREF: .rdata:stru_100056B8o
.text:10004140 8B 45 F0							       mov     eax, [ebp-10h]
.text:10004143 50							       push    eax	       ; void *
.text:10004144 E8 17 D8	FF FF						       call    sub_10001960
.text:10004149 C3							       retn
.text:10004149						       sub_10004140    endp
.text:10004149
.text:1000414A
.text:1000414A						       ; =============== S U B R O U T I N E =======================================
.text:1000414A
.text:1000414A
.text:1000414A						       ?GSCRSetLogFilename@@YAJPAXPBDH@Z_SEH proc near
.text:1000414A											       ; DATA XREF: GSCRSetLogFilename(void *,char const *,int)+2o
.text:1000414A B8 B8 56	00 10						       mov     eax, offset stru_100056B8
.text:1000414F E9 8C F9	FF FF						       jmp     __CxxFrameHandler
.text:1000414F						       ?GSCRSetLogFilename@@YAJPAXPBDH@Z_SEH endp
.text:1000414F
.text:1000414F						       ; ---------------------------------------------------------------------------
.text:10004154 CC CC CC	CC CC CC CC CC CC CC CC	CC			       align 10h
.text:10004160
.text:10004160						       ; =============== S U B R O U T I N E =======================================
.text:10004160
.text:10004160
.text:10004160						       sub_10004160    proc near	       ; DATA XREF: .rdata:stru_100056E0o
.text:10004160 8B 45 B4							       mov     eax, [ebp-4Ch]
.text:10004163 50							       push    eax	       ; void *
.text:10004164 E8 29 F8	FF FF						       call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:10004169 59							       pop     ecx
.text:1000416A C3							       retn
.text:1000416A						       sub_10004160    endp
.text:1000416A
.text:1000416B
.text:1000416B						       ; =============== S U B R O U T I N E =======================================
.text:1000416B
.text:1000416B
.text:1000416B						       sub_1000416B    proc near	       ; DATA XREF: .rdata:stru_100056E0o
.text:1000416B 8D 4D 04							       lea     ecx, [ebp+4]    ; this
.text:1000416E E9 19 F8	FF FF						       jmp     ??1CString@@QAE@XZ ; CString::~CString(void)
.text:1000416E						       sub_1000416B    endp
.text:1000416E
.text:10004173
.text:10004173						       ; =============== S U B R O U T I N E =======================================
.text:10004173
.text:10004173
.text:10004173						       SEH_10003030    proc near	       ; DATA XREF: sub_10003030+2o
.text:10004173 B8 E0 56	00 10						       mov     eax, offset stru_100056E0
.text:10004178 E9 63 F9	FF FF						       jmp     __CxxFrameHandler
.text:10004178						       SEH_10003030    endp
.text:10004178
.text:10004178						       ; ---------------------------------------------------------------------------
.text:1000417D 00 00 00							       align 10h
.text:10004180 00 00 00	00 00 00 00 00 00 00 00	00 00 00 00 00+		       dd 341h dup(0)
.text:10004E84 00							       db 0
.text:10004E85 00 00 00					       byte_10004E85   db 3 dup(0)	       ; CODE XREF: .rsrc:1000776Fp
.text:10004E88 00 00 00	00 00 00 00 00 00 00 00	00 00 00 00 00+		       align 200h
.text:10004E88 00 00 00	00 00 00 00 00 00 00 00	00 00 00 00 00+_text	       ends
.text:10004E88 00 00 00	00 00 00 00 00 00 00 00	00 00 00 00 00+
.idata:10005000							; Section 2. (virtual address 00005000)
.idata:10005000							; Virtual size			: 00000FF5 (   4085.)
.idata:10005000							; Section size in file		: 00001000 (   4096.)
.idata:10005000							; Offset to raw	data for section: 00005000
.idata:10005000							; Flags	40000040: Data Readable
.idata:10005000							; Alignment	: default
.idata:10005000							;
.idata:10005000							; Imports from CmLibs2.dll
.idata:10005000							;
.idata:10005000							; ===========================================================================
.idata:10005000
.idata:10005000							; Segment type:	Externs
.idata:10005000							; _idata
.idata:10005000							; const	CSortableObList::`vftable'
.idata:10005000	?? ?? ?? ??							extrn ??_7CSortableObList@@6B@:dword
.idata:10005000												; DATA XREF: HEADER:10000130o
.idata:10005000												; HEADER:100001D8o ...
.idata:10005004							; class	CString	__cdecl	CMGetProfileString(char	const *, char const *, char const *)
.idata:10005004	?? ?? ?? ??							extrn ?CMGetProfileString@@YA?AVCString@@PBD00@Z:dword
.idata:10005004												; CODE XREF: GSCRSearchGPSInfo(void)+36p
.idata:10005004												; DATA XREF: GSCRSearchGPSInfo(void)+36r
.idata:10005008							; class	CString	__cdecl	CMTLGetExeDir(void)
.idata:10005008	?? ?? ?? ??							extrn ?CMTLGetExeDir@@YA?AVCString@@XZ:dword
.idata:10005008												; CODE XREF: GSCRAddLocationNameFromZipcode(CListInfo *)+22p
.idata:10005008												; DATA XREF: GSCRAddLocationNameFromZipcode(CListInfo *)+22r
.idata:1000500C							; public: virtual __thiscall CSortableObList::~CSortableObList(void)
.idata:1000500C	?? ?? ?? ??							extrn ??1CSortableObList@@UAE@XZ:dword
.idata:1000500C												; DATA XREF: sub_10003E43+6r
.idata:1000500C												; sub_10003E73+6r
.idata:10005010
.idata:10005014							;
.idata:10005014							; Imports from CmZipAdrs.dll
.idata:10005014							;
.idata:10005014	?? ?? ?? ??							extrn CmExitZip2Address:dword
.idata:10005014												; CODE XREF: GSCRAddLocationNameFromZipcode(CListInfo *)+1BBp
.idata:10005014												; DATA XREF: GSCRAddLocationNameFromZipcode(CListInfo *)+1BBr ...
.idata:10005018	?? ?? ?? ??							extrn CmConvZip2Address:dword
.idata:10005018												; CODE XREF: GSCRAddLocationNameFromZipcode(CListInfo *)+174p
.idata:10005018												; DATA XREF: GSCRAddLocationNameFromZipcode(CListInfo *)+174r
.idata:1000501C	?? ?? ?? ??							extrn CmInitZip2Address:dword
.idata:1000501C												; CODE XREF: GSCRAddLocationNameFromZipcode(CListInfo *)+49p
.idata:1000501C												; DATA XREF: GSCRAddLocationNameFromZipcode(CListInfo *)+49r
.idata:10005020
.idata:10005024							;
.idata:10005024							; Imports from KERNEL32.dll
.idata:10005024							;
.idata:10005024							; BOOL __stdcall SetCommMask(HANDLE hFile, DWORD dwEvtMask)
.idata:10005024	?? ?? ?? ??							extrn SetCommMask:dword	; CODE XREF: sub_100033A0+176p
.idata:10005024												; sub_100033A0+185p
.idata:10005024												; DATA XREF: ...
.idata:10005028							; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD	dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes,	DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE	hTemplateFile)
.idata:10005028	?? ?? ?? ??							extrn CreateFileA:dword	; CODE XREF: sub_100033A0+144p
.idata:10005028												; DATA XREF: sub_100033A0+144r
.idata:1000502C							; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.idata:1000502C	?? ?? ?? ??							extrn GetProcAddress:dword
.idata:1000502C												; CODE XREF: sub_10003690+Ep
.idata:1000502C												; DATA XREF: sub_10003690+Er
.idata:10005030							; HMODULE __stdcall LoadLibraryA(LPCSTR	lpLibFileName)
.idata:10005030	?? ?? ?? ??							extrn LoadLibraryA:dword
.idata:10005030												; CODE XREF: .text:100038ADp
.idata:10005030												; DATA XREF: .text:100038ADr
.idata:10005034							; LPVOID __stdcall VirtualAlloc(LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect)
.idata:10005034	?? ?? ?? ??							extrn VirtualAlloc:dword
.idata:10005034												; CODE XREF: sub_100033A0+19Dp
.idata:10005034												; DllEntryPoint+27p
.idata:10005034												; DATA XREF: ...
.idata:10005038							; BOOL __stdcall GetOverlappedResult(HANDLE hFile, LPOVERLAPPED	lpOverlapped, LPDWORD lpNumberOfBytesTransferred, BOOL bWait)
.idata:10005038	?? ?? ?? ??							extrn GetOverlappedResult:dword
.idata:10005038												; CODE XREF: .text:100037D6p
.idata:10005038												; .text:1000384Dp ...
.idata:1000503C							; BOOL __stdcall ReadFile(HANDLE hFile,	LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped)
.idata:1000503C	?? ?? ?? ??							extrn ReadFile:dword	; CODE XREF: .text:100037AFp
.idata:1000503C												; DATA XREF: .text:100037AFr
.idata:10005040							; DWORD	__stdcall WaitForMultipleObjects(DWORD nCount, const HANDLE *lpHandles,	BOOL bWaitAll, DWORD dwMilliseconds)
.idata:10005040	?? ?? ?? ??							extrn WaitForMultipleObjects:dword
.idata:10005040												; CODE XREF: .text:10003762p
.idata:10005040												; DATA XREF: .text:10003762r
.idata:10005044							; BOOL __stdcall ResetEvent(HANDLE hEvent)
.idata:10005044	?? ?? ?? ??							extrn ResetEvent:dword	; CODE XREF: .text:100037E4p
.idata:10005044												; .text:1000385Fp ...
.idata:10005048							; DWORD	__stdcall GetLastError()
.idata:10005048	?? ?? ?? ??							extrn GetLastError:dword
.idata:10005048												; CODE XREF: .text:1000373Ap
.idata:10005048												; .text:loc_100037B9p ...
.idata:1000504C							; LPSTR	__stdcall lstrcpyA(LPSTR lpString1, LPCSTR lpString2)
.idata:1000504C	?? ?? ?? ??							extrn lstrcpyA:dword	; CODE XREF: sub_100015A0+1Dp
.idata:1000504C												; GSCREnumDevices(void)+102p ...
.idata:10005050							; int __stdcall	lstrlenA(LPCSTR	lpString)
.idata:10005050	?? ?? ?? ??							extrn lstrlenA:dword	; CODE XREF: sub_100015A0+9p
.idata:10005050												; GSCREnumDevices(void)+115p ...
.idata:10005054							; BOOL __stdcall SetEvent(HANDLE hEvent)
.idata:10005054	?? ?? ?? ??							extrn SetEvent:dword	; CODE XREF: sub_100022C0+2E8p
.idata:10005054												; sub_10002AE0+BEp ...
.idata:10005058							; LPSTR	__stdcall lstrcpynA(LPSTR lpString1, LPCSTR lpString2, int iMaxLength)
.idata:10005058	?? ?? ?? ??							extrn lstrcpynA:dword	; CODE XREF: sub_10002AE0+60p
.idata:10005058												; DATA XREF: sub_10002AE0+60r
.idata:1000505C							; DWORD	__stdcall WaitForSingleObject(HANDLE hHandle, DWORD dwMilliseconds)
.idata:1000505C	?? ?? ?? ??							extrn WaitForSingleObject:dword
.idata:1000505C												; CODE XREF: GSCREnumDevices(void)+139p
.idata:1000505C												; GSCRStopLogging(void *)+14p ...
.idata:10005060							; HANDLE __stdcall CreateEventA(LPSECURITY_ATTRIBUTES lpEventAttributes, BOOL bManualReset, BOOL bInitialState,	LPCSTR lpName)
.idata:10005060	?? ?? ?? ??							extrn CreateEventA:dword
.idata:10005060												; CODE XREF: GSCREnumDevices(void)+F0p
.idata:10005060												; sub_10003160+39p ...
.idata:10005064							; BOOL __stdcall CloseHandle(HANDLE hObject)
.idata:10005064	?? ?? ?? ??							extrn CloseHandle:dword	; CODE XREF: sub_10003160+95p
.idata:10005064												; sub_10003160+B9p ...
.idata:10005068							; BOOL __stdcall WriteFile(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite,	LPDWORD	lpNumberOfBytesWritten,	LPOVERLAPPED lpOverlapped)
.idata:10005068	?? ?? ?? ??							extrn WriteFile:dword	; CODE XREF: .text:10003834p
.idata:10005068												; DATA XREF: .text:10003834r
.idata:1000506C							; BOOL __stdcall SetCommState(HANDLE hFile, LPDCB lpDCB)
.idata:1000506C	?? ?? ?? ??							extrn SetCommState:dword
.idata:1000506C												; CODE XREF: sub_100033A0+1B5p
.idata:1000506C												; DATA XREF: sub_100033A0+1B5r
.idata:10005070
.idata:10005074							;
.idata:10005074							; Imports from MFC42.DLL
.idata:10005074							;
.idata:10005074							; __declspec(dllimport)	public:	class CString __thiscall CString::Left(int)const
.idata:10005074	?? ?? ?? ??							extrn __imp_?Left@CString@@QBE?AV1@H@Z:dword
.idata:10005074												; DATA XREF: CString::Left(int)r
.idata:10005074												; .rdata:10005720o
.idata:10005078							; __declspec(dllimport)	public:	class CString __thiscall CString::Mid(int, int)const
.idata:10005078	?? ?? ?? ??							extrn __imp_?Mid@CString@@QBE?AV1@HH@Z:dword
.idata:10005078												; DATA XREF: CString::Mid(int,int)r
.idata:1000507C							; __declspec(dllimport)	public:	int __thiscall CString::Find(char, int)const
.idata:1000507C	?? ?? ?? ??							extrn __imp_?Find@CString@@QBEHDH@Z:dword
.idata:1000507C												; DATA XREF: CString::Find(char,int)r
.idata:10005080							; __declspec(dllimport)	public:	class CString const & __thiscall CString::operator+=(char const	*)
.idata:10005080	?? ?? ?? ??							extrn __imp_??YCString@@QAEABV0@PBD@Z:dword
.idata:10005080												; DATA XREF: CString::operator+=(char const *)r
.idata:10005084							; __declspec(dllimport)	public:	int __thiscall CString::Find(char const	*)const
.idata:10005084	?? ?? ?? ??							extrn __imp_?Find@CString@@QBEHPBD@Z:dword
.idata:10005084												; DATA XREF: CString::Find(char	const *)r
.idata:10005088							; __declspec(dllimport)	public:	__thiscall CPtrList::CPtrList(int)
.idata:10005088	?? ?? ?? ??							extrn __imp_??0CPtrList@@QAE@H@Z:dword
.idata:10005088												; DATA XREF: CPtrList::CPtrList(int)r
.idata:1000508C							; __declspec(dllimport)	public:	struct __POSITION * __thiscall CPtrList::FindIndex(int)const
.idata:1000508C	?? ?? ?? ??							extrn __imp_?FindIndex@CPtrList@@QBEPAU__POSITION@@H@Z:dword
.idata:1000508C												; DATA XREF: CPtrList::FindIndex(int)r
.idata:10005090							; __declspec(dllimport)	class CWinThread * __stdcall AfxBeginThread(unsigned int (__cdecl *)(void *), void *, int, unsigned int, unsigned long,	struct _SECURITY_ATTRIBUTES *)
.idata:10005090	?? ?? ?? ??							extrn __imp_?AfxBeginThread@@YGPAVCWinThread@@P6AIPAX@Z0HIKPAU_SECURITY_ATTRIBUTES@@@Z:dword
.idata:10005090												; DATA XREF: AfxBeginThread(uint (*)(void *),void *,int,uint,ulong,_SECURITY_ATTRIBUTES	*)r
.idata:10005094							; __declspec(dllimport)	public:	class CString __thiscall CString::Right(int)const
.idata:10005094	?? ?? ?? ??							extrn __imp_?Right@CString@@QBE?AV1@H@Z:dword
.idata:10005094												; DATA XREF: CString::Right(int)r
.idata:10005098							; __declspec(dllimport)	public:	static class CTime __stdcall CTime::GetTickCount(void)
.idata:10005098	?? ?? ?? ??							extrn __imp_?GetTickCount@CTime@@SG?AV1@XZ:dword
.idata:10005098												; DATA XREF: CTime::GetTickCount(void)r
.idata:1000509C							; __declspec(dllimport)	public:	void __cdecl CString::Format(char const	*, ...)
.idata:1000509C	?? ?? ?? ??							extrn __imp_?Format@CString@@QAAXPBDZZ:dword
.idata:1000509C												; DATA XREF: CString::Format(char const	*,...)r
.idata:100050A0							; __declspec(dllimport)	public:	void __thiscall	CException::Delete(void)
.idata:100050A0	?? ?? ?? ??							extrn __imp_?Delete@CException@@QAEXXZ:dword
.idata:100050A0												; DATA XREF: CException::Delete(void)r
.idata:100050A4							; __declspec(dllimport)	public:	class CString const & __thiscall CString::operator=(class CString const	&)
.idata:100050A4	?? ?? ?? ??							extrn __imp_??4CString@@QAEABV0@ABV0@@Z:dword
.idata:100050A4												; DATA XREF: CString::operator=(CString	const &)r
.idata:100050A8							; __declspec(dllimport)	class CString __stdcall	operator+(class	CString	const &, char const *)
.idata:100050A8	?? ?? ?? ??							extrn __imp_??H@YG?AVCString@@ABV0@PBD@Z:dword
.idata:100050A8												; DATA XREF: operator+(CString const &,char const *)r
.idata:100050AC							; __declspec(dllimport)	public:	virtual	struct CRuntimeClass * __thiscall CObject::GetRuntimeClass(void)const
.idata:100050AC	?? ?? ?? ??							extrn __imp_?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ:dword
.idata:100050AC												; DATA XREF: CObject::GetRuntimeClass(void)r
.idata:100050B0							; __declspec(dllimport)	public:	class CString const & __thiscall CString::operator=(char const *)
.idata:100050B0	?? ?? ?? ??							extrn __imp_??4CString@@QAEABV0@PBD@Z:dword
.idata:100050B0												; DATA XREF: CString::operator=(char const *)r
.idata:100050B4							; __declspec(dllimport)	public:	__thiscall CTime::CTime(int, int, int, int, int, int, int)
.idata:100050B4	?? ?? ?? ??							extrn __imp_??0CTime@@QAE@HHHHHHH@Z:dword
.idata:100050B4												; DATA XREF: CTime::CTime(int,int,int,int,int,int,int)r
.idata:100050B8							; __declspec(dllimport)	public:	struct __POSITION * __thiscall CObList::AddTail(class CObject *)
.idata:100050B8	?? ?? ?? ??							extrn __imp_?AddTail@CObList@@QAEPAU__POSITION@@PAVCObject@@@Z:dword
.idata:100050B8												; DATA XREF: CObList::AddTail(CObject *)r
.idata:100050BC							; __declspec(dllimport)	public:	__thiscall CString::CString(class CString const	&)
.idata:100050BC	?? ?? ?? ??							extrn __imp_??0CString@@QAE@ABV0@@Z:dword
.idata:100050BC												; DATA XREF: CString::CString(CString const &)r
.idata:100050C0							; __declspec(dllimport)	public:	__thiscall CFile::CFile(void)
.idata:100050C0	?? ?? ?? ??							extrn __imp_??0CFile@@QAE@XZ:dword
.idata:100050C0												; DATA XREF: CFile::CFile(void)r
.idata:100050C4							; __declspec(dllimport)	public:	virtual	int __thiscall CFile::Open(char	const *, unsigned int, class CFileException *)
.idata:100050C4	?? ?? ?? ??							extrn __imp_?Open@CFile@@UAEHPBDIPAVCFileException@@@Z:dword
.idata:100050C4												; DATA XREF: CFile::Open(char const *,uint,CFileException *)r
.idata:100050C8							; __declspec(dllimport)	public:	__thiscall CString::CString(char const *)
.idata:100050C8	?? ?? ?? ??							extrn __imp_??0CString@@QAE@PBD@Z:dword
.idata:100050C8												; DATA XREF: CString::CString(char const *)r
.idata:100050CC							; __declspec(dllimport)	public:	virtual	void __thiscall	CFile::Close(void)
.idata:100050CC	?? ?? ?? ??							extrn __imp_?Close@CFile@@UAEXXZ:dword
.idata:100050CC												; DATA XREF: CFile::Close(void)r
.idata:100050D0							; __declspec(dllimport)	public:	virtual	__thiscall CFile::~CFile(void)
.idata:100050D0	?? ?? ?? ??							extrn __imp_??1CFile@@UAE@XZ:dword
.idata:100050D0												; DATA XREF: CFile::~CFile(void)r
.idata:100050D4							; __declspec(dllimport)	int __stdcall AfxInitExtensionModule(struct AFX_EXTENSION_MODULE &, struct HINSTANCE__ *)
.idata:100050D4	?? ?? ?? ??							extrn __imp_?AfxInitExtensionModule@@YGHAAUAFX_EXTENSION_MODULE@@PAUHINSTANCE__@@@Z:dword
.idata:100050D4												; DATA XREF: AfxInitExtensionModule(AFX_EXTENSION_MODULE &,HINSTANCE__ *)r
.idata:100050D8							; __declspec(dllimport)	void * __cdecl operator	new(unsigned int)
.idata:100050D8	?? ?? ?? ??							extrn __imp_??2@YAPAXI@Z:dword
.idata:100050D8												; DATA XREF: operator new(uint)r
.idata:100050DC							; __declspec(dllimport)	public:	__thiscall CDynLinkLibrary::CDynLinkLibrary(struct AFX_EXTENSION_MODULE	&, int)
.idata:100050DC	?? ?? ?? ??							extrn __imp_??0CDynLinkLibrary@@QAE@AAUAFX_EXTENSION_MODULE@@H@Z:dword
.idata:100050DC												; DATA XREF: CDynLinkLibrary::CDynLinkLibrary(AFX_EXTENSION_MODULE &,int)r
.idata:100050E0							; __declspec(dllimport)	void __stdcall AfxTermExtensionModule(struct AFX_EXTENSION_MODULE &, int)
.idata:100050E0	?? ?? ?? ??							extrn __imp_?AfxTermExtensionModule@@YGXAAUAFX_EXTENSION_MODULE@@H@Z:dword
.idata:100050E0												; DATA XREF: AfxTermExtensionModule(AFX_EXTENSION_MODULE &,int)r
.idata:100050E4							; __declspec(dllimport)	class AFX_MODULE_STATE * __stdcall AfxGetModuleState(void)
.idata:100050E4	?? ?? ?? ??							extrn __imp_?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ:dword
.idata:100050E4												; DATA XREF: AfxGetModuleState(void)r
.idata:100050E8							; __declspec(dllimport)	public:	virtual	__thiscall CObList::~CObList(void)
.idata:100050E8	?? ?? ?? ??							extrn __imp_??1CObList@@UAE@XZ:dword
.idata:100050E8												; DATA XREF: CObList::~CObList(void)r
.idata:100050EC							; __declspec(dllimport)	public:	__thiscall CImageList::CImageList(void)
.idata:100050EC	?? ?? ?? ??							extrn __imp_??0CImageList@@QAE@XZ:dword
.idata:100050EC												; DATA XREF: CImageList::CImageList(void)r
.idata:100050F0							; __declspec(dllimport)	public:	__thiscall CObList::CObList(int)
.idata:100050F0	?? ?? ?? ??							extrn __imp_??0CObList@@QAE@H@Z:dword
.idata:100050F0												; DATA XREF: CObList::CObList(int)r
.idata:100050F4							; __declspec(dllimport)	public:	virtual	__thiscall CImageList::~CImageList(void)
.idata:100050F4	?? ?? ?? ??							extrn __imp_??1CImageList@@UAE@XZ:dword
.idata:100050F4												; DATA XREF: CImageList::~CImageList(void)r
.idata:100050F8							; __declspec(dllimport)	void __cdecl operator delete(void *)
.idata:100050F8	?? ?? ?? ??							extrn __imp_??3@YAXPAX@Z:dword
.idata:100050F8												; DATA XREF: operator delete(void *)r
.idata:100050FC							; __declspec(dllimport)	public:	__thiscall CString::~CString(void)
.idata:100050FC	?? ?? ?? ??							extrn __imp_??1CString@@QAE@XZ:dword
.idata:100050FC												; DATA XREF: CString::~CString(void)r
.idata:10005100							; __declspec(dllimport)	public:	__thiscall CString::CString(void)
.idata:10005100	?? ?? ?? ??							extrn __imp_??0CString@@QAE@XZ:dword
.idata:10005100												; DATA XREF: CString::CString(void)r
.idata:10005104							; __declspec(dllimport)	public:	struct __POSITION * __thiscall CPtrList::AddTail(void *)
.idata:10005104	?? ?? ?? ??							extrn __imp_?AddTail@CPtrList@@QAEPAU__POSITION@@PAX@Z:dword
.idata:10005104												; DATA XREF: CPtrList::AddTail(void *)r
.idata:10005108
.idata:1000510C							;
.idata:1000510C							; Imports from MSVCRT.dll
.idata:1000510C							;
.idata:1000510C	?? ?? ?? ??							extrn _adjust_fdiv:dword
.idata:1000510C												; DATA XREF: sub_10003C44:loc_10003C5Ar
.idata:1000510C												; .rdata:10005734o
.idata:10005110							; void *__cdecl	malloc(size_t Size)
.idata:10005110	?? ?? ?? ??							extrn malloc:dword	; CODE XREF: sub_10003C44+2Ep
.idata:10005110												; DATA XREF: sub_10003C44+2Er
.idata:10005114	?? ?? ?? ??							extrn __imp__initterm:dword
.idata:10005114												; DATA XREF: _inittermr
.idata:10005118							; void __cdecl free(void *Memory)
.idata:10005118	?? ?? ?? ??							extrn free:dword	; CODE XREF: sub_10003C44+96p
.idata:10005118												; DATA XREF: sub_10003C44+96r
.idata:1000511C							; _onexit_t __cdecl onexit(_onexit_t Func)
.idata:1000511C	?? ?? ?? ??							extrn _onexit:dword	; CODE XREF: sub_10003C06+Dp
.idata:1000511C												; DATA XREF: sub_10003C06+Dr
.idata:10005120	?? ?? ?? ??							extrn __imp___dllonexit:dword
.idata:10005120												; DATA XREF: __dllonexitr
.idata:10005124							; __declspec(dllimport)	public:	virtual	__thiscall type_info::~type_info(void)
.idata:10005124	?? ?? ?? ??							extrn __imp_??1type_info@@UAE@XZ:dword
.idata:10005124												; DATA XREF: type_info::~type_info(void)r
.idata:10005128							; __declspec(dllimport)	void __cdecl terminate(void)
.idata:10005128	?? ?? ?? ??							extrn __imp_?terminate@@YAXXZ:dword
.idata:10005128												; DATA XREF: terminate(void)r
.idata:1000512C	?? ?? ?? ??							extrn __imp__except_handler3:dword
.idata:1000512C												; DATA XREF: _except_handler3r
.idata:10005130							; char *__cdecl	strncpy(char *Dest, const char *Source,	size_t Count)
.idata:10005130	?? ?? ?? ??							extrn strncpy:dword	; CODE XREF: sub_100033A0+48p
.idata:10005130												; DATA XREF: sub_100033A0+48r
.idata:10005134	?? ?? ?? ??							extrn _beginthreadex:dword
.idata:10005134												; CODE XREF: sub_100033A0+219p
.idata:10005134												; DATA XREF: sub_100033A0+219r
.idata:10005138							; char *__cdecl	strstr(const char *Str,	const char *SubStr)
.idata:10005138	?? ?? ?? ??							extrn strstr:dword	; CODE XREF: sub_100022C0+60p
.idata:10005138												; sub_100022C0+6Fp ...
.idata:1000513C	?? ?? ?? ??							extrn __imp___CxxFrameHandler:dword
.idata:1000513C												; DATA XREF: __CxxFrameHandlerr
.idata:10005140							; int __cdecl atoi(const char *Str)
.idata:10005140	?? ?? ?? ??							extrn atoi:dword	; CODE XREF: sub_100015A0+39p
.idata:10005140												; sub_100015A0+63p ...
.idata:10005144							; int __cdecl mbscmp(const unsigned __int8 *, const unsigned __int8 *)
.idata:10005144	?? ?? ?? ??							extrn _mbscmp:dword	; CODE XREF: sub_100022C0+16Bp
.idata:10005144												; sub_100022C0+18Fp ...
.idata:10005148							; FILE *__cdecl	fopen(const char *Filename, const char *Mode)
.idata:10005148	?? ?? ?? ??							extrn fopen:dword	; CODE XREF: GSCRCreateLocationList(char const *,CListInfo *)+4Cp
.idata:10005148												; DATA XREF: GSCRCreateLocationList(char const *,CListInfo *)+4Cr
.idata:1000514C							; char *__cdecl	fgets(char *Buf, int MaxCount, FILE *File)
.idata:1000514C	?? ?? ?? ??							extrn fgets:dword	; CODE XREF: GSCRCreateLocationList(char const *,CListInfo *)+6Ep
.idata:1000514C												; GSCRCreateLocationList(char const *,CListInfo	*)+230p
.idata:1000514C												; DATA XREF: ...
.idata:10005150							; double __cdecl atof(const char *String)
.idata:10005150	?? ?? ?? ??							extrn atof:dword	; CODE XREF: GSCRCreateLocationList(char const *,CListInfo *)+193p
.idata:10005150												; DATA XREF: GSCRCreateLocationList(char const *,CListInfo *)+193r
.idata:10005154							; int __cdecl fclose(FILE *File)
.idata:10005154	?? ?? ?? ??							extrn fclose:dword	; CODE XREF: GSCRCreateLocationList(char const *,CListInfo *)+245p
.idata:10005154												; DATA XREF: GSCRCreateLocationList(char const *,CListInfo *)+245r
.idata:10005158							; char *__cdecl	strchr(const char *Str,	int Val)
.idata:10005158	?? ?? ?? ??							extrn strchr:dword	; CODE XREF: sub_100015A0+29p
.idata:10005158												; sub_100015A0+74p ...
.idata:1000515C	?? ?? ?? ??							extrn __imp__ftol:dword	; DATA XREF: _ftolr
.idata:10005160
.idata:10005160
.rdata:10005164							; ===========================================================================
.rdata:10005164
.rdata:10005164							; Segment type:	Pure data
.rdata:10005164							; Segment permissions: Read
.rdata:10005164							_rdata		segment	para public 'DATA' use32
.rdata:10005164									assume cs:_rdata
.rdata:10005164									;org 10005164h
.rdata:10005164	00 00 00 00							align 8
.rdata:10005168							; Exported entry   8. ??_7CLocationInfo@@6B@
.rdata:10005168									public ??_7CLocationInfo@@6B@
.rdata:10005168							; const	CLocationInfo::`vftable'
.rdata:10005168	80 39 00 10					??_7CLocationInfo@@6B@ dd offset ?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ
.rdata:10005168												; DATA XREF: CLocationInfo::CLocationInfo(void)+4Do
.rdata:10005168												; CLocationInfo::~CLocationInfo(void)+1Do ...
.rdata:10005168												; CObject::GetRuntimeClass(void)
.rdata:1000516C	20 11 00 10							dd offset sub_10001120
.rdata:10005170	A0 10 00 10							dd offset nullsub_1
.rdata:10005174	B0 10 00 10							dd offset nullsub_2
.rdata:10005178	A0 10 00 10							dd offset nullsub_1
.rdata:1000517C	80 39 00 10					off_1000517C	dd offset ?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ
.rdata:1000517C												; DATA XREF: CLocationInfo::CLocationInfo(void)+1Eo
.rdata:1000517C												; sub_10001070+9o ...
.rdata:1000517C												; CObject::GetRuntimeClass(void)
.rdata:10005180	70 10 00 10							dd offset sub_10001070
.rdata:10005184	A0 10 00 10							dd offset nullsub_1
.rdata:10005188	B0 10 00 10							dd offset nullsub_2
.rdata:1000518C	A0 10 00 10							dd offset nullsub_1
.rdata:10005190							; Exported entry   9. ??_7CPhotoInfo@@6B@
.rdata:10005190									public ??_7CPhotoInfo@@6B@
.rdata:10005190							; const	CPhotoInfo::`vftable'
.rdata:10005190	80 39 00 10					??_7CPhotoInfo@@6B@ dd offset ?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ
.rdata:10005190												; DATA XREF: CPhotoInfo::CPhotoInfo(void)+59o
.rdata:10005190												; CPhotoInfo::~CPhotoInfo(void)+1Do ...
.rdata:10005190												; CObject::GetRuntimeClass(void)
.rdata:10005194	70 12 00 10							dd offset sub_10001270
.rdata:10005198	A0 10 00 10							dd offset nullsub_1
.rdata:1000519C	B0 10 00 10							dd offset nullsub_2
.rdata:100051A0	A0 10 00 10							dd offset nullsub_1
.rdata:100051A4							; Exported entry   7. ??_7CListInfo@@6B@
.rdata:100051A4									public ??_7CListInfo@@6B@
.rdata:100051A4							; const	CListInfo::`vftable'
.rdata:100051A4	80 39 00 10					??_7CListInfo@@6B@ dd offset ?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ
.rdata:100051A4												; DATA XREF: CListInfo::CListInfo(void)+6Bo
.rdata:100051A4												; CListInfo::~CListInfo(void)+1Do ...
.rdata:100051A4												; CObject::GetRuntimeClass(void)
.rdata:100051A8	C0 13 00 10							dd offset sub_100013C0
.rdata:100051AC	A0 10 00 10							dd offset nullsub_1
.rdata:100051B0	B0 10 00 10							dd offset nullsub_2
.rdata:100051B4	A0 10 00 10							dd offset nullsub_1
.rdata:100051B8	00 00 00 00 00 40 8F 40				dbl_100051B8	dq 1000.0		; DATA XREF: GSCRCreateLocationList(char const *,CListInfo *)+199r
.rdata:100051C0	80 39 00 10					off_100051C0	dd offset ?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ
.rdata:100051C0												; DATA XREF: sub_10001DA0+4Bo
.rdata:100051C0												; sub_10001EB0+1Do
.rdata:100051C0												; CObject::GetRuntimeClass(void)
.rdata:100051C4	90 1E 00 10							dd offset sub_10001E90
.rdata:100051C8	A0 10 00 10							dd offset nullsub_1
.rdata:100051CC	B0 10 00 10							dd offset nullsub_2
.rdata:100051D0	A0 10 00 10							dd offset nullsub_1
.rdata:100051D4	10 1E 00 10							dd offset sub_10001E10
.rdata:100051D8	10 1E 00 10							dd offset sub_10001E10
.rdata:100051DC	20 1E 00 10							dd offset sub_10001E20
.rdata:100051E0	80 1E 00 10							dd offset sub_10001E80
.rdata:100051E4	80 39 00 10					off_100051E4	dd offset ?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ
.rdata:100051E4												; DATA XREF: sub_10001F90+79o
.rdata:100051E4												; CObject::GetRuntimeClass(void)
.rdata:100051E8	30 20 00 10							dd offset sub_10002030
.rdata:100051EC	A0 10 00 10							dd offset nullsub_1
.rdata:100051F0	B0 10 00 10							dd offset nullsub_2
.rdata:100051F4	A0 10 00 10							dd offset nullsub_1
.rdata:100051F8	10 22 00 10							dd offset sub_10002210
.rdata:100051FC	00 00 00 00							align 10h
.rdata:10005200	FF FF FF FF 00 00 00 00	C8 3A 00 10		stru_10005200	_SCOPETABLE_ENTRY <0FFFFFFFFh, 0, offset loc_10003AC8>
.rdata:10005200												; DATA XREF: sub_10003A5E+5o
.rdata:10005200												; SEH scope table for function 10003A5E
.rdata:1000520C	00 00 00 00							align 10h
.rdata:10005210	FF FF FF FF 00 00 00 00	58 3B 00 10		stru_10005210	_SCOPETABLE_ENTRY <0FFFFFFFFh, 0, offset loc_10003B58>
.rdata:10005210												; DATA XREF: sub_10003AF0+5o
.rdata:10005210												; SEH scope table for function 10003AF0
.rdata:1000521C	00 00 00 00							align 10h
.rdata:10005220	FF FF FF FF AC 3B 00 10	B6 3B 00 10		stru_10005220	_SCOPETABLE_ENTRY <0FFFFFFFFh, offset loc_10003BAC, \
.rdata:10005220												; DATA XREF: sub_10003B70+5o
.rdata:10005220											   offset loc_10003BB6>	; SEH scope table for function 10003B70
.rdata:1000522C	68 52 00 10							dd offset unk_10005268
.rdata:10005230	EA 3B 00 10					off_10005230	dd offset sub_10003BEA	; DATA XREF: .data:stru_10006040o
.rdata:10005230												; .data:off_100060D0o
.rdata:10005234	00 00 00 00							align 8
.rdata:10005238	D0 60 00 10					off_10005238	dd offset off_100060D0	; DATA XREF: .rdata:off_10005250o
.rdata:1000523C	00								db    0
.rdata:1000523D	00								db    0
.rdata:1000523E	00								db    0
.rdata:1000523F	00								db    0
.rdata:10005240	00								db    0
.rdata:10005241	00								db    0
.rdata:10005242	00								db    0
.rdata:10005243	00								db    0
.rdata:10005244	FF								db 0FFh
.rdata:10005245	FF								db 0FFh
.rdata:10005246	FF								db 0FFh
.rdata:10005247	FF								db 0FFh
.rdata:10005248	00								db    0
.rdata:10005249	00								db    0
.rdata:1000524A	00								db    0
.rdata:1000524B	00								db    0
.rdata:1000524C	00								db    0
.rdata:1000524D	00								db    0
.rdata:1000524E	00								db    0
.rdata:1000524F	00								db    0
.rdata:10005250	38 52 00 10					off_10005250	dd offset off_10005238	; DATA XREF: .rdata:10005264o
.rdata:10005254	00								db    0
.rdata:10005255	00								db    0
.rdata:10005256	00								db    0
.rdata:10005257	00								db    0
.rdata:10005258	00								db    0			; DATA XREF: .rdata:10005278o
.rdata:10005259	00								db    0
.rdata:1000525A	00								db    0
.rdata:1000525B	00								db    0
.rdata:1000525C	00								db    0
.rdata:1000525D	00								db    0
.rdata:1000525E	00								db    0
.rdata:1000525F	00								db    0
.rdata:10005260	01								db    1
.rdata:10005261	00								db    0
.rdata:10005262	00								db    0
.rdata:10005263	00								db    0
.rdata:10005264	50 52 00 10							dd offset off_10005250
.rdata:10005268	00						unk_10005268	db    0			; DATA XREF: .rdata:1000522Co
.rdata:10005269	00								db    0
.rdata:1000526A	00								db    0
.rdata:1000526B	00								db    0
.rdata:1000526C	00								db    0
.rdata:1000526D	00								db    0
.rdata:1000526E	00								db    0
.rdata:1000526F	00								db    0
.rdata:10005270	00								db    0
.rdata:10005271	00								db    0
.rdata:10005272	00								db    0
.rdata:10005273	00								db    0
.rdata:10005274	D0 60 00 10							dd offset off_100060D0
.rdata:10005278	58 52 00 10							dd offset unk_10005258
.rdata:1000527C	00 00 00 00							align 10h
.rdata:10005280	20 05 93 19 01 00 00 00	A0 52 00 10 00 00 00 00+stru_10005280	dd 19930520h		; Magic
.rdata:10005280	00 00 00 00 00 00 00 00	00 00 00 00 00 00 00 00+					; DATA XREF: ??0CLocationInfo@@QAE@XZ_SEHo
.rdata:10005280	FF FF FF FF B0 3D 00 10						dd 1			; Count
.rdata:10005280									dd offset stru_10005280.Info; InfoPtr
.rdata:10005280									dd 0			; CountDtr
.rdata:10005280									dd 0			; DtrPtr
.rdata:10005280									dd 3 dup(0)		; _unk
.rdata:10005280									dd -1			; Info.Id
.rdata:10005280									dd offset sub_10003DB0	; Info.Proc
.rdata:100052A8	20 05 93 19 01 00 00 00	C8 52 00 10 00 00 00 00+stru_100052A8	dd 19930520h		; Magic
.rdata:100052A8	00 00 00 00 00 00 00 00	00 00 00 00 00 00 00 00+					; DATA XREF: ??1CLocationInfo@@UAE@XZ_SEHo
.rdata:100052A8	FF FF FF FF D0 3D 00 10						dd 1			; Count
.rdata:100052A8									dd offset stru_100052A8.Info; InfoPtr
.rdata:100052A8									dd 0			; CountDtr
.rdata:100052A8									dd 0			; DtrPtr
.rdata:100052A8									dd 3 dup(0)		; _unk
.rdata:100052A8									dd -1			; Info.Id
.rdata:100052A8									dd offset sub_10003DD0	; Info.Proc
.rdata:100052D0	20 05 93 19 02 00 00 00	F0 52 00 10 00 00 00 00+stru_100052D0	dd 19930520h		; Magic
.rdata:100052D0	00 00 00 00 00 00 00 00	00 00 00 00 00 00 00 00+					; DATA XREF: ??0CPhotoInfo@@QAE@XZ_SEHo
.rdata:100052D0	FF FF FF FF F0 3D 00 10	00 00 00 00 F8 3D 00 10			dd 2			; Count
.rdata:100052D0									dd offset stru_100052D0.Info; InfoPtr
.rdata:100052D0									dd 0			; CountDtr
.rdata:100052D0									dd 0			; DtrPtr
.rdata:100052D0									dd 3 dup(0)		; _unk
.rdata:100052D0									dd -1			; Info.Id
.rdata:100052D0									dd offset sub_10003DF0	; Info.Proc
.rdata:100052D0									dd 0			; Info.Id
.rdata:100052D0									dd offset sub_10003DF8	; Info.Proc
.rdata:10005300	20 05 93 19 02 00 00 00	20 53 00 10 00 00 00 00+stru_10005300	dd 19930520h		; Magic
.rdata:10005300	00 00 00 00 00 00 00 00	00 00 00 00 00 00 00 00+					; DATA XREF: ??1CPhotoInfo@@UAE@XZ_SEHo
.rdata:10005300	FF FF FF FF 10 3E 00 10	00 00 00 00 18 3E 00 10			dd 2			; Count
.rdata:10005300									dd offset stru_10005300.Info; InfoPtr
.rdata:10005300									dd 0			; CountDtr
.rdata:10005300									dd 0			; DtrPtr
.rdata:10005300									dd 3 dup(0)		; _unk
.rdata:10005300									dd -1			; Info.Id
.rdata:10005300									dd offset sub_10003E10	; Info.Proc
.rdata:10005300									dd 0			; Info.Id
.rdata:10005300									dd offset sub_10003E18	; Info.Proc
.rdata:10005330	20 05 93 19 03 00 00 00	50 53 00 10 00 00 00 00+stru_10005330	dd 19930520h		; Magic
.rdata:10005330	00 00 00 00 00 00 00 00	00 00 00 00 00 00 00 00+					; DATA XREF: ??0CListInfo@@QAE@XZ_SEHo
.rdata:10005330	FF FF FF FF 30 3E 00 10	00 00 00 00 38 3E 00 10+		dd 3			; Count
.rdata:10005330	01 00 00 00 43 3E 00 10						dd offset stru_10005330.Info; InfoPtr
.rdata:10005330									dd 0			; CountDtr
.rdata:10005330									dd 0			; DtrPtr
.rdata:10005330									dd 3 dup(0)		; _unk
.rdata:10005330									dd -1			; Info.Id
.rdata:10005330									dd offset sub_10003E30	; Info.Proc
.rdata:10005330									dd 0			; Info.Id
.rdata:10005330									dd offset sub_10003E38	; Info.Proc
.rdata:10005330									dd 1			; Info.Id
.rdata:10005330									dd offset sub_10003E43	; Info.Proc
.rdata:10005368	20 05 93 19 03 00 00 00	88 53 00 10 00 00 00 00+stru_10005368	dd 19930520h		; Magic
.rdata:10005368	00 00 00 00 00 00 00 00	00 00 00 00 00 00 00 00+					; DATA XREF: ??1CListInfo@@UAE@XZ_SEHo
.rdata:10005368	FF FF FF FF 60 3E 00 10	00 00 00 00 68 3E 00 10+		dd 3			; Count
.rdata:10005368	01 00 00 00 73 3E 00 10						dd offset stru_10005368.Info; InfoPtr
.rdata:10005368									dd 0			; CountDtr
.rdata:10005368									dd 0			; DtrPtr
.rdata:10005368									dd 3 dup(0)		; _unk
.rdata:10005368									dd -1			; Info.Id
.rdata:10005368									dd offset sub_10003E60	; Info.Proc
.rdata:10005368									dd 0			; Info.Id
.rdata:10005368									dd offset sub_10003E68	; Info.Proc
.rdata:10005368									dd 1			; Info.Id
.rdata:10005368									dd offset sub_10003E73	; Info.Proc
.rdata:100053A0	20 05 93 19 03 00 00 00	C0 53 00 10 00 00 00 00+stru_100053A0	dd 19930520h		; Magic
.rdata:100053A0	00 00 00 00 00 00 00 00	00 00 00 00 00 00 00 00+					; DATA XREF: ?GSCRSearchGPSInfo@@YA?AVCString@@XZ_SEHo
.rdata:100053A0	FF FF FF FF 98 3E 00 10	00 00 00 00 90 3E 00 10+		dd 3			; Count
.rdata:100053A0	01 00 00 00 AF 3E 00 10						dd offset stru_100053A0.Info; InfoPtr
.rdata:100053A0									dd 0			; CountDtr
.rdata:100053A0									dd 0			; DtrPtr
.rdata:100053A0									dd 3 dup(0)		; _unk
.rdata:100053A0									dd -1			; Info.Id
.rdata:100053A0									dd offset sub_10003E98	; Info.Proc
.rdata:100053A0									dd 0			; Info.Id
.rdata:100053A0									dd offset sub_10003E90	; Info.Proc
.rdata:100053A0									dd 1			; Info.Id
.rdata:100053A0									dd offset sub_10003EAF	; Info.Proc
.rdata:100053D8	20 05 93 19 03 00 00 00	F8 53 00 10 00 00 00 00+stru_100053D8	dd 19930520h		; Magic
.rdata:100053D8	00 00 00 00 00 00 00 00	00 00 00 00 00 00 00 00+					; DATA XREF: ?GSCRCreateLocationList@@YAJPBDPAVCListInfo@@@Z_SEHo
.rdata:100053D8	FF FF FF FF D0 3E 00 10	00 00 00 00 E6 3E 00 10+		dd 3			; Count
.rdata:100053D8	01 00 00 00 F3 3E 00 10						dd offset stru_100053D8.Info; InfoPtr
.rdata:100053D8									dd 0			; CountDtr
.rdata:100053D8									dd 0			; DtrPtr
.rdata:100053D8									dd 3 dup(0)		; _unk
.rdata:100053D8									dd -1			; Info.Id
.rdata:100053D8									dd offset sub_10003ED0	; Info.Proc
.rdata:100053D8									dd 0			; Info.Id
.rdata:100053D8									dd offset sub_10003EE6	; Info.Proc
.rdata:100053D8									dd 1			; Info.Id
.rdata:100053D8									dd offset sub_10003EF3	; Info.Proc
.rdata:10005410	20 05 93 19 02 00 00 00	30 54 00 10 00 00 00 00+stru_10005410	dd 19930520h		; Magic
.rdata:10005410	00 00 00 00 00 00 00 00	00 00 00 00 00 00 00 00+					; DATA XREF: ?GSCRAddLocationNameFromZipcode@@YAJPAVCListInfo@@@Z_SEHo
.rdata:10005410	FF FF FF FF 10 3F 00 10	FF FF FF FF 1B 3F 00 10			dd 2			; Count
.rdata:10005410									dd offset stru_10005410.Info; InfoPtr
.rdata:10005410									dd 0			; CountDtr
.rdata:10005410									dd 0			; DtrPtr
.rdata:10005410									dd 3 dup(0)		; _unk
.rdata:10005410									dd -1			; Info.Id
.rdata:10005410									dd offset sub_10003F10	; Info.Proc
.rdata:10005410									dd -1			; Info.Id
.rdata:10005410									dd offset sub_10003F1B	; Info.Proc
.rdata:10005440	20 05 93 19 02 00 00 00	60 54 00 10 00 00 00 00+stru_10005440	dd 19930520h		; Magic
.rdata:10005440	00 00 00 00 00 00 00 00	00 00 00 00 00 00 00 00+					; DATA XREF: SEH_10001DA0o
.rdata:10005440	FF FF FF FF 30 3F 00 10	00 00 00 00 38 3F 00 10			dd 2			; Count
.rdata:10005440									dd offset stru_10005440.Info; InfoPtr
.rdata:10005440									dd 0			; CountDtr
.rdata:10005440									dd 0			; DtrPtr
.rdata:10005440									dd 3 dup(0)		; _unk
.rdata:10005440									dd -1			; Info.Id
.rdata:10005440									dd offset sub_10003F30	; Info.Proc
.rdata:10005440									dd 0			; Info.Id
.rdata:10005440									dd offset sub_10003F38	; Info.Proc
.rdata:10005470	20 05 93 19 02 00 00 00	90 54 00 10 00 00 00 00+stru_10005470	dd 19930520h		; Magic
.rdata:10005470	00 00 00 00 00 00 00 00	00 00 00 00 00 00 00 00+					; DATA XREF: SEH_10001E20o
.rdata:10005470	FF FF FF FF 50 3F 00 10	00 00 00 00 58 3F 00 10			dd 2			; Count
.rdata:10005470									dd offset stru_10005470.Info; InfoPtr
.rdata:10005470									dd 0			; CountDtr
.rdata:10005470									dd 0			; DtrPtr
.rdata:10005470									dd 3 dup(0)		; _unk
.rdata:10005470									dd -1			; Info.Id
.rdata:10005470									dd offset sub_10003F50	; Info.Proc
.rdata:10005470									dd 0			; Info.Id
.rdata:10005470									dd offset sub_10003F58	; Info.Proc
.rdata:100054A0	20 05 93 19 03 00 00 00	C0 54 00 10 00 00 00 00+stru_100054A0	dd 19930520h		; Magic
.rdata:100054A0	00 00 00 00 00 00 00 00	00 00 00 00 00 00 00 00+					; DATA XREF: SEH_10001EB0o
.rdata:100054A0	FF FF FF FF 70 3F 00 10	00 00 00 00 78 3F 00 10+		dd 3			; Count
.rdata:100054A0	01 00 00 00 83 3F 00 10						dd offset stru_100054A0.Info; InfoPtr
.rdata:100054A0									dd 0			; CountDtr
.rdata:100054A0									dd 0			; DtrPtr
.rdata:100054A0									dd 3 dup(0)		; _unk
.rdata:100054A0									dd -1			; Info.Id
.rdata:100054A0									dd offset sub_10003F70	; Info.Proc
.rdata:100054A0									dd 0			; Info.Id
.rdata:100054A0									dd offset sub_10003F78	; Info.Proc
.rdata:100054A0									dd 1			; Info.Id
.rdata:100054A0									dd offset sub_10003F83	; Info.Proc
.rdata:100054D8	20 05 93 19 02 00 00 00	F8 54 00 10 01 00 00 00+stru_100054D8	dd 19930520h		; Magic
.rdata:100054D8	08 55 00 10 00 00 00 00	00 00 00 00 00 00 00 00+					; DATA XREF: SEH_10001F20o
.rdata:100054D8	FF FF FF FF 00 00 00 00	FF FF FF FF 00 00 00 00			dd 2			; Count
.rdata:100054D8									dd offset stru_100054D8.Info; InfoPtr
.rdata:100054D8									dd 1			; CountDtr
.rdata:100054D8									dd offset stru_10005508	; DtrPtr
.rdata:100054D8									dd 3 dup(0)		; _unk
.rdata:100054D8									dd -1			; Info.Id
.rdata:100054D8									dd 0			; Info.Proc
.rdata:100054D8									dd -1			; Info.Id
.rdata:100054D8									dd 0			; Info.Proc
.rdata:10005508	00 00 00 00 00 00 00 00	01 00 00 00 01 00 00 00+stru_10005508	dd 0, 0, 1		; _unk
.rdata:10005508	20 55 00 10										; DATA XREF: .rdata:stru_100054D8o
.rdata:10005508									dd 1			; Count
.rdata:10005508									dd offset stru_10005520	; RttiBlkPtr
.rdata:1000551C	00 00 00 00							dd 0
.rdata:10005520	00 00 00 00 40 60 00 10	EC FF FF FF 6B 1F 00 10	stru_10005520	_msRttiDscr <0,	offset stru_10006040, -20, offset sub_10001F6B>
.rdata:10005520												; DATA XREF: .rdata:stru_10005508o
.rdata:10005530	20 05 93 19 03 00 00 00	50 55 00 10 00 00 00 00+stru_10005530	dd 19930520h		; Magic
.rdata:10005530	00 00 00 00 00 00 00 00	00 00 00 00 00 00 00 00+					; DATA XREF: SEH_10001F90o
.rdata:10005530	FF FF FF FF B0 3F 00 10	00 00 00 00 B8 3F 00 10+		dd 3			; Count
.rdata:10005530	01 00 00 00 C3 3F 00 10						dd offset stru_10005530.Info; InfoPtr
.rdata:10005530									dd 0			; CountDtr
.rdata:10005530									dd 0			; DtrPtr
.rdata:10005530									dd 3 dup(0)		; _unk
.rdata:10005530									dd -1			; Info.Id
.rdata:10005530									dd offset sub_10003FB0	; Info.Proc
.rdata:10005530									dd 0			; Info.Id
.rdata:10005530									dd offset sub_10003FB8	; Info.Proc
.rdata:10005530									dd 1			; Info.Id
.rdata:10005530									dd offset sub_10003FC3	; Info.Proc
.rdata:10005568	20 05 93 19 03 00 00 00	88 55 00 10 00 00 00 00+stru_10005568	dd 19930520h		; Magic
.rdata:10005568	00 00 00 00 00 00 00 00	00 00 00 00 00 00 00 00+					; DATA XREF: SEH_10002050o
.rdata:10005568	FF FF FF FF F0 3F 00 10	00 00 00 00 F8 3F 00 10+		dd 3			; Count
.rdata:10005568	01 00 00 00 03 40 00 10						dd offset stru_10005568.Info; InfoPtr
.rdata:10005568									dd 0			; CountDtr
.rdata:10005568									dd 0			; DtrPtr
.rdata:10005568									dd 3 dup(0)		; _unk
.rdata:10005568									dd -1			; Info.Id
.rdata:10005568									dd offset sub_10003FF0	; Info.Proc
.rdata:10005568									dd 0			; Info.Id
.rdata:10005568									dd offset sub_10003FF8	; Info.Proc
.rdata:10005568									dd 1			; Info.Id
.rdata:10005568									dd offset sub_10004003	; Info.Proc
.rdata:100055A0	20 05 93 19 01 00 00 00	C0 55 00 10 00 00 00 00+stru_100055A0	dd 19930520h		; Magic
.rdata:100055A0	00 00 00 00 00 00 00 00	00 00 00 00 00 00 00 00+					; DATA XREF: SEH_100020C0o
.rdata:100055A0	FF FF FF FF 30 40 00 10						dd 1			; Count
.rdata:100055A0									dd offset stru_100055A0.Info; InfoPtr
.rdata:100055A0									dd 0			; CountDtr
.rdata:100055A0									dd 0			; DtrPtr
.rdata:100055A0									dd 3 dup(0)		; _unk
.rdata:100055A0									dd -1			; Info.Id
.rdata:100055A0									dd offset sub_10004030	; Info.Proc
.rdata:100055C8	20 05 93 19 12 00 00 00	E8 55 00 10 00 00 00 00+stru_100055C8	dd 19930520h		; Magic
.rdata:100055C8	00 00 00 00 00 00 00 00	00 00 00 00 00 00 00 00+					; DATA XREF: SEH_100022C0o
.rdata:100055C8	FF FF FF FF 50 40 00 10	00 00 00 00 58 40 00 10+		dd 18			; Count
.rdata:100055C8	01 00 00 00 6B 40 00 10	01 00 00 00 73 40 00 10+		dd offset stru_100055C8.Info; InfoPtr
.rdata:100055C8	01 00 00 00 7B 40 00 10	01 00 00 00 83 40 00 10+		dd 0			; CountDtr
.rdata:100055C8	05 00 00 00 8B 40 00 10	06 00 00 00 93 40 00 10+		dd 0			; DtrPtr
.rdata:100055C8	01 00 00 00 9B 40 00 10	08 00 00 00 A3 40 00 10+		dd 3 dup(0)		; _unk
.rdata:100055C8	09 00 00 00 AB 40 00 10	01 00 00 00 B3 40 00 10+		dd -1			; Info.Id
.rdata:100055C8	0B 00 00 00 BB 40 00 10	0C 00 00 00 C3 40 00 10+		dd offset sub_10004050	; Info.Proc
.rdata:100055C8	01 00 00 00 CB 40 00 10	01 00 00 00 D3 40 00 10+		dd 0			; Info.Id
.rdata:100055C8	01 00 00 00 DB 40 00 10	01 00 00 00 E3 40 00 10			dd offset sub_10004058	; Info.Proc
.rdata:100055C8									dd 1			; Info.Id
.rdata:100055C8									dd offset sub_1000406B	; Info.Proc
.rdata:100055C8									dd 1			; Info.Id
.rdata:100055C8									dd offset sub_10004073	; Info.Proc
.rdata:100055C8									dd 1			; Info.Id
.rdata:100055C8									dd offset sub_1000407B	; Info.Proc
.rdata:100055C8									dd 1			; Info.Id
.rdata:100055C8									dd offset sub_10004083	; Info.Proc
.rdata:100055C8									dd 5			; Info.Id
.rdata:100055C8									dd offset sub_1000408B	; Info.Proc
.rdata:100055C8									dd 6			; Info.Id
.rdata:100055C8									dd offset sub_10004093	; Info.Proc
.rdata:100055C8									dd 1			; Info.Id
.rdata:100055C8									dd offset sub_1000409B	; Info.Proc
.rdata:100055C8									dd 8			; Info.Id
.rdata:100055C8									dd offset sub_100040A3	; Info.Proc
.rdata:100055C8									dd 9			; Info.Id
.rdata:100055C8									dd offset sub_100040AB	; Info.Proc
.rdata:100055C8									dd 1			; Info.Id
.rdata:100055C8									dd offset sub_100040B3	; Info.Proc
.rdata:100055C8									dd 11			; Info.Id
.rdata:100055C8									dd offset sub_100040BB	; Info.Proc
.rdata:100055C8									dd 12			; Info.Id
.rdata:100055C8									dd offset sub_100040C3	; Info.Proc
.rdata:100055C8									dd 1			; Info.Id
.rdata:100055C8									dd offset sub_100040CB	; Info.Proc
.rdata:100055C8									dd 1			; Info.Id
.rdata:100055C8									dd offset sub_100040D3	; Info.Proc
.rdata:100055C8									dd 1			; Info.Id
.rdata:100055C8									dd offset sub_100040DB	; Info.Proc
.rdata:100055C8									dd 1			; Info.Id
.rdata:100055C8									dd offset sub_100040E3	; Info.Proc
.rdata:10005678	20 05 93 19 04 00 00 00	98 56 00 10 00 00 00 00+stru_10005678	dd 19930520h		; Magic
.rdata:10005678	00 00 00 00 00 00 00 00	00 00 00 00 00 00 00 00+					; DATA XREF: ?GSCREnumDevices@@YAPAXXZ_SEHo
.rdata:10005678	FF FF FF FF 00 41 00 10	FF FF FF FF 0D 41 00 10+		dd 4			; Count
.rdata:10005678	01 00 00 00 18 41 00 10	01 00 00 00 26 41 00 10			dd offset stru_10005678.Info; InfoPtr
.rdata:10005678									dd 0			; CountDtr
.rdata:10005678									dd 0			; DtrPtr
.rdata:10005678									dd 3 dup(0)		; _unk
.rdata:10005678									dd -1			; Info.Id
.rdata:10005678									dd offset sub_10004100	; Info.Proc
.rdata:10005678									dd -1			; Info.Id
.rdata:10005678									dd offset sub_1000410D	; Info.Proc
.rdata:10005678									dd 1			; Info.Id
.rdata:10005678									dd offset sub_10004118	; Info.Proc
.rdata:10005678									dd 1			; Info.Id
.rdata:10005678									dd offset sub_10004126	; Info.Proc
.rdata:100056B8	20 05 93 19 01 00 00 00	D8 56 00 10 00 00 00 00+stru_100056B8	dd 19930520h		; Magic
.rdata:100056B8	00 00 00 00 00 00 00 00	00 00 00 00 00 00 00 00+					; DATA XREF: ?GSCRSetLogFilename@@YAJPAXPBDH@Z_SEHo
.rdata:100056B8	FF FF FF FF 40 41 00 10						dd 1			; Count
.rdata:100056B8									dd offset stru_100056B8.Info; InfoPtr
.rdata:100056B8									dd 0			; CountDtr
.rdata:100056B8									dd 0			; DtrPtr
.rdata:100056B8									dd 3 dup(0)		; _unk
.rdata:100056B8									dd -1			; Info.Id
.rdata:100056B8									dd offset sub_10004140	; Info.Proc
.rdata:100056E0	20 05 93 19 02 00 00 00	00 57 00 10 00 00 00 00+stru_100056E0	dd 19930520h		; Magic
.rdata:100056E0	00 00 00 00 00 00 00 00	00 00 00 00 00 00 00 00+					; DATA XREF: SEH_10003030o
.rdata:100056E0	FF FF FF FF 60 41 00 10	FF FF FF FF 6B 41 00 10			dd 2			; Count
.rdata:100056E0									dd offset stru_100056E0.Info; InfoPtr
.rdata:100056E0									dd 0			; CountDtr
.rdata:100056E0									dd 0			; DtrPtr
.rdata:100056E0									dd 3 dup(0)		; _unk
.rdata:100056E0									dd -1			; Info.Id
.rdata:100056E0									dd offset sub_10004160	; Info.Proc
.rdata:100056E0									dd -1			; Info.Id
.rdata:100056E0									dd offset sub_1000416B	; Info.Proc
.rdata:10005710	FC 57 00 00					__IMPORT_DESCRIPTOR_MFC42 dd rva dword_100057FC
.rdata:10005710												; DATA XREF: HEADER:10000180o
.rdata:10005710												; Import Name Table
.rdata:10005714	00 00 00 00							dd 0			; Time stamp
.rdata:10005718	00 00 00 00							dd 0			; Forwarder Chain
.rdata:1000571C	EC 58 00 00							dd rva aMfc42_dll	; DLL Name
.rdata:10005720	74 50 00 00							dd rva __imp_?Left@CString@@QBE?AV1@H@Z	; Import Address Table
.rdata:10005724	94 58 00 00					__IMPORT_DESCRIPTOR_MSVCRT dd rva off_10005894 ; Import	Name Table
.rdata:10005728	00 00 00 00							dd 0			; Time stamp
.rdata:1000572C	00 00 00 00							dd 0			; Forwarder Chain
.rdata:10005730	8A 59 00 00							dd rva aMsvcrt_dll	; DLL Name
.rdata:10005734	0C 51 00 00							dd rva _adjust_fdiv	; Import Address Table
.rdata:10005738	AC 57 00 00					__IMPORT_DESCRIPTOR_KERNEL32 dd	rva off_100057AC ; Import Name Table
.rdata:1000573C	00 00 00 00							dd 0			; Time stamp
.rdata:10005740	00 00 00 00							dd 0			; Forwarder Chain
.rdata:10005744	36 5B 00 00							dd rva aKernel32_dll	; DLL Name
.rdata:10005748	24 50 00 00							dd rva SetCommMask	; Import Address Table
.rdata:1000574C	88 57 00 00					__IMPORT_DESCRIPTOR_CmLibs2 dd rva off_10005788	; Import Name Table
.rdata:10005750	00 00 00 00							dd 0			; Time stamp
.rdata:10005754	00 00 00 00							dd 0			; Forwarder Chain
.rdata:10005758	DC 5B 00 00							dd rva aCmlibs2_dll	; DLL Name
.rdata:1000575C	00 50 00 00							dd rva ??_7CSortableObList@@6B@	; Import Address Table
.rdata:10005760	9C 57 00 00					__IMPORT_DESCRIPTOR_CmZipAdrs dd rva off_1000579C ; Import Name	Table
.rdata:10005764	00 00 00 00							dd 0			; Time stamp
.rdata:10005768	00 00 00 00							dd 0			; Forwarder Chain
.rdata:1000576C	24 5C 00 00							dd rva aCmzipadrs_dll	; DLL Name
.rdata:10005770	14 50 00 00							dd rva CmExitZip2Address ; Import Address Table
.rdata:10005774	00								db    0
.rdata:10005775	00								db    0
.rdata:10005776	00								db    0
.rdata:10005777	00								db    0
.rdata:10005778	00								db    0
.rdata:10005779	00								db    0
.rdata:1000577A	00								db    0
.rdata:1000577B	00								db    0
.rdata:1000577C	00								db    0
.rdata:1000577D	00								db    0
.rdata:1000577E	00								db    0
.rdata:1000577F	00								db    0
.rdata:10005780	00								db    0
.rdata:10005781	00								db    0
.rdata:10005782	00								db    0
.rdata:10005783	00								db    0
.rdata:10005784	00								db    0
.rdata:10005785	00								db    0
.rdata:10005786	00								db    0
.rdata:10005787	00								db    0
.rdata:10005788							;
.rdata:10005788							; Import names for CmLibs2.dll
.rdata:10005788							;
.rdata:10005788	6E 5B 00 00					off_10005788	dd rva word_10005B6E	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_CmLibs2o
.rdata:1000578C	8A 5B 00 00							dd rva word_10005B8A
.rdata:10005790	B8 5B 00 00							dd rva word_10005BB8
.rdata:10005794	50 5B 00 00							dd rva word_10005B50
.rdata:10005798	00 00 00 00							dd 0
.rdata:1000579C							;
.rdata:1000579C							; Import names for CmZipAdrs.dll
.rdata:1000579C							;
.rdata:1000579C	E8 5B 00 00					off_1000579C	dd rva word_10005BE8	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_CmZipAdrso
.rdata:100057A0	FC 5B 00 00							dd rva word_10005BFC
.rdata:100057A4	10 5C 00 00							dd rva word_10005C10
.rdata:100057A8	00 00 00 00							dd 0
.rdata:100057AC							;
.rdata:100057AC							; Import names for KERNEL32.dll
.rdata:100057AC							;
.rdata:100057AC	8E 5A 00 00					off_100057AC	dd rva word_10005A8E	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_KERNEL32o
.rdata:100057B0	9C 5A 00 00							dd rva word_10005A9C
.rdata:100057B4	AA 5A 00 00							dd rva word_10005AAA
.rdata:100057B8	C0 5A 00 00							dd rva word_10005AC0
.rdata:100057BC	7C 5A 00 00							dd rva word_10005A7C
.rdata:100057C0	DC 5A 00 00							dd rva word_10005ADC
.rdata:100057C4	F2 5A 00 00							dd rva word_10005AF2
.rdata:100057C8	FE 5A 00 00							dd rva word_10005AFE
.rdata:100057CC	18 5B 00 00							dd rva word_10005B18
.rdata:100057D0	26 5B 00 00							dd rva word_10005B26
.rdata:100057D4	08 5A 00 00							dd rva word_10005A08
.rdata:100057D8	14 5A 00 00							dd rva word_10005A14
.rdata:100057DC	20 5A 00 00							dd rva word_10005A20
.rdata:100057E0	2C 5A 00 00							dd rva word_10005A2C
.rdata:100057E4	38 5A 00 00							dd rva word_10005A38
.rdata:100057E8	4E 5A 00 00							dd rva word_10005A4E
.rdata:100057EC	5E 5A 00 00							dd rva word_10005A5E
.rdata:100057F0	D0 5A 00 00							dd rva word_10005AD0
.rdata:100057F4	6C 5A 00 00							dd rva word_10005A6C
.rdata:100057F8	00 00 00 00							dd 0
.rdata:100057FC							;
.rdata:100057FC							; Import names for MFC42.DLL
.rdata:100057FC							;
.rdata:100057FC	21 10 00 80					dword_100057FC	dd 80001021h		; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_MFC42o
.rdata:10005800	B6 10 00 80							dd 800010B6h
.rdata:10005804	06 1A 00 80							dd 80001A06h
.rdata:10005808	AD 03 00 80							dd 800003ADh
.rdata:1000580C	CC 0A 00 80							dd 80000ACCh
.rdata:10005810	F5 01 00 80							dd 800001F5h
.rdata:10005814	D8 0A 00 80							dd 80000AD8h
.rdata:10005818	51 04 00 80							dd 80000451h
.rdata:1000581C	4E 16 00 80							dd 8000164Eh
.rdata:10005820	E3 0E 00 80							dd 80000EE3h
.rdata:10005824	02 0B 00 80							dd 80000B02h
.rdata:10005828	59 09 00 80							dd 80000959h
.rdata:1000582C	5A 03 00 80							dd 8000035Ah
.rdata:10005830	9C 03 00 80							dd 8000039Ch
.rdata:10005834	4F 0E 00 80							dd 80000E4Fh
.rdata:10005838	5C 03 00 80							dd 8000035Ch
.rdata:1000583C	27 02 00 80							dd 80000227h
.rdata:10005840	39 04 00 80							dd 80000439h
.rdata:10005844	17 02 00 80							dd 80000217h
.rdata:10005848	62 01 00 80							dd 80000162h
.rdata:1000584C	42 14 00 80							dd 80001442h
.rdata:10005850	19 02 00 80							dd 80000219h
.rdata:10005854	BB 07 00 80							dd 800007BBh
.rdata:10005858	99 02 00 80							dd 80000299h
.rdata:1000585C	9E 04 00 80							dd 8000049Eh
.rdata:10005860	37 03 00 80							dd 80000337h
.rdata:10005864	56 01 00 80							dd 80000156h
.rdata:10005868	E5 04 00 80							dd 800004E5h
.rdata:1000586C	90 04 00 80							dd 80000490h
.rdata:10005870	CB 02 00 80							dd 800002CBh
.rdata:10005874	80 01 00 80							dd 80000180h
.rdata:10005878	9F 01 00 80							dd 8000019Fh
.rdata:1000587C	AE 02 00 80							dd 800002AEh
.rdata:10005880	39 03 00 80							dd 80000339h
.rdata:10005884	20 03 00 80							dd 80000320h
.rdata:10005888	1C 02 00 80							dd 8000021Ch
.rdata:1000588C	3B 04 00 80							dd 8000043Bh
.rdata:10005890	00 00 00 00							dd 0
.rdata:10005894							;
.rdata:10005894							; Import names for MSVCRT.dll
.rdata:10005894							;
.rdata:10005894	F8 59 00 00					off_10005894	dd rva word_100059F8	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_MSVCRTo
.rdata:10005898	EE 59 00 00							dd rva word_100059EE
.rdata:1000589C	E2 59 00 00							dd rva word_100059E2
.rdata:100058A0	DA 59 00 00							dd rva word_100059DA
.rdata:100058A4	D0 59 00 00							dd rva word_100059D0
.rdata:100058A8	C2 59 00 00							dd rva word_100059C2
.rdata:100058AC	AA 59 00 00							dd rva word_100059AA
.rdata:100058B0	96 59 00 00							dd rva word_10005996
.rdata:100058B4	76 59 00 00							dd rva word_10005976
.rdata:100058B8	6C 59 00 00							dd rva word_1000596C
.rdata:100058BC	5A 59 00 00							dd rva word_1000595A
.rdata:100058C0	50 59 00 00							dd rva word_10005950
.rdata:100058C4	F6 58 00 00							dd rva word_100058F6
.rdata:100058C8	0A 59 00 00							dd rva word_1000590A
.rdata:100058CC	46 59 00 00							dd rva word_10005946
.rdata:100058D0	36 59 00 00							dd rva word_10005936
.rdata:100058D4	2E 59 00 00							dd rva word_1000592E
.rdata:100058D8	26 59 00 00							dd rva word_10005926
.rdata:100058DC	1C 59 00 00							dd rva word_1000591C
.rdata:100058E0	12 59 00 00							dd rva word_10005912
.rdata:100058E4	3E 59 00 00							dd rva word_1000593E
.rdata:100058E8	00 00 00 00							dd 0
.rdata:100058EC	4D 46 43 34 32 2E 44 4C	4C 00			aMfc42_dll	db 'MFC42.DLL',0        ; DATA XREF: .rdata:1000571Co
.rdata:100058F6	49 00						word_100058F6	dw 49h			; DATA XREF: .rdata:100058C4o
.rdata:100058F8	5F 5F 43 78 78 46 72 61	6D 65 48 61 6E 64 6C 65+		db '__CxxFrameHandler',0
.rdata:1000590A	3D 02						word_1000590A	dw 23Dh			; DATA XREF: .rdata:100058C8o
.rdata:1000590C	61 74 6F 69 00							db 'atoi',0
.rdata:10005911	00								align 2
.rdata:10005912	B7 02						word_10005912	dw 2B7h			; DATA XREF: .rdata:100058E0o
.rdata:10005914	73 74 72 63 68 72 00						db 'strchr',0
.rdata:1000591B	00								align 4
.rdata:1000591C	4C 02						word_1000591C	dw 24Ch			; DATA XREF: .rdata:100058DCo
.rdata:1000591E	66 63 6C 6F 73 65 00						db 'fclose',0
.rdata:10005925	00								align 2
.rdata:10005926	3C 02						word_10005926	dw 23Ch			; DATA XREF: .rdata:100058D8o
.rdata:10005928	61 74 6F 66 00							db 'atof',0
.rdata:1000592D	00								align 2
.rdata:1000592E	52 02						word_1000592E	dw 252h			; DATA XREF: .rdata:100058D4o
.rdata:10005930	66 67 65 74 73 00						db 'fgets',0
.rdata:10005936	57 02						word_10005936	dw 257h			; DATA XREF: .rdata:100058D0o
.rdata:10005938	66 6F 70 65 6E 00						db 'fopen',0
.rdata:1000593E	F1 00						word_1000593E	dw 0F1h			; DATA XREF: .rdata:100058E4o
.rdata:10005940	5F 66 74 6F 6C 00						db '_ftol',0
.rdata:10005946	59 01						word_10005946	dw 159h			; DATA XREF: .rdata:100058CCo
.rdata:10005948	5F 6D 62 73 63 6D 70 00						db '_mbscmp',0
.rdata:10005950	C5 02						word_10005950	dw 2C5h			; DATA XREF: .rdata:100058C0o
.rdata:10005952	73 74 72 73 74 72 00						db 'strstr',0
.rdata:10005959	00								align 2
.rdata:1000595A	A6 00						word_1000595A	dw 0A6h			; DATA XREF: .rdata:100058BCo
.rdata:1000595C	5F 62 65 67 69 6E 74 68	72 65 61 64 65 78 00			db '_beginthreadex',0
.rdata:1000596B	00								align 4
.rdata:1000596C	C1 02						word_1000596C	dw 2C1h			; DATA XREF: .rdata:100058B8o
.rdata:1000596E	73 74 72 6E 63 70 79 00						db 'strncpy',0
.rdata:10005976	CA 00						word_10005976	dw 0CAh			; DATA XREF: .rdata:100058B4o
.rdata:10005978	5F 65 78 63 65 70 74 5F	68 61 6E 64 6C 65 72 33+		db '_except_handler3',0
.rdata:10005989	00								align 2
.rdata:1000598A	4D 53 56 43 52 54 2E 64	6C 6C 00		aMsvcrt_dll	db 'MSVCRT.dll',0       ; DATA XREF: .rdata:10005730o
.rdata:10005995	00								align 2
.rdata:10005996	2E 00						word_10005996	dw 2Eh			; DATA XREF: .rdata:100058B0o
.rdata:10005998	3F 74 65 72 6D 69 6E 61	74 65 40 40 59 41 58 58+		db '?terminate@@YAXXZ',0
.rdata:100059AA	0E 00						word_100059AA	dw 0Eh			; DATA XREF: .rdata:100058ACo
.rdata:100059AC	3F 3F 31 74 79 70 65 5F	69 6E 66 6F 40 40 55 41+		db '??1type_info@@UAE@XZ',0
.rdata:100059C1	00								align 2
.rdata:100059C2	55 00						word_100059C2	dw 55h			; DATA XREF: .rdata:100058A8o
.rdata:100059C4	5F 5F 64 6C 6C 6F 6E 65	78 69 74 00				db '__dllonexit',0
.rdata:100059D0	86 01						word_100059D0	dw 186h			; DATA XREF: .rdata:100058A4o
.rdata:100059D2	5F 6F 6E 65 78 69 74 00						db '_onexit',0
.rdata:100059DA	5E 02						word_100059DA	dw 25Eh			; DATA XREF: .rdata:100058A0o
.rdata:100059DC	66 72 65 65 00							db 'free',0
.rdata:100059E1	00								align 2
.rdata:100059E2	0F 01						word_100059E2	dw 10Fh			; DATA XREF: .rdata:1000589Co
.rdata:100059E4	5F 69 6E 69 74 74 65 72	6D 00					db '_initterm',0
.rdata:100059EE	91 02						word_100059EE	dw 291h			; DATA XREF: .rdata:10005898o
.rdata:100059F0	6D 61 6C 6C 6F 63 00						db 'malloc',0
.rdata:100059F7	00								align 4
.rdata:100059F8	9D 00						word_100059F8	dw 9Dh			; DATA XREF: .rdata:off_10005894o
.rdata:100059FA	5F 61 64 6A 75 73 74 5F	66 64 69 76 00				db '_adjust_fdiv',0
.rdata:10005A07	00								align 4
.rdata:10005A08	A8 03						word_10005A08	dw 3A8h			; DATA XREF: .rdata:100057D4o
.rdata:10005A0A	6C 73 74 72 63 70 79 41	00					db 'lstrcpyA',0
.rdata:10005A13	00								align 4
.rdata:10005A14	AE 03						word_10005A14	dw 3AEh			; DATA XREF: .rdata:100057D8o
.rdata:10005A16	6C 73 74 72 6C 65 6E 41	00					db 'lstrlenA',0
.rdata:10005A1F	00								align 10h
.rdata:10005A20	FC 02						word_10005A20	dw 2FCh			; DATA XREF: .rdata:100057DCo
.rdata:10005A22	53 65 74 45 76 65 6E 74	00					db 'SetEvent',0
.rdata:10005A2B	00								align 4
.rdata:10005A2C	AB 03						word_10005A2C	dw 3ABh			; DATA XREF: .rdata:100057E0o
.rdata:10005A2E	6C 73 74 72 63 70 79 6E	41 00					db 'lstrcpynA',0
.rdata:10005A38	75 03						word_10005A38	dw 375h			; DATA XREF: .rdata:100057E4o
.rdata:10005A3A	57 61 69 74 46 6F 72 53	69 6E 67 6C 65 4F 62 6A+		db 'WaitForSingleObject',0
.rdata:10005A4E	46 00						word_10005A4E	dw 46h			; DATA XREF: .rdata:100057E8o
.rdata:10005A50	43 72 65 61 74 65 45 76	65 6E 74 41 00				db 'CreateEventA',0
.rdata:10005A5D	00								align 2
.rdata:10005A5E	2B 00						word_10005A5E	dw 2Bh			; DATA XREF: .rdata:100057ECo
.rdata:10005A60	43 6C 6F 73 65 48 61 6E	64 6C 65 00				db 'CloseHandle',0
.rdata:10005A6C	CD 02						word_10005A6C	dw 2CDh			; DATA XREF: .rdata:100057F4o
.rdata:10005A6E	53 65 74 43 6F 6D 6D 53	74 61 74 65 00				db 'SetCommState',0
.rdata:10005A7B	00								align 4
.rdata:10005A7C	CE 02						word_10005A7C	dw 2CEh			; DATA XREF: .rdata:100057BCo
.rdata:10005A7E	56 69 72 74 75 61 6C 41	6C 6C 6F 63 00				db 'VirtualAlloc',0
.rdata:10005A8B	00								db    0
.rdata:10005A8C	00								db    0
.rdata:10005A8D	00								db    0
.rdata:10005A8E	CC 02						word_10005A8E	dw 2CCh			; DATA XREF: .rdata:off_100057ACo
.rdata:10005A90	53 65 74 43 6F 6D 6D 4D	61 73 6B 00				db 'SetCommMask',0
.rdata:10005A9C	4A 00						word_10005A9C	dw 4Ah			; DATA XREF: .rdata:100057B0o
.rdata:10005A9E	43 72 65 61 74 65 46 69	6C 65 41 00				db 'CreateFileA',0
.rdata:10005AAA	FF 00						word_10005AAA	dw 0FFh			; DATA XREF: .rdata:100057B4o
.rdata:10005AAC	47 65 74 50 72 6F 63 41	64 64 72 65 73 73 00			db 'GetProcAddress',0
.rdata:10005ABB	00 00 00 00 00							align 10h
.rdata:10005AC0	71 03						word_10005AC0	dw 371h			; DATA XREF: .rdata:100057B8o
.rdata:10005AC2	4C 6F 61 64 4C 69 62 72	61 72 79 41 00				db 'LoadLibraryA',0
.rdata:10005ACF	00								align 10h
.rdata:10005AD0	86 03						word_10005AD0	dw 386h			; DATA XREF: .rdata:100057F0o
.rdata:10005AD2	57 72 69 74 65 46 69 6C	65 00					db 'WriteFile',0
.rdata:10005ADC	87 01						word_10005ADC	dw 187h			; DATA XREF: .rdata:100057C0o
.rdata:10005ADE	47 65 74 4F 76 65 72 6C	61 70 70 65 64 52 65 73+		db 'GetOverlappedResult',0
.rdata:10005AF2	9E 02						word_10005AF2	dw 29Eh			; DATA XREF: .rdata:100057C4o
.rdata:10005AF4	52 65 61 64 46 69 6C 65	00					db 'ReadFile',0
.rdata:10005AFD	00								align 2
.rdata:10005AFE	73 03						word_10005AFE	dw 373h			; DATA XREF: .rdata:100057C8o
.rdata:10005B00	57 61 69 74 46 6F 72 4D	75 6C 74 69 70 6C 65 4F+		db 'WaitForMultipleObjects',0
.rdata:10005B17	00								align 4
.rdata:10005B18	B7 02						word_10005B18	dw 2B7h			; DATA XREF: .rdata:100057CCo
.rdata:10005B1A	52 65 73 65 74 45 76 65	6E 74 00				db 'ResetEvent',0
.rdata:10005B25	00								align 2
.rdata:10005B26	64 01						word_10005B26	dw 164h			; DATA XREF: .rdata:100057D0o
.rdata:10005B28	47 65 74 4C 61 73 74 45	72 72 6F 72 00				db 'GetLastError',0
.rdata:10005B35	00								align 2
.rdata:10005B36	4B 45 52 4E 45 4C 33 32	2E 64 6C 6C 00		aKernel32_dll	db 'KERNEL32.dll',0     ; DATA XREF: .rdata:10005744o
.rdata:10005B43	00								align 4
.rdata:10005B44	55 53 45 52 33 32 2E 64	6C 6C 00		aUser32_dll	db 'USER32.dll',0
.rdata:10005B4F	00								align 10h
.rdata:10005B50	1B 00						word_10005B50	dw 1Bh			; DATA XREF: .rdata:10005794o
.rdata:10005B52	3F 3F 31 43 53 6F 72 74	61 62 6C 65 4F 62 4C 69+		db '??1CSortableObList@@UAE@XZ',0
.rdata:10005B6D	00								align 2
.rdata:10005B6E	39 00						word_10005B6E	dw 39h			; DATA XREF: .rdata:off_10005788o
.rdata:10005B70	3F 3F 5F 37 43 53 6F 72	74 61 62 6C 65 4F 62 4C+		db '??_7CSortableObList@@6B@',0
.rdata:10005B89	00								align 2
.rdata:10005B8A	4B 00						word_10005B8A	dw 4Bh			; DATA XREF: .rdata:1000578Co
.rdata:10005B8C	3F 43 4D 47 65 74 50 72	6F 66 69 6C 65 53 74 72+		db '?CMGetProfileString@@YA?AVCString@@PBD00@Z',0
.rdata:10005BB7	00								align 4
.rdata:10005BB8	A2 00						word_10005BB8	dw 0A2h			; DATA XREF: .rdata:10005790o
.rdata:10005BBA	3F 43 4D 54 4C 47 65 74	45 78 65 44 69 72 40 40+		db '?CMTLGetExeDir@@YA?AVCString@@XZ',0
.rdata:10005BDB	00								align 4
.rdata:10005BDC	43 6D 4C 69 62 73 32 2E	64 6C 6C 00		aCmlibs2_dll	db 'CmLibs2.dll',0      ; DATA XREF: .rdata:10005758o
.rdata:10005BE8	03 00						word_10005BE8	dw 3			; DATA XREF: .rdata:off_1000579Co
.rdata:10005BEA	43 6D 45 78 69 74 5A 69	70 32 41 64 64 72 65 73+		db 'CmExitZip2Address',0
.rdata:10005BFC	01 00						word_10005BFC	dw 1			; DATA XREF: .rdata:100057A0o
.rdata:10005BFE	43 6D 43 6F 6E 76 5A 69	70 32 41 64 64 72 65 73+		db 'CmConvZip2Address',0
.rdata:10005C10	04 00						word_10005C10	dw 4			; DATA XREF: .rdata:100057A4o
.rdata:10005C12	43 6D 49 6E 69 74 5A 69	70 32 41 64 64 72 65 73+		db 'CmInitZip2Address',0
.rdata:10005C24	43 6D 5A 69 70 41 64 72	73 2E 64 6C 6C 00	aCmzipadrs_dll	db 'CmZipAdrs.dll',0    ; DATA XREF: .rdata:1000576Co
.rdata:10005C32	00 00 00 00 00 00 00 00	00 00 00 00 00 00			align 10h
.rdata:10005C40							;
.rdata:10005C40							; Export directory for GISCore.dll
.rdata:10005C40							;
.rdata:10005C40	00 00 00 00					dword_10005C40	dd 0			; DATA XREF: HEADER:10000178o
.rdata:10005C40												; Characteristics
.rdata:10005C44	A1 A9 13 45							dd 4513A9A1h		; TimeDateStamp: Fri Sep 22 09:15:13 2006
.rdata:10005C48	00 00								dw 0			; MajorVersion
.rdata:10005C4A	00 00								dw 0			; MinorVersion
.rdata:10005C4C	44 5D 00 00							dd rva aGiscore_dll	; Name
.rdata:10005C50	01 00 00 00							dd 1			; Base
.rdata:10005C54	16 00 00 00							dd 16h			; NumberOfFunctions
.rdata:10005C58	16 00 00 00							dd 16h			; NumberOfNames
.rdata:10005C5C	68 5C 00 00							dd rva off_10005C68	; AddressOfFunctions
.rdata:10005C60	C0 5C 00 00							dd rva off_10005CC0	; AddressOfNames
.rdata:10005C64	18 5D 00 00							dd rva word_10005D18	; AddressOfNameOrdinals
.rdata:10005C68							;
.rdata:10005C68							; Export Address Table for GISCore.dll
.rdata:10005C68							;
.rdata:10005C68	D0 12 00 00 00 10 00 00	80 11 00 00 50 13 00 00+off_10005C68	dd rva ??0CListInfo@@QAE@XZ, rva ??0CLocationInfo@@QAE@XZ
.rdata:10005C68	C0 10 00 00 10 12 00 00	A4 51 00 00 68 51 00 00+					; DATA XREF: .rdata:10005C5Co
.rdata:10005C68	90 51 00 00 C0 19 00 00	A0 16 00 00 70 2E 00 00+		dd rva ??0CPhotoInfo@@QAE@XZ, rva ??1CListInfo@@UAE@XZ ; CLocationInfo::CLocationInfo(void)
.rdata:10005C68	70 19 00 00 60 2C 00 00	60 2E 00 00 A0 2E 00 00+		dd rva ??1CLocationInfo@@UAE@XZ, rva ??1CPhotoInfo@@UAE@XZ
.rdata:10005C68	C0 1B 00 00 B0 14 00 00	10 2F 00 00 D0 2E 00 00+		dd rva ??_7CListInfo@@6B@, rva ??_7CLocationInfo@@6B@
.rdata:10005C68	F0 2E 00 00 C0 2E 00 00						dd rva ??_7CPhotoInfo@@6B@, rva	?GSCRAddLocationNameFromZipcode@@YAJPAVCListInfo@@@Z
.rdata:10005C68									dd rva ?GSCRCreateLocationList@@YAJPBDPAVCListInfo@@@Z
.rdata:10005C68									dd rva ?GSCRDeleteEnumDevices@@YAJPAX@Z, rva ?GSCRDeleteListInfo@@YAJPAVCListInfo@@@Z
.rdata:10005C68									dd rva ?GSCREnumDevices@@YAPAXXZ, rva ?GSCRGetNumOfDevices@@YAHPAX@Z
.rdata:10005C68									dd rva ?GSCRInitDevice@@YAPAXPAXHPAJ@Z,	rva ?GSCRRelatePhotosWithLocations@@YAJPAVCListInfo@@@Z
.rdata:10005C68									dd rva ?GSCRSearchGPSInfo@@YA?AVCString@@XZ, rva ?GSCRSetLogFilename@@YAJPAXPBDH@Z
.rdata:10005C68									dd rva ?GSCRStartLogging@@YAJPAXP6AKKJJ@Z@Z, rva ?GSCRStopLogging@@YAJPAX@Z
.rdata:10005C68									dd rva ?GSCRUninitDevice@@YAJPAX@Z
.rdata:10005CC0							;
.rdata:10005CC0							; Export Names Table for GISCore.dll
.rdata:10005CC0							;
.rdata:10005CC0	50 5D 00 00 65 5D 00 00	7E 5D 00 00 94 5D 00 00+off_10005CC0	dd rva a??0clistinfo@@,	rva a??0clocationin, rva a??0cphotoinfo@
.rdata:10005CC0	A9 5D 00 00 C2 5D 00 00	D8 5D 00 00 EB 5D 00 00+					; DATA XREF: .rdata:10005C60o
.rdata:10005CC0	02 5E 00 00 16 5E 00 00	4B 5E 00 00 7B 5E 00 00+		dd rva a??1clistinfo@@,	rva a??1clocationin, rva a??1cphotoinfo@ ; "??0CListInfo@@QAE@XZ"
.rdata:10005CC0	9C 5E 00 00 C5 5E 00 00	DF 5E 00 00 FE 5E 00 00+		dd rva a??_7clistinfo@,	rva a??_7clocationi, rva a??_7cphotoinfo
.rdata:10005CC0	1E 5F 00 00 52 5F 00 00	77 5F 00 00 99 5F 00 00+		dd rva a?gscraddlocati,	rva a?gscrcreateloc, rva a?gscrdeleteenu
.rdata:10005CC0	BE 5F 00 00 D9 5F 00 00						dd rva a?gscrdeletelis,	rva a?gscrenumdevic, rva a?gscrgetnumofd
.rdata:10005CC0									dd rva a?gscrinitdevic,	rva a?gscrrelatepho, rva a?gscrsearchgps
.rdata:10005CC0									dd rva a?gscrsetlogfil,	rva a?gscrstartlogg, rva a?gscrstoploggi
.rdata:10005CC0									dd rva a?gscruninitdev
.rdata:10005D18							;
.rdata:10005D18							; Export Ordinals Table	for GISCore.dll
.rdata:10005D18							;
.rdata:10005D18	00 00 01 00 02 00 03 00	04 00 05 00 06 00 07 00+word_10005D18	dw 0, 1, 2, 3, 4, 5, 6,	7, 8, 9, 0Ah, 0Bh, 0Ch,	0Dh, 0Eh
.rdata:10005D18	08 00 09 00 0A 00 0B 00	0C 00 0D 00 0E 00 0F 00+					; DATA XREF: .rdata:10005C64o
.rdata:10005D18	10 00 11 00 12 00 13 00	14 00 15 00				dw 0Fh,	10h, 11h, 12h, 13h, 14h, 15h
.rdata:10005D44	47 49 53 43 6F 72 65 2E	64 6C 6C 00		aGiscore_dll	db 'GISCore.dll',0      ; DATA XREF: .rdata:10005C4Co
.rdata:10005D50	3F 3F 30 43 4C 69 73 74	49 6E 66 6F 40 40 51 41+a??0clistinfo@@	db '??0CListInfo@@QAE@XZ',0
.rdata:10005D50	45 40 58 5A 00										; DATA XREF: .rdata:off_10005CC0o
.rdata:10005D65	3F 3F 30 43 4C 6F 63 61	74 69 6F 6E 49 6E 66 6F+a??0clocationin	db '??0CLocationInfo@@QAE@XZ',0
.rdata:10005D65	40 40 51 41 45 40 58 5A	00								; DATA XREF: .rdata:off_10005CC0o
.rdata:10005D7E	3F 3F 30 43 50 68 6F 74	6F 49 6E 66 6F 40 40 51+a??0cphotoinfo@	db '??0CPhotoInfo@@QAE@XZ',0
.rdata:10005D7E	41 45 40 58 5A 00									; DATA XREF: .rdata:off_10005CC0o
.rdata:10005D94	3F 3F 31 43 4C 69 73 74	49 6E 66 6F 40 40 55 41+a??1clistinfo@@	db '??1CListInfo@@UAE@XZ',0
.rdata:10005D94	45 40 58 5A 00										; DATA XREF: .rdata:off_10005CC0o
.rdata:10005DA9	3F 3F 31 43 4C 6F 63 61	74 69 6F 6E 49 6E 66 6F+a??1clocationin	db '??1CLocationInfo@@UAE@XZ',0
.rdata:10005DA9	40 40 55 41 45 40 58 5A	00								; DATA XREF: .rdata:off_10005CC0o
.rdata:10005DC2	3F 3F 31 43 50 68 6F 74	6F 49 6E 66 6F 40 40 55+a??1cphotoinfo@	db '??1CPhotoInfo@@UAE@XZ',0
.rdata:10005DC2	41 45 40 58 5A 00									; DATA XREF: .rdata:off_10005CC0o
.rdata:10005DD8	3F 3F 5F 37 43 4C 69 73	74 49 6E 66 6F 40 40 36+a??_7clistinfo@	db '??_7CListInfo@@6B@',0
.rdata:10005DD8	42 40 00										; DATA XREF: .rdata:off_10005CC0o
.rdata:10005DEB	3F 3F 5F 37 43 4C 6F 63	61 74 69 6F 6E 49 6E 66+a??_7clocationi	db '??_7CLocationInfo@@6B@',0
.rdata:10005DEB	6F 40 40 36 42 40 00									; DATA XREF: .rdata:off_10005CC0o
.rdata:10005E02	3F 3F 5F 37 43 50 68 6F	74 6F 49 6E 66 6F 40 40+a??_7cphotoinfo	db '??_7CPhotoInfo@@6B@',0
.rdata:10005E02	36 42 40 00										; DATA XREF: .rdata:off_10005CC0o
.rdata:10005E16	3F 47 53 43 52 41 64 64	4C 6F 63 61 74 69 6F 6E+a?gscraddlocati	db '?GSCRAddLocationNameFromZipcode@@YAJPAVCListInfo@@@Z',0
.rdata:10005E16	4E 61 6D 65 46 72 6F 6D	5A 69 70 63 6F 64 65 40+					; DATA XREF: .rdata:off_10005CC0o
.rdata:10005E4B	3F 47 53 43 52 43 72 65	61 74 65 4C 6F 63 61 74+a?gscrcreateloc	db '?GSCRCreateLocationList@@YAJPBDPAVCListInfo@@@Z',0
.rdata:10005E4B	69 6F 6E 4C 69 73 74 40	40 59 41 4A 50 42 44 50+					; DATA XREF: .rdata:off_10005CC0o
.rdata:10005E7B	3F 47 53 43 52 44 65 6C	65 74 65 45 6E 75 6D 44+a?gscrdeleteenu	db '?GSCRDeleteEnumDevices@@YAJPAX@Z',0
.rdata:10005E7B	65 76 69 63 65 73 40 40	59 41 4A 50 41 58 40 5A+					; DATA XREF: .rdata:off_10005CC0o
.rdata:10005E9C	3F 47 53 43 52 44 65 6C	65 74 65 4C 69 73 74 49+a?gscrdeletelis	db '?GSCRDeleteListInfo@@YAJPAVCListInfo@@@Z',0
.rdata:10005E9C	6E 66 6F 40 40 59 41 4A	50 41 56 43 4C 69 73 74+					; DATA XREF: .rdata:off_10005CC0o
.rdata:10005EC5	3F 47 53 43 52 45 6E 75	6D 44 65 76 69 63 65 73+a?gscrenumdevic	db '?GSCREnumDevices@@YAPAXXZ',0
.rdata:10005EC5	40 40 59 41 50 41 58 58	5A 00								; DATA XREF: .rdata:off_10005CC0o
.rdata:10005EDF	3F 47 53 43 52 47 65 74	4E 75 6D 4F 66 44 65 76+a?gscrgetnumofd	db '?GSCRGetNumOfDevices@@YAHPAX@Z',0
.rdata:10005EDF	69 63 65 73 40 40 59 41	48 50 41 58 40 5A 00						; DATA XREF: .rdata:off_10005CC0o
.rdata:10005EFE	3F 47 53 43 52 49 6E 69	74 44 65 76 69 63 65 40+a?gscrinitdevic	db '?GSCRInitDevice@@YAPAXPAXHPAJ@Z',0
.rdata:10005EFE	40 59 41 50 41 58 50 41	58 48 50 41 4A 40 5A 00						; DATA XREF: .rdata:off_10005CC0o
.rdata:10005F1E	3F 47 53 43 52 52 65 6C	61 74 65 50 68 6F 74 6F+a?gscrrelatepho	db '?GSCRRelatePhotosWithLocations@@YAJPAVCListInfo@@@Z',0
.rdata:10005F1E	73 57 69 74 68 4C 6F 63	61 74 69 6F 6E 73 40 40+					; DATA XREF: .rdata:off_10005CC0o
.rdata:10005F52	3F 47 53 43 52 53 65 61	72 63 68 47 50 53 49 6E+a?gscrsearchgps	db '?GSCRSearchGPSInfo@@YA?AVCString@@XZ',0
.rdata:10005F52	66 6F 40 40 59 41 3F 41	56 43 53 74 72 69 6E 67+					; DATA XREF: .rdata:off_10005CC0o
.rdata:10005F77	3F 47 53 43 52 53 65 74	4C 6F 67 46 69 6C 65 6E+a?gscrsetlogfil	db '?GSCRSetLogFilename@@YAJPAXPBDH@Z',0
.rdata:10005F77	61 6D 65 40 40 59 41 4A	50 41 58 50 42 44 48 40+					; DATA XREF: .rdata:off_10005CC0o
.rdata:10005F99	3F 47 53 43 52 53 74 61	72 74 4C 6F 67 67 69 6E+a?gscrstartlogg	db '?GSCRStartLogging@@YAJPAXP6AKKJJ@Z@Z',0
.rdata:10005F99	67 40 40 59 41 4A 50 41	58 50 36 41 4B 4B 4A 4A+					; DATA XREF: .rdata:off_10005CC0o
.rdata:10005FBE	3F 47 53 43 52 53 74 6F	70 4C 6F 67 67 69 6E 67+a?gscrstoploggi	db '?GSCRStopLogging@@YAJPAX@Z',0
.rdata:10005FBE	40 40 59 41 4A 50 41 58	40 5A 00							; DATA XREF: .rdata:off_10005CC0o
.rdata:10005FD9	3F 47 53 43 52 55 6E 69	6E 69 74 44 65 76 69 63+a?gscruninitdev	db '?GSCRUninitDevice@@YAJPAX@Z',0
.rdata:10005FD9	65 40 40 59 41 4A 50 41	58 40 5A 00							; DATA XREF: .rdata:off_10005CC0o
.rdata:10005FF5	00 00 00 00 00 00 00 00	00 00 00				align 10h
.rdata:10005FF5							_rdata		ends
.rdata:10005FF5
.data:10006000						       ; Section 3. (virtual address 00006000)
.data:10006000						       ; Virtual size		       : 00000128 (    296.)
.data:10006000						       ; Section size in file	       : 00001000 (   4096.)
.data:10006000						       ; Offset	to raw data for	section: 00006000
.data:10006000						       ; Flags C0000040: Data Readable Writable
.data:10006000						       ; Alignment     : default
.data:10006000						       ; ===========================================================================
.data:10006000
.data:10006000						       ; Segment type: Pure data
.data:10006000						       ; Segment permissions: Read/Write
.data:10006000						       _data	       segment para public 'DATA' use32
.data:10006000								       assume cs:_data
.data:10006000								       ;org 10006000h
.data:10006000 00					       unk_10006000    db    0		       ; DATA XREF: HEADER:10000254o
.data:10006000											       ; sub_10003C44+4Fo
.data:10006001 00							       db    0
.data:10006002 00							       db    0
.data:10006003 00							       db    0
.data:10006004 00					       unk_10006004    db    0		       ; DATA XREF: sub_10003C44+4Ao
.data:10006005 00							       db    0
.data:10006006 00							       db    0
.data:10006007 00							       db    0
.data:10006008 00							       db    0
.data:10006009 00							       db    0
.data:1000600A 00							       db    0
.data:1000600B 00							       db    0
.data:1000600C 00							       db    0
.data:1000600D 00							       db    0
.data:1000600E 00							       db    0
.data:1000600F 00							       db    0
.data:10006010 20 14 00	10				       off_10006010    dd offset sub_10001420  ; DATA XREF: DllEntryPoint+82r
.data:10006010											       ; .rsrc:loc_1000774Ar
.data:10006014 43 6F 6D	6D 6F 6E 00			       aCommon	       db 'Common',0           ; DATA XREF: GSCRSearchGPSInfo(void)+28o
.data:1000601B 00							       align 4
.data:1000601C 4C 6F 63	61 74 69 6F 6E 4C 6F 67	00	       aLocationlog    db 'LocationLog',0      ; DATA XREF: GSCRSearchGPSInfo(void)+1Fo
.data:10006028						       ; char Mode[]
.data:10006028 72 74 00					       Mode	       db 'rt',0               ; DATA XREF: GSCRCreateLocationList(char const *,CListInfo *)+3Bo
.data:1000602B 00							       align 4
.data:1000602C 5C 44 61	74 61 42 61 73 65 5C 7A	69 70 2E 70 64+aDatabaseZip_pd db '\DataBase\zip.pdb',0
.data:1000602C 62 00										       ; DATA XREF: GSCRAddLocationNameFromZipcode(CListInfo *)+2Bo
.data:1000603E 00 00							       align 10h
.data:10006040 30 52 00	10 00 00 00 00 2E 50 41	56 43 45 78 63+stru_10006040   dq offset off_10005230  ; getInfoPtr
.data:10006040 65 70 74	69 6F 6E 40 40 00							       ; DATA XREF: .rdata:stru_10005520o
.data:10006040								       db '.PAVCException@@',0 ; Name
.data:10006059 00 00 00							       align 4
.data:1000605C						       ; unsigned __int8 byte_1000605C
.data:1000605C 2D					       byte_1000605C   db 2Dh		       ; DATA XREF: sub_100022C0+39Fo
.data:1000605C											       ; sub_100022C0+3B6o ...
.data:1000605D 00 00 00							       align 10h
.data:10006060						       ; unsigned __int8 aLbc2
.data:10006060 4C 42 43	32 00				       aLbc2	       db 'LBC2',0             ; DATA XREF: sub_100022C0+2BBo
.data:10006065 00 00 00							       align 4
.data:10006068						       ; unsigned __int8 a_lbc_
.data:10006068 40 4C 42	43 3F 00			       a@lbc?	       db '@LBC?',0            ; DATA XREF: sub_100022C0+272o
.data:1000606E 00 00							       align 10h
.data:10006070						       ; unsigned __int8 aAt
.data:10006070 41 54 00					       aAt	       db 'AT',0               ; DATA XREF: sub_100022C0+23Ao
.data:10006073 00							       align 4
.data:10006074						       ; unsigned __int8 asc_10006074
.data:10006074 0A 00					       asc_10006074    db 0Ah,0		       ; DATA XREF: sub_100022C0+189o
.data:10006076 00 00							       align 4
.data:10006078						       ; unsigned __int8 byte_10006078
.data:10006078 0D					       byte_10006078   db 0Dh		       ; DATA XREF: sub_100022C0+15Do
.data:10006079 00 00 00							       align 4
.data:1000607C						       ; char aError[]
.data:1000607C 45 52 52	4F 52 00			       aError	       db 'ERROR',0            ; DATA XREF: sub_100022C0+69o
.data:1000607C											       ; sub_100022C0+33Eo ...
.data:10006082 00 00							       align 4
.data:10006084						       ; char aOk[]
.data:10006084 4F 4B 00					       aOk	       db 'OK',0               ; DATA XREF: sub_100022C0+5Ao
.data:10006084											       ; sub_100022C0+308o ...
.data:10006087 00							       align 4
.data:10006088						       ; char SubStr[]
.data:10006088 41 48 2D	53 31 30 31 53 00		       SubStr	       db 'AH-S101S',0         ; DATA XREF: GSCREnumDevices(void)+158o
.data:10006091 00 00 00							       align 4
.data:10006094						       ; char String2[]
.data:10006094 41 54 49	34 0D 00			       String2	       db 'ATI4',0Dh,0         ; DATA XREF: GSCREnumDevices(void)+FAo
.data:1000609A 00 00							       align 4
.data:1000609C						       ; char aCom01d[]
.data:1000609C 43 4F 4D	25 30 31 64 00			       aCom01d	       db 'COM%01d',0          ; DATA XREF: GSCREnumDevices(void)+BEo
.data:100060A4						       ; char aAt_lbc_[]
.data:100060A4 41 54 40	4C 42 43 3F 0D 00		       aAt@lbc?	       db 'AT@LBC?',0Dh,0      ; DATA XREF: sub_10002F90+2Ao
.data:100060AD 00 00 00							       align 10h
.data:100060B0						       ; char aAt_lbc1[]
.data:100060B0 41 54 40	4C 42 43 31 0D 00		       aAt@lbc1	       db 'AT@LBC1',0Dh,0      ; DATA XREF: sub_10003030+C1o
.data:100060B9 00 00 00							       align 4
.data:100060BC						       ; char aCom1d[]
.data:100060BC 43 4F 4D	25 31 64 00			       aCom1d	       db 'COM%1d',0           ; DATA XREF: sub_10003030+8Co
.data:100060C3 00							       align 4
.data:100060C4						       ; char aAt_lbc2[]
.data:100060C4 41 54 40	4C 42 43 32 0D 00		       aAt@lbc2	       db 'AT@LBC2',0Dh,0      ; DATA XREF: sub_10003160+1Fo
.data:100060CD 00 00 00							       align 10h
.data:100060D0 30 52 00	10				       off_100060D0    dd offset off_10005230  ; DATA XREF: .rdata:off_10005238o
.data:100060D0											       ; .rdata:10005274o
.data:100060D4 00 00 00	00						       align 8
.data:100060D8 2E 3F 41	56 74 79 70 65 5F 69 6E	66 6F 40 40 00 a_?avtype_info@ db '.?AVtype_info@@',0
.data:100060E8 00 00 00	00 00 00 00 00					       align 10h
.data:100060F0 00					       unk_100060F0    db    0		       ; DATA XREF: .text:1000145Eo
.data:100060F0											       ; .text:1000147Fo ...
.data:100060F1 00							       db    0
.data:100060F2 00							       db    0
.data:100060F3 00							       db    0
.data:100060F4 00							       db    0
.data:100060F5 00							       db    0
.data:100060F6 00							       db    0
.data:100060F7 00							       db    0
.data:100060F8 00							       db    0
.data:100060F9 00							       db    0
.data:100060FA 00							       db    0
.data:100060FB 00							       db    0
.data:100060FC 00							       db    0
.data:100060FD 00							       db    0
.data:100060FE 00							       db    0
.data:100060FF 00							       db    0
.data:10006100 00							       db    0
.data:10006101 00							       db    0
.data:10006102 00							       db    0
.data:10006103 00							       db    0
.data:10006104 00					       unk_10006104    db    0		       ; DATA XREF: GSCRSearchGPSInfo(void)+1Ao
.data:10006104											       ; GSCRSearchGPSInfo(void)+91o ...
.data:10006105 00							       db    0
.data:10006106 00							       db    0
.data:10006107 00							       db    0
.data:10006108						       ; LPCSTR	lpString2
.data:10006108 00 00 00	00				       lpString2       dd 0		       ; DATA XREF: sub_10002AE0+Eo
.data:10006108											       ; sub_10002AE0+54r ...
.data:1000610C 00					       byte_1000610C   db 0		       ; DATA XREF: sub_10002AE0r
.data:1000610C											       ; sub_10002AE0+15w
.data:1000610D 00							       db    0
.data:1000610E 00							       db    0
.data:1000610F 00							       db    0
.data:10006110 00							       db    0
.data:10006111 00							       db    0
.data:10006112 00							       db    0
.data:10006113 00							       db    0
.data:10006114 00							       db    0
.data:10006115 00							       db    0
.data:10006116 00							       db    0
.data:10006117 00							       db    0
.data:10006118 00 00 00	00				       dword_10006118  dd 0		       ; DATA XREF: sub_10003C44+8r
.data:10006118											       ; sub_10003C44+10w ...
.data:1000611C 00 00 00	00				       dword_1000611C  dd 0		       ; DATA XREF: sub_10003C44+21w
.data:10006120 00 00 00	00				       dword_10006120  dd 0		       ; DATA XREF: sub_10003C06:loc_10003C1Bo
.data:10006120											       ; sub_10003C44+54w ...
.data:10006124						       ; void *Memory
.data:10006124 00 00 00	00				       Memory	       dd 0		       ; DATA XREF: sub_10003C06r
.data:10006124											       ; sub_10003C06+1Ao ...
.data:10006128 00 00 00	00 00 00 00 00 00 00 00	00 00 00 00 00+		       align 1000h
.data:10006128 00 00 00	00 00 00 00 00 00 00 00	00 00 00 00 00+_data	       ends
.data:10006128 00 00 00	00 00 00 00 00 00 00 00	00 00 00 00 00+
.rsrc:10007000						       ; ===========================================================================
.rsrc:10007000
.rsrc:10007000						       ; [00019000 BYTES: COLLAPSED SEGMENT _rsrc. PRESS KEYPAD	CTRL-"+" TO EXPAND]
.reloc:10020000							; ===========================================================================
.reloc:10020000
.reloc:10020000							; [00001000 BYTES: COLLAPSED SEGMENT _reloc. PRESS KEYPAD CTRL-"+" TO EXPAND]
